/* Generated By:JavaCC: Do not edit this line. VCDParserTokenManager.java */
/* 
 * Copyright 2009 by the authors indicated in the @author tags. 
 * All rights reserved. 
 * 
 * See the LICENSE file for details.
 * 
 * 
 */

package org.zamia.instgraph.sim.vcd.parser;
import org.zamia.*;
import java.util.*;
import java.math.BigInteger;
import java.io.Reader;
import java.io.IOException;
import java.io.StringReader;
import org.zamia.instgraph.sim.vcd.*;
import org.zamia.instgraph.*;
import org.zamia.util.*;

/** Token Manager. */
public class VCDParserTokenManager implements VCDParserConstants
{

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_2(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x1ffff80000000000L) != 0L)
         {
            jjmatchedKind = 66;
            return 2;
         }
         return -1;
      case 1:
         if ((active0 & 0x1ffff80000000000L) != 0L)
         {
            jjmatchedKind = 66;
            jjmatchedPos = 1;
            return 2;
         }
         return -1;
      case 2:
         if ((active0 & 0x13f1000000000000L) != 0L)
            return 2;
         if ((active0 & 0xc0ef80000000000L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 66;
               jjmatchedPos = 2;
            }
            return 2;
         }
         return -1;
      case 3:
         if ((active0 & 0xf08c00000000000L) != 0L)
            return 2;
         if ((active0 & 0xe6380000000000L) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 66;
               jjmatchedPos = 3;
            }
            return 2;
         }
         return -1;
      case 4:
         if ((active0 & 0x40080000000000L) != 0L)
            return 2;
         if ((active0 & 0xa6b00000000000L) != 0L)
         {
            jjmatchedKind = 66;
            jjmatchedPos = 4;
            return 2;
         }
         return -1;
      case 5:
         if ((active0 & 0xa0000000000000L) != 0L)
            return 2;
         if ((active0 & 0x6b00000000000L) != 0L)
         {
            jjmatchedKind = 66;
            jjmatchedPos = 5;
            return 2;
         }
         return -1;
      case 6:
         if ((active0 & 0x6100000000000L) != 0L)
            return 2;
         if ((active0 & 0xa00000000000L) != 0L)
         {
            jjmatchedKind = 66;
            jjmatchedPos = 6;
            return 2;
         }
         return -1;
      case 7:
         if ((active0 & 0x800000000000L) != 0L)
            return 2;
         if ((active0 & 0x200000000000L) != 0L)
         {
            jjmatchedKind = 66;
            jjmatchedPos = 7;
            return 2;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_2(int pos, long active0, long active1)
{
   return jjMoveNfa_2(jjStopStringLiteralDfa_2(pos, active0, active1), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_2()
{
   switch(curChar)
   {
      case 36:
         return jjMoveStringLiteralDfa1_2(0x2000000000000000L);
      case 91:
         return jjStopAtPos(0, 67);
      case 101:
         return jjMoveStringLiteralDfa1_2(0x80000000000L);
      case 105:
         return jjMoveStringLiteralDfa1_2(0x100000000000L);
      case 112:
         return jjMoveStringLiteralDfa1_2(0x200000000000L);
      case 114:
         return jjMoveStringLiteralDfa1_2(0x1c00000000000L);
      case 115:
         return jjMoveStringLiteralDfa1_2(0x6000000000000L);
      case 116:
         return jjMoveStringLiteralDfa1_2(0x3f8000000000000L);
      case 119:
         return jjMoveStringLiteralDfa1_2(0x1c00000000000000L);
      case 160:
         return jjStopAtPos(0, 8);
      case 65533:
         return jjStopAtPos(0, 9);
      default :
         return jjMoveNfa_2(1, 0);
   }
}
private int jjMoveStringLiteralDfa1_2(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(0, active0, 0L);
      return 1;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa2_2(active0, 0x400200000000000L);
      case 101:
         return jjMoveStringLiteralDfa2_2(active0, 0x2001c00000000000L);
      case 105:
         return jjMoveStringLiteralDfa2_2(active0, 0x808000000000000L);
      case 110:
         return jjMoveStringLiteralDfa2_2(active0, 0x100000000000L);
      case 111:
         return jjMoveStringLiteralDfa2_2(active0, 0x1000000000000000L);
      case 114:
         return jjMoveStringLiteralDfa2_2(active0, 0x3f0000000000000L);
      case 117:
         return jjMoveStringLiteralDfa2_2(active0, 0x6000000000000L);
      case 118:
         return jjMoveStringLiteralDfa2_2(active0, 0x80000000000L);
      default :
         break;
   }
   return jjStartNfa_2(0, active0, 0L);
}
private int jjMoveStringLiteralDfa2_2(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_2(0, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(1, active0, 0L);
      return 2;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa3_2(active0, 0xc00000000000L);
      case 101:
         return jjMoveStringLiteralDfa3_2(active0, 0x80000000000L);
      case 103:
         if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_2(2, 48, 2);
         break;
      case 105:
         if ((active0 & 0x10000000000000L) != 0L)
         {
            jjmatchedKind = 52;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_2(active0, 0x3e0000000000000L);
      case 109:
         return jjMoveStringLiteralDfa3_2(active0, 0x8000000000000L);
      case 110:
         return jjMoveStringLiteralDfa3_2(active0, 0x2400000000000000L);
      case 112:
         return jjMoveStringLiteralDfa3_2(active0, 0x6000000000000L);
      case 114:
         if ((active0 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_2(2, 60, 2);
         return jjMoveStringLiteralDfa3_2(active0, 0x800200000000000L);
      case 116:
         return jjMoveStringLiteralDfa3_2(active0, 0x100000000000L);
      default :
         break;
   }
   return jjStartNfa_2(1, active0, 0L);
}
private int jjMoveStringLiteralDfa3_2(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_2(1, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(2, active0, 0L);
      return 3;
   }
   switch(curChar)
   {
      case 48:
         if ((active0 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_2(3, 56, 2);
         break;
      case 49:
         if ((active0 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_2(3, 57, 2);
         break;
      case 97:
         return jjMoveStringLiteralDfa4_2(active0, 0x20200000000000L);
      case 100:
         if ((active0 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_2(3, 58, 2);
         else if ((active0 & 0x2000000000000000L) != 0L)
            return jjStopAtPos(3, 61);
         break;
      case 101:
         if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_2(3, 51, 2);
         else if ((active0 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_2(3, 59, 2);
         return jjMoveStringLiteralDfa4_2(active0, 0x100000000000L);
      case 108:
         if ((active0 & 0x400000000000L) != 0L)
         {
            jjmatchedKind = 46;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_2(active0, 0x800000000000L);
      case 110:
         return jjMoveStringLiteralDfa4_2(active0, 0x80000000000L);
      case 111:
         return jjMoveStringLiteralDfa4_2(active0, 0x40000000000000L);
      case 112:
         return jjMoveStringLiteralDfa4_2(active0, 0x6000000000000L);
      case 114:
         return jjMoveStringLiteralDfa4_2(active0, 0x80000000000000L);
      default :
         break;
   }
   return jjStartNfa_2(2, active0, 0L);
}
private int jjMoveStringLiteralDfa4_2(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_2(2, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(3, active0, 0L);
      return 4;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa5_2(active0, 0x80000000000000L);
      case 103:
         return jjMoveStringLiteralDfa5_2(active0, 0x100000000000L);
      case 108:
         return jjMoveStringLiteralDfa5_2(active0, 0x6000000000000L);
      case 109:
         return jjMoveStringLiteralDfa5_2(active0, 0x200000000000L);
      case 110:
         return jjMoveStringLiteralDfa5_2(active0, 0x20000000000000L);
      case 114:
         if ((active0 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_2(4, 54, 2);
         break;
      case 116:
         if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_2(4, 43, 2);
         return jjMoveStringLiteralDfa5_2(active0, 0x800000000000L);
      default :
         break;
   }
   return jjStartNfa_2(3, active0, 0L);
}
private int jjMoveStringLiteralDfa5_2(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_2(3, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(4, active0, 0L);
      return 5;
   }
   switch(curChar)
   {
      case 100:
         if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_2(5, 53, 2);
         break;
      case 101:
         return jjMoveStringLiteralDfa6_2(active0, 0x300000000000L);
      case 103:
         if ((active0 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_2(5, 55, 2);
         break;
      case 105:
         return jjMoveStringLiteralDfa6_2(active0, 0x800000000000L);
      case 121:
         return jjMoveStringLiteralDfa6_2(active0, 0x6000000000000L);
      default :
         break;
   }
   return jjStartNfa_2(4, active0, 0L);
}
private int jjMoveStringLiteralDfa6_2(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_2(4, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(5, active0, 0L);
      return 6;
   }
   switch(curChar)
   {
      case 48:
         if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_2(6, 49, 2);
         break;
      case 49:
         if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_2(6, 50, 2);
         break;
      case 109:
         return jjMoveStringLiteralDfa7_2(active0, 0x800000000000L);
      case 114:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_2(6, 44, 2);
         break;
      case 116:
         return jjMoveStringLiteralDfa7_2(active0, 0x200000000000L);
      default :
         break;
   }
   return jjStartNfa_2(5, active0, 0L);
}
private int jjMoveStringLiteralDfa7_2(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_2(5, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(6, active0, 0L);
      return 7;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_2(7, 47, 2);
         return jjMoveStringLiteralDfa8_2(active0, 0x200000000000L);
      default :
         break;
   }
   return jjStartNfa_2(6, active0, 0L);
}
private int jjMoveStringLiteralDfa8_2(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_2(6, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_2(7, active0, 0L);
      return 8;
   }
   switch(curChar)
   {
      case 114:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_2(8, 45, 2);
         break;
      default :
         break;
   }
   return jjStartNfa_2(7, active0, 0L);
}
private int jjStartNfaWithStates_2(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_2(state, pos + 1);
}
private int jjMoveNfa_2(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 3;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
               case 0:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 63)
                     kind = 63;
                  jjCheckNAdd(0);
                  break;
               case 2:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 66)
                     kind = 66;
                  jjstateSet[jjnewStateCnt++] = 2;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 66)
                     kind = 66;
                  jjCheckNAdd(2);
                  break;
               case 2:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 66)
                     kind = 66;
                  jjCheckNAdd(2);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 3 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1)
{
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
}
private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 102:
         return jjMoveStringLiteralDfa1_0(0x20000L);
      case 109:
         return jjMoveStringLiteralDfa1_0(0x2000L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x8000L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x10000L);
      case 115:
         return jjStopAtPos(0, 76);
      case 117:
         return jjMoveStringLiteralDfa1_0(0x4000L);
      case 160:
         return jjStopAtPos(0, 8);
      case 65533:
         return jjStopAtPos(0, 9);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, 0L, active1);
      return 1;
   }
   switch(curChar)
   {
      case 115:
         if ((active1 & 0x2000L) != 0L)
            return jjStopAtPos(1, 77);
         else if ((active1 & 0x4000L) != 0L)
            return jjStopAtPos(1, 78);
         else if ((active1 & 0x8000L) != 0L)
            return jjStopAtPos(1, 79);
         else if ((active1 & 0x10000L) != 0L)
            return jjStopAtPos(1, 80);
         else if ((active1 & 0x20000L) != 0L)
            return jjStopAtPos(1, 81);
         break;
      default :
         break;
   }
   return jjStartNfa_0(0, 0L, active1);
}
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 1;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  kind = 75;
                  jjstateSet[jjnewStateCnt++] = 0;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 1 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_3(int pos, long active0)
{
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_3(int pos, long active0)
{
   return jjMoveNfa_3(jjStopStringLiteralDfa_3(pos, active0), pos + 1);
}
private int jjMoveStringLiteralDfa0_3()
{
   switch(curChar)
   {
      case 160:
         return jjStopAtPos(0, 8);
      case 65533:
         return jjStopAtPos(0, 9);
      default :
         return jjMoveNfa_3(0, 0);
   }
}
private int jjMoveNfa_3(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 1;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xfffffffe00000000L & l) == 0L)
                     break;
                  kind = 73;
                  jjstateSet[jjnewStateCnt++] = 0;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x7fffffffffffffffL & l) == 0L)
                     break;
                  kind = 73;
                  jjstateSet[jjnewStateCnt++] = 0;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 1 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private final int jjStopStringLiteralDfa_6(int pos, long active0)
{
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_6(int pos, long active0)
{
   return jjMoveNfa_6(jjStopStringLiteralDfa_6(pos, active0), pos + 1);
}
private int jjMoveStringLiteralDfa0_6()
{
   switch(curChar)
   {
      case 36:
         return jjMoveStringLiteralDfa1_6(0x7fce400L);
      case 160:
         return jjStopAtPos(0, 8);
      case 65533:
         return jjStopAtPos(0, 9);
      default :
         return jjMoveNfa_6(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_6(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_6(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa2_6(active0, 0x400L);
      case 100:
         return jjMoveStringLiteralDfa2_6(active0, 0x782000L);
      case 101:
         return jjMoveStringLiteralDfa2_6(active0, 0x44000L);
      case 115:
         return jjMoveStringLiteralDfa2_6(active0, 0x800000L);
      case 116:
         return jjMoveStringLiteralDfa2_6(active0, 0x4000000L);
      case 117:
         return jjMoveStringLiteralDfa2_6(active0, 0x1000000L);
      case 118:
         return jjMoveStringLiteralDfa2_6(active0, 0x2008000L);
      default :
         break;
   }
   return jjStartNfa_6(0, active0);
}
private int jjMoveStringLiteralDfa2_6(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_6(0, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_6(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa3_6(active0, 0x2002000L);
      case 99:
         return jjMoveStringLiteralDfa3_6(active0, 0x800000L);
      case 101:
         return jjMoveStringLiteralDfa3_6(active0, 0x8000L);
      case 105:
         return jjMoveStringLiteralDfa3_6(active0, 0x4000000L);
      case 110:
         return jjMoveStringLiteralDfa3_6(active0, 0x44000L);
      case 111:
         return jjMoveStringLiteralDfa3_6(active0, 0x400L);
      case 112:
         return jjMoveStringLiteralDfa3_6(active0, 0x1000000L);
      case 117:
         return jjMoveStringLiteralDfa3_6(active0, 0x780000L);
      default :
         break;
   }
   return jjStartNfa_6(1, active0);
}
private int jjMoveStringLiteralDfa3_6(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_6(1, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_6(2, active0);
      return 3;
   }
   switch(curChar)
   {
      case 100:
         if ((active0 & 0x40000L) != 0L)
         {
            jjmatchedKind = 18;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_6(active0, 0x4000L);
      case 109:
         return jjMoveStringLiteralDfa4_6(active0, 0x4780400L);
      case 111:
         return jjMoveStringLiteralDfa4_6(active0, 0x800000L);
      case 114:
         if ((active0 & 0x2000000L) != 0L)
            return jjStopAtPos(3, 25);
         return jjMoveStringLiteralDfa4_6(active0, 0x8000L);
      case 115:
         return jjMoveStringLiteralDfa4_6(active0, 0x1000000L);
      case 116:
         return jjMoveStringLiteralDfa4_6(active0, 0x2000L);
      default :
         break;
   }
   return jjStartNfa_6(2, active0);
}
private int jjMoveStringLiteralDfa4_6(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_6(2, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_6(3, active0);
      return 4;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa5_6(active0, 0x1000000L);
      case 100:
         return jjMoveStringLiteralDfa5_6(active0, 0x4000L);
      case 101:
         if ((active0 & 0x2000L) != 0L)
            return jjStopAtPos(4, 13);
         return jjMoveStringLiteralDfa5_6(active0, 0x4000000L);
      case 109:
         return jjMoveStringLiteralDfa5_6(active0, 0x400L);
      case 112:
         return jjMoveStringLiteralDfa5_6(active0, 0xf80000L);
      case 115:
         return jjMoveStringLiteralDfa5_6(active0, 0x8000L);
      default :
         break;
   }
   return jjStartNfa_6(3, active0);
}
private int jjMoveStringLiteralDfa5_6(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_6(3, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_6(4, active0);
      return 5;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa6_6(active0, 0x80000L);
      case 101:
         if ((active0 & 0x800000L) != 0L)
            return jjStopAtPos(5, 23);
         return jjMoveStringLiteralDfa6_6(active0, 0x4400L);
      case 105:
         return jjMoveStringLiteralDfa6_6(active0, 0x8000L);
      case 111:
         return jjMoveStringLiteralDfa6_6(active0, 0x1300000L);
      case 115:
         return jjMoveStringLiteralDfa6_6(active0, 0x4000000L);
      case 118:
         return jjMoveStringLiteralDfa6_6(active0, 0x400000L);
      default :
         break;
   }
   return jjStartNfa_6(4, active0);
}
private int jjMoveStringLiteralDfa6_6(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_6(4, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_6(5, active0);
      return 6;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa7_6(active0, 0x400000L);
      case 99:
         return jjMoveStringLiteralDfa7_6(active0, 0x4000000L);
      case 102:
         return jjMoveStringLiteralDfa7_6(active0, 0x104000L);
      case 108:
         return jjMoveStringLiteralDfa7_6(active0, 0x80000L);
      case 110:
         if ((active0 & 0x200000L) != 0L)
            return jjStopAtPos(6, 21);
         return jjMoveStringLiteralDfa7_6(active0, 0x400L);
      case 111:
         return jjMoveStringLiteralDfa7_6(active0, 0x8000L);
      case 112:
         return jjMoveStringLiteralDfa7_6(active0, 0x1000000L);
      default :
         break;
   }
   return jjStartNfa_6(5, active0);
}
private int jjMoveStringLiteralDfa7_6(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_6(5, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_6(6, active0);
      return 7;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa8_6(active0, 0x4000000L);
      case 101:
         if ((active0 & 0x1000000L) != 0L)
            return jjStopAtPos(7, 24);
         break;
      case 102:
         if ((active0 & 0x100000L) != 0L)
            return jjStopAtPos(7, 20);
         break;
      case 105:
         return jjMoveStringLiteralDfa8_6(active0, 0x4000L);
      case 108:
         if ((active0 & 0x80000L) != 0L)
            return jjStopAtPos(7, 19);
         break;
      case 110:
         if ((active0 & 0x8000L) != 0L)
            return jjStopAtPos(7, 15);
         break;
      case 114:
         return jjMoveStringLiteralDfa8_6(active0, 0x400000L);
      case 116:
         if ((active0 & 0x400L) != 0L)
            return jjStopAtPos(7, 10);
         break;
      default :
         break;
   }
   return jjStartNfa_6(6, active0);
}
private int jjMoveStringLiteralDfa8_6(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_6(6, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_6(7, active0);
      return 8;
   }
   switch(curChar)
   {
      case 108:
         return jjMoveStringLiteralDfa9_6(active0, 0x4000000L);
      case 110:
         return jjMoveStringLiteralDfa9_6(active0, 0x4000L);
      case 115:
         if ((active0 & 0x400000L) != 0L)
            return jjStopAtPos(8, 22);
         break;
      default :
         break;
   }
   return jjStartNfa_6(7, active0);
}
private int jjMoveStringLiteralDfa9_6(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_6(7, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_6(8, active0);
      return 9;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x4000000L) != 0L)
            return jjStopAtPos(9, 26);
         break;
      case 105:
         return jjMoveStringLiteralDfa10_6(active0, 0x4000L);
      default :
         break;
   }
   return jjStartNfa_6(8, active0);
}
private int jjMoveStringLiteralDfa10_6(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_6(8, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_6(9, active0);
      return 10;
   }
   switch(curChar)
   {
      case 116:
         return jjMoveStringLiteralDfa11_6(active0, 0x4000L);
      default :
         break;
   }
   return jjStartNfa_6(9, active0);
}
private int jjMoveStringLiteralDfa11_6(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_6(9, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_6(10, active0);
      return 11;
   }
   switch(curChar)
   {
      case 105:
         return jjMoveStringLiteralDfa12_6(active0, 0x4000L);
      default :
         break;
   }
   return jjStartNfa_6(10, active0);
}
private int jjMoveStringLiteralDfa12_6(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_6(10, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_6(11, active0);
      return 12;
   }
   switch(curChar)
   {
      case 111:
         return jjMoveStringLiteralDfa13_6(active0, 0x4000L);
      default :
         break;
   }
   return jjStartNfa_6(11, active0);
}
private int jjMoveStringLiteralDfa13_6(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_6(11, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_6(12, active0);
      return 13;
   }
   switch(curChar)
   {
      case 110:
         return jjMoveStringLiteralDfa14_6(active0, 0x4000L);
      default :
         break;
   }
   return jjStartNfa_6(12, active0);
}
private int jjMoveStringLiteralDfa14_6(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_6(12, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_6(13, active0);
      return 14;
   }
   switch(curChar)
   {
      case 115:
         if ((active0 & 0x4000L) != 0L)
            return jjStopAtPos(14, 14);
         break;
      default :
         break;
   }
   return jjStartNfa_6(13, active0);
}
private int jjMoveNfa_6(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 15;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x3200000000000L & l) != 0L)
                  {
                     if (kind > 34)
                        kind = 34;
                     jjCheckNAdd(14);
                  }
                  else if (curChar == 35)
                     jjCheckNAdd(1);
                  break;
               case 1:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 29)
                     kind = 29;
                  jjCheckNAdd(1);
                  break;
               case 3:
                  if ((0x3200000000000L & l) == 0L)
                     break;
                  if (kind > 31)
                     kind = 31;
                  jjstateSet[jjnewStateCnt++] = 3;
                  break;
               case 5:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 33)
                     kind = 33;
                  jjCheckNAddStates(0, 2);
                  break;
               case 6:
                  if (curChar == 46)
                     jjCheckNAdd(7);
                  break;
               case 7:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 33)
                     kind = 33;
                  jjCheckNAddTwoStates(7, 8);
                  break;
               case 9:
                  if (curChar == 43)
                     jjCheckNAdd(10);
                  break;
               case 10:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 33)
                     kind = 33;
                  jjCheckNAdd(10);
                  break;
               case 11:
                  if (curChar == 45)
                     jjCheckNAdd(12);
                  break;
               case 12:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 33)
                     kind = 33;
                  jjCheckNAdd(12);
                  break;
               case 13:
                  if ((0x3200000000000L & l) == 0L)
                     break;
                  if (kind > 34)
                     kind = 34;
                  jjCheckNAdd(14);
                  break;
               case 14:
                  if ((0xfffffffe00000000L & l) == 0L)
                     break;
                  if (kind > 35)
                     kind = 35;
                  jjCheckNAdd(14);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x5a0110005a01100L & l) != 0L)
                  {
                     if (kind > 34)
                        kind = 34;
                     jjCheckNAdd(14);
                  }
                  else if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 5;
                  else if ((0x400000004L & l) != 0L)
                     jjCheckNAdd(3);
                  break;
               case 2:
                  if ((0x400000004L & l) != 0L)
                     jjCheckNAdd(3);
                  break;
               case 3:
                  if ((0x5a0110005a01100L & l) == 0L)
                     break;
                  if (kind > 31)
                     kind = 31;
                  jjCheckNAdd(3);
                  break;
               case 4:
                  if ((0x4000000040000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 8:
                  if (curChar == 101)
                     jjAddStates(3, 5);
                  break;
               case 13:
                  if ((0x5a0110005a01100L & l) == 0L)
                     break;
                  if (kind > 34)
                     kind = 34;
                  jjCheckNAdd(14);
                  break;
               case 14:
                  if ((0x7fffffffffffffffL & l) == 0L)
                     break;
                  if (kind > 35)
                     kind = 35;
                  jjCheckNAdd(14);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 15 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private int jjMoveStringLiteralDfa0_4()
{
   switch(curChar)
   {
      case 98:
         return jjMoveStringLiteralDfa1_4(0x4000000000L);
      case 102:
         return jjMoveStringLiteralDfa1_4(0x18000000000L);
      case 109:
         return jjMoveStringLiteralDfa1_4(0x20000000000L);
      case 116:
         return jjMoveStringLiteralDfa1_4(0x40000000000L);
      case 160:
         return jjStopAtPos(0, 8);
      case 65533:
         return jjStopAtPos(0, 9);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa1_4(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa2_4(active0, 0x40000000000L);
      case 101:
         return jjMoveStringLiteralDfa2_4(active0, 0x4000000000L);
      case 111:
         return jjMoveStringLiteralDfa2_4(active0, 0x28000000000L);
      case 117:
         return jjMoveStringLiteralDfa2_4(active0, 0x10000000000L);
      default :
         return 2;
   }
}
private int jjMoveStringLiteralDfa2_4(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 2;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 2;
   }
   switch(curChar)
   {
      case 100:
         return jjMoveStringLiteralDfa3_4(active0, 0x20000000000L);
      case 103:
         return jjMoveStringLiteralDfa3_4(active0, 0x4000000000L);
      case 110:
         return jjMoveStringLiteralDfa3_4(active0, 0x10000000000L);
      case 114:
         return jjMoveStringLiteralDfa3_4(active0, 0x8000000000L);
      case 115:
         return jjMoveStringLiteralDfa3_4(active0, 0x40000000000L);
      default :
         return 3;
   }
}
private int jjMoveStringLiteralDfa3_4(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 3;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 3;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa4_4(active0, 0x10000000000L);
      case 105:
         return jjMoveStringLiteralDfa4_4(active0, 0x4000000000L);
      case 107:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStopAtPos(3, 39);
         else if ((active0 & 0x40000000000L) != 0L)
            return jjStopAtPos(3, 42);
         break;
      case 117:
         return jjMoveStringLiteralDfa4_4(active0, 0x20000000000L);
      default :
         return 4;
   }
   return 4;
}
private int jjMoveStringLiteralDfa4_4(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 4;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 4;
   }
   switch(curChar)
   {
      case 108:
         return jjMoveStringLiteralDfa5_4(active0, 0x20000000000L);
      case 110:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStopAtPos(4, 38);
         break;
      case 116:
         return jjMoveStringLiteralDfa5_4(active0, 0x10000000000L);
      default :
         return 5;
   }
   return 5;
}
private int jjMoveStringLiteralDfa5_4(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 5;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 5;
   }
   switch(curChar)
   {
      case 101:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStopAtPos(5, 41);
         break;
      case 105:
         return jjMoveStringLiteralDfa6_4(active0, 0x10000000000L);
      default :
         return 6;
   }
   return 6;
}
private int jjMoveStringLiteralDfa6_4(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 6;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 6;
   }
   switch(curChar)
   {
      case 111:
         return jjMoveStringLiteralDfa7_4(active0, 0x10000000000L);
      default :
         return 7;
   }
}
private int jjMoveStringLiteralDfa7_4(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 7;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 7;
   }
   switch(curChar)
   {
      case 110:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStopAtPos(7, 40);
         break;
      default :
         return 8;
   }
   return 8;
}
private final int jjStopStringLiteralDfa_5(int pos, long active0)
{
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_5(int pos, long active0)
{
   return jjMoveNfa_5(jjStopStringLiteralDfa_5(pos, active0), pos + 1);
}
private int jjMoveStringLiteralDfa0_5()
{
   switch(curChar)
   {
      case 160:
         return jjStopAtPos(0, 8);
      case 65533:
         return jjStopAtPos(0, 9);
      default :
         return jjMoveNfa_5(0, 0);
   }
}
private int jjMoveNfa_5(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 1;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0xfffffffe00000000L & l) == 0L)
                     break;
                  kind = 37;
                  jjstateSet[jjnewStateCnt++] = 0;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x7fffffffffffffffL & l) == 0L)
                     break;
                  kind = 37;
                  jjstateSet[jjnewStateCnt++] = 0;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 1 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private int jjMoveStringLiteralDfa0_8()
{
   switch(curChar)
   {
      case 36:
         return jjMoveStringLiteralDfa1_8(0x10000L);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa1_8(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa2_8(active0, 0x10000L);
      default :
         return 2;
   }
}
private int jjMoveStringLiteralDfa2_8(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 2;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 2;
   }
   switch(curChar)
   {
      case 110:
         return jjMoveStringLiteralDfa3_8(active0, 0x10000L);
      default :
         return 3;
   }
}
private int jjMoveStringLiteralDfa3_8(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 3;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 3;
   }
   switch(curChar)
   {
      case 100:
         if ((active0 & 0x10000L) != 0L)
            return jjStopAtPos(3, 16);
         break;
      default :
         return 4;
   }
   return 4;
}
private final int jjStopStringLiteralDfa_1(int pos, long active0, long active1)
{
   switch (pos)
   {
      default :
         return -1;
   }
}
private final int jjStartNfa_1(int pos, long active0, long active1)
{
   return jjMoveNfa_1(jjStopStringLiteralDfa_1(pos, active0, active1), pos + 1);
}
private int jjMoveStringLiteralDfa0_1()
{
   switch(curChar)
   {
      case 58:
         return jjStopAtPos(0, 69);
      case 93:
         return jjStopAtPos(0, 68);
      case 160:
         return jjStopAtPos(0, 8);
      case 65533:
         return jjStopAtPos(0, 9);
      default :
         return jjMoveNfa_1(0, 0);
   }
}
private int jjMoveNfa_1(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 1;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  kind = 71;
                  jjstateSet[jjnewStateCnt++] = 0;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 1 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private int jjMoveStringLiteralDfa0_7()
{
   switch(curChar)
   {
      case 36:
         return jjMoveStringLiteralDfa1_7(0x800L);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa1_7(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 101:
         return jjMoveStringLiteralDfa2_7(active0, 0x800L);
      default :
         return 2;
   }
}
private int jjMoveStringLiteralDfa2_7(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 2;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 2;
   }
   switch(curChar)
   {
      case 110:
         return jjMoveStringLiteralDfa3_7(active0, 0x800L);
      default :
         return 3;
   }
}
private int jjMoveStringLiteralDfa3_7(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return 3;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 3;
   }
   switch(curChar)
   {
      case 100:
         if ((active0 & 0x800L) != 0L)
            return jjStopAtPos(3, 11);
         break;
      default :
         return 4;
   }
   return 4;
}
static final int[] jjnextStates = {
   5, 6, 8, 9, 10, 11, 
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, "\44\145\156\144", "\44\144\165\155\160\141\154\154", 
"\44\144\165\155\160\157\146\146", "\44\144\165\155\160\157\156", "\44\144\165\155\160\166\141\162\163", 
"\44\163\143\157\160\145", "\44\165\160\163\143\157\160\145", "\44\166\141\162", 
"\44\164\151\155\145\163\143\141\154\145", null, null, null, null, null, null, null, null, null, null, null, 
"\142\145\147\151\156", "\146\157\162\153", "\146\165\156\143\164\151\157\156", 
"\155\157\144\165\154\145", "\164\141\163\153", "\145\166\145\156\164", "\151\156\164\145\147\145\162", 
"\160\141\162\141\155\145\164\145\162", "\162\145\141\154", "\162\145\141\154\164\151\155\145", "\162\145\147", 
"\163\165\160\160\154\171\60", "\163\165\160\160\154\171\61", "\164\151\155\145", "\164\162\151", 
"\164\162\151\141\156\144", "\164\162\151\157\162", "\164\162\151\162\145\147", "\164\162\151\60", 
"\164\162\151\61", "\167\141\156\144", "\167\151\162\145", "\167\157\162", "\44\145\156\144", 
null, null, null, null, null, "\133", "\135", "\72", null, null, null, null, null, 
null, "\163", "\155\163", "\165\163", "\156\163", "\160\163", "\146\163", };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "TS_MODE",
   "VAR_BRACKET_MODE",
   "VAR_MODE",
   "VAR_ID_MODE",
   "SCOPE_MODE",
   "ID_MODE",
   "DEFAULT",
   "COMMENT",
   "DECLARATION",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7, 6, -1, 8, 8, 8, 6, -1, -1, -1, -1, -1, -1, 4, -1, 
   2, 0, -1, -1, -1, -1, 5, -1, -1, 5, -1, -1, 6, 5, 5, 5, 5, 5, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6, -1, 3, -1, -1, -1, 1, 2, -1, -1, -1, -1, 2, -1, 
   -1, 6, 6, 6, 6, 6, 6, 
};
static final long[] jjtoToken = {
   0xbfffffeea7fd0001L, 0x3fabcL, 
};
static final long[] jjtoSkip = {
   0xbfeL, 0x0L, 
};
static final long[] jjtoMore = {
   0x2f400L, 0x0L, 
};
protected CharStream input_stream;
private final int[] jjrounds = new int[15];
private final int[] jjstateSet = new int[30];
protected char curChar;
/** Constructor. */
public VCDParserTokenManager(CharStream stream){
   input_stream = stream;
}

/** Constructor. */
public VCDParserTokenManager(CharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
public void ReInit(CharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 15; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
public void ReInit(CharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
public void SwitchTo(int lexState)
{
   if (lexState >= 9 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 6;
int defaultLexState = 6;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   for (;;)
   {
     switch(curLexState)
     {
       case 0:
         try { input_stream.backup(0);
            while (curChar <= 32 && (0x100003701L & (1L << curChar)) != 0L)
               curChar = input_stream.BeginToken();
         }
         catch (java.io.IOException e1) { continue EOFLoop; }
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_0();
         break;
       case 1:
         try { input_stream.backup(0);
            while (curChar <= 32 && (0x100003701L & (1L << curChar)) != 0L)
               curChar = input_stream.BeginToken();
         }
         catch (java.io.IOException e1) { continue EOFLoop; }
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_1();
         break;
       case 2:
         try { input_stream.backup(0);
            while (curChar <= 32 && (0x100003701L & (1L << curChar)) != 0L)
               curChar = input_stream.BeginToken();
         }
         catch (java.io.IOException e1) { continue EOFLoop; }
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_2();
         break;
       case 3:
         try { input_stream.backup(0);
            while (curChar <= 32 && (0x100003701L & (1L << curChar)) != 0L)
               curChar = input_stream.BeginToken();
         }
         catch (java.io.IOException e1) { continue EOFLoop; }
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_3();
         break;
       case 4:
         try { input_stream.backup(0);
            while (curChar <= 32 && (0x100003701L & (1L << curChar)) != 0L)
               curChar = input_stream.BeginToken();
         }
         catch (java.io.IOException e1) { continue EOFLoop; }
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_4();
         break;
       case 5:
         try { input_stream.backup(0);
            while (curChar <= 32 && (0x100003701L & (1L << curChar)) != 0L)
               curChar = input_stream.BeginToken();
         }
         catch (java.io.IOException e1) { continue EOFLoop; }
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_5();
         break;
       case 6:
         try { input_stream.backup(0);
            while (curChar <= 32 && (0x100003701L & (1L << curChar)) != 0L)
               curChar = input_stream.BeginToken();
         }
         catch (java.io.IOException e1) { continue EOFLoop; }
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_6();
         break;
       case 7:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_7();
         if (jjmatchedPos == 0 && jjmatchedKind > 12)
         {
            jjmatchedKind = 12;
         }
         break;
       case 8:
         jjmatchedKind = 0x7fffffff;
         jjmatchedPos = 0;
         curPos = jjMoveStringLiteralDfa0_8();
         if (jjmatchedPos == 0 && jjmatchedKind > 17)
         {
            jjmatchedKind = 17;
         }
         break;
     }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else if ((jjtoSkip[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
      if (jjnewLexState[jjmatchedKind] != -1)
        curLexState = jjnewLexState[jjmatchedKind];
        curPos = 0;
        jjmatchedKind = 0x7fffffff;
        try {
           curChar = input_stream.readChar();
           continue;
        }
        catch (java.io.IOException e1) { }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
   }
  }
}

private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
