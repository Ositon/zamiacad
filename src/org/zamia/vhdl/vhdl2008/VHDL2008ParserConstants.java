/* Generated By:JavaCC: Do not edit this line. VHDL2008ParserConstants.java */
/* 
 * Copyright 2007-2009 by the authors indicated in the @author tags. 
 * All rights reserved. 
 * 
 * See the LICENSE file for details.
 * 
 * 
 */

package org.zamia.vhdl.vhdl2008;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface VHDL2008ParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int SINGLE_LINE_COMMENT = 10;
  /** RegularExpression Id. */
  int IF = 11;
  /** RegularExpression Id. */
  int IS = 12;
  /** RegularExpression Id. */
  int IN = 13;
  /** RegularExpression Id. */
  int TO = 14;
  /** RegularExpression Id. */
  int OF = 15;
  /** RegularExpression Id. */
  int ON = 16;
  /** RegularExpression Id. */
  int OR = 17;
  /** RegularExpression Id. */
  int FOR = 18;
  /** RegularExpression Id. */
  int USE = 19;
  /** RegularExpression Id. */
  int SLA = 20;
  /** RegularExpression Id. */
  int SLL = 21;
  /** RegularExpression Id. */
  int SRA = 22;
  /** RegularExpression Id. */
  int SRL = 23;
  /** RegularExpression Id. */
  int ROL = 24;
  /** RegularExpression Id. */
  int ROR = 25;
  /** RegularExpression Id. */
  int MAP = 26;
  /** RegularExpression Id. */
  int BUS = 27;
  /** RegularExpression Id. */
  int ALL = 28;
  /** RegularExpression Id. */
  int AND = 29;
  /** RegularExpression Id. */
  int ABS = 30;
  /** RegularExpression Id. */
  int MOD = 31;
  /** RegularExpression Id. */
  int NEW = 32;
  /** RegularExpression Id. */
  int XOR = 33;
  /** RegularExpression Id. */
  int NOR = 34;
  /** RegularExpression Id. */
  int NOT = 35;
  /** RegularExpression Id. */
  int REM = 36;
  /** RegularExpression Id. */
  int OUT = 37;
  /** RegularExpression Id. */
  int NULL = 38;
  /** RegularExpression Id. */
  int XNOR = 39;
  /** RegularExpression Id. */
  int THEN = 40;
  /** RegularExpression Id. */
  int NAND = 41;
  /** RegularExpression Id. */
  int PURE = 42;
  /** RegularExpression Id. */
  int OPEN = 43;
  /** RegularExpression Id. */
  int END = 44;
  /** RegularExpression Id. */
  int WAIT = 45;
  /** RegularExpression Id. */
  int WHEN = 46;
  /** RegularExpression Id. */
  int CASE = 47;
  /** RegularExpression Id. */
  int WITH = 48;
  /** RegularExpression Id. */
  int FILE = 49;
  /** RegularExpression Id. */
  int EXIT = 50;
  /** RegularExpression Id. */
  int PORT = 51;
  /** RegularExpression Id. */
  int BODY = 52;
  /** RegularExpression Id. */
  int TYPE = 53;
  /** RegularExpression Id. */
  int LOOP = 54;
  /** RegularExpression Id. */
  int ELSE = 55;
  /** RegularExpression Id. */
  int BEGIN = 56;
  /** RegularExpression Id. */
  int WHILE = 57;
  /** RegularExpression Id. */
  int UNITS = 58;
  /** RegularExpression Id. */
  int AFTER = 59;
  /** RegularExpression Id. */
  int INOUT = 60;
  /** RegularExpression Id. */
  int LABEL = 61;
  /** RegularExpression Id. */
  int ARRAY = 62;
  /** RegularExpression Id. */
  int RANGE = 63;
  /** RegularExpression Id. */
  int ALIAS = 64;
  /** RegularExpression Id. */
  int GROUP = 65;
  /** RegularExpression Id. */
  int BLOCK = 66;
  /** RegularExpression Id. */
  int ELSIF = 67;
  /** RegularExpression Id. */
  int OTHERS = 68;
  /** RegularExpression Id. */
  int REJECT = 69;
  /** RegularExpression Id. */
  int BUFFER = 70;
  /** RegularExpression Id. */
  int RETURN = 71;
  /** RegularExpression Id. */
  int SELECT = 72;
  /** RegularExpression Id. */
  int ACCESS = 73;
  /** RegularExpression Id. */
  int ACROSS = 74;
  /** RegularExpression Id. */
  int SIGNAL = 75;
  /** RegularExpression Id. */
  int SHARED = 76;
  /** RegularExpression Id. */
  int DOWNTO = 77;
  /** RegularExpression Id. */
  int IMPURE = 78;
  /** RegularExpression Id. */
  int RECORD = 79;
  /** RegularExpression Id. */
  int ENTITY = 80;
  /** RegularExpression Id. */
  int LIBRARY = 81;
  /** RegularExpression Id. */
  int LINKAGE = 82;
  /** RegularExpression Id. */
  int LITERAL = 83;
  /** RegularExpression Id. */
  int PACKAGE = 84;
  /** RegularExpression Id. */
  int GENERIC = 85;
  /** RegularExpression Id. */
  int PROCESS = 86;
  /** RegularExpression Id. */
  int SUBTYPE = 87;
  /** RegularExpression Id. */
  int GUARDED = 88;
  /** RegularExpression Id. */
  int CONSTANT = 89;
  /** RegularExpression Id. */
  int REGISTER = 90;
  /** RegularExpression Id. */
  int SEVERITY = 91;
  /** RegularExpression Id. */
  int FUNCTION = 92;
  /** RegularExpression Id. */
  int GENERATE = 93;
  /** RegularExpression Id. */
  int INERTIAL = 94;
  /** RegularExpression Id. */
  int POSTPONED = 95;
  /** RegularExpression Id. */
  int ATTRIBUTE = 96;
  /** RegularExpression Id. */
  int COMPONENT = 97;
  /** RegularExpression Id. */
  int DISCONNECT = 98;
  /** RegularExpression Id. */
  int ARCHITECTURE = 99;
  /** RegularExpression Id. */
  int CONFIGURATION = 100;
  /** RegularExpression Id. */
  int PROCEDURAL = 101;
  /** RegularExpression Id. */
  int PROCEDURE = 102;
  /** RegularExpression Id. */
  int PROTECTED = 103;
  /** RegularExpression Id. */
  int QUANTITY = 104;
  /** RegularExpression Id. */
  int TRANSPORT = 105;
  /** RegularExpression Id. */
  int UNAFFECTED = 106;
  /** RegularExpression Id. */
  int VARIABLE = 107;
  /** RegularExpression Id. */
  int ASSERT = 108;
  /** RegularExpression Id. */
  int NEXT = 109;
  /** RegularExpression Id. */
  int REPORT = 110;
  /** RegularExpression Id. */
  int UNTIL = 111;
  /** RegularExpression Id. */
  int PSL_COVER = 112;
  /** RegularExpression Id. */
  int character_literal = 113;
  /** RegularExpression Id. */
  int digit = 114;
  /** RegularExpression Id. */
  int hex_digit = 115;
  /** RegularExpression Id. */
  int integer = 116;
  /** RegularExpression Id. */
  int base = 117;
  /** RegularExpression Id. */
  int based_integer = 118;
  /** RegularExpression Id. */
  int exponent = 119;
  /** RegularExpression Id. */
  int based_literal = 120;
  /** RegularExpression Id. */
  int decimal_literal = 121;
  /** RegularExpression Id. */
  int base_specifier = 122;
  /** RegularExpression Id. */
  int bit_value = 123;
  /** RegularExpression Id. */
  int bit_string_literal = 124;
  /** RegularExpression Id. */
  int letter = 125;
  /** RegularExpression Id. */
  int letter_or_digit = 126;
  /** RegularExpression Id. */
  int basic_identifier = 127;
  /** RegularExpression Id. */
  int special_character = 128;
  /** RegularExpression Id. */
  int format_effector = 129;
  /** RegularExpression Id. */
  int egraphic_character = 130;
  /** RegularExpression Id. */
  int graphic_character = 131;
  /** RegularExpression Id. */
  int extended_identifier = 132;
  /** RegularExpression Id. */
  int string_literal = 133;
  /** RegularExpression Id. */
  int EXP = 134;
  /** RegularExpression Id. */
  int MUL = 135;
  /** RegularExpression Id. */
  int DIV = 136;
  /** RegularExpression Id. */
  int ADD = 137;
  /** RegularExpression Id. */
  int SUB = 138;
  /** RegularExpression Id. */
  int CONCAT = 139;
  /** RegularExpression Id. */
  int EQ = 140;
  /** RegularExpression Id. */
  int NEQ = 141;
  /** RegularExpression Id. */
  int GE = 142;
  /** RegularExpression Id. */
  int LE = 143;
  /** RegularExpression Id. */
  int GT = 144;
  /** RegularExpression Id. */
  int LO = 145;
  /** RegularExpression Id. */
  int SEMICOLON = 146;
  /** RegularExpression Id. */
  int COMMA = 147;
  /** RegularExpression Id. */
  int COLON = 148;
  /** RegularExpression Id. */
  int BOX = 149;
  /** RegularExpression Id. */
  int TICK = 150;
  /** RegularExpression Id. */
  int LPAREN = 151;
  /** RegularExpression Id. */
  int RPAREN = 152;
  /** RegularExpression Id. */
  int LBRACKET = 153;
  /** RegularExpression Id. */
  int RBRACKET = 154;
  /** RegularExpression Id. */
  int ASSIGN = 155;
  /** RegularExpression Id. */
  int PERIOD = 156;
  /** RegularExpression Id. */
  int FOLLOWS = 157;
  /** RegularExpression Id. */
  int PIPE = 158;
  /** RegularExpression Id. */
  int LBRACE = 159;
  /** RegularExpression Id. */
  int RBRACE = 160;
  /** RegularExpression Id. */
  int psl_character_literal = 161;
  /** RegularExpression Id. */
  int PSL_NOT = 162;
  /** RegularExpression Id. */
  int PSL_AND = 163;
  /** RegularExpression Id. */
  int PSL_OR = 164;
  /** RegularExpression Id. */
  int PSL_TO = 165;
  /** RegularExpression Id. */
  int PSL_NAND = 166;
  /** RegularExpression Id. */
  int PSL_NOR = 167;
  /** RegularExpression Id. */
  int PSL_XOR = 168;
  /** RegularExpression Id. */
  int PSL_XNOR = 169;
  /** RegularExpression Id. */
  int PSL_SLL = 170;
  /** RegularExpression Id. */
  int PSL_SRL = 171;
  /** RegularExpression Id. */
  int PSL_SLA = 172;
  /** RegularExpression Id. */
  int PSL_SRA = 173;
  /** RegularExpression Id. */
  int PSL_ROL = 174;
  /** RegularExpression Id. */
  int PSL_ROR = 175;
  /** RegularExpression Id. */
  int PSL_NEW = 176;
  /** RegularExpression Id. */
  int PSL_MOD = 177;
  /** RegularExpression Id. */
  int PSL_REM = 178;
  /** RegularExpression Id. */
  int PSL_ABS = 179;
  /** RegularExpression Id. */
  int PSL_ALL = 180;
  /** RegularExpression Id. */
  int PSL_NULL = 181;
  /** RegularExpression Id. */
  int PSL_OTHERS = 182;
  /** RegularExpression Id. */
  int PSL_DOWNTO = 183;
  /** RegularExpression Id. */
  int PSL_RANGE = 184;
  /** RegularExpression Id. */
  int PSL_RETURN = 185;
  /** RegularExpression Id. */
  int PSL_OPEN = 186;
  /** RegularExpression Id. */
  int PSL_IN = 187;
  /** RegularExpression Id. */
  int PSL_A = 188;
  /** RegularExpression Id. */
  int PSL_ABORT = 189;
  /** RegularExpression Id. */
  int PSL_AF = 190;
  /** RegularExpression Id. */
  int PSL_AG = 191;
  /** RegularExpression Id. */
  int PSL_ALWAYS = 192;
  /** RegularExpression Id. */
  int PSL_ANDA = 193;
  /** RegularExpression Id. */
  int PSL_ASSERT = 194;
  /** RegularExpression Id. */
  int PSL_ASYNC_ABORT = 195;
  /** RegularExpression Id. */
  int PSL_BEFORE = 196;
  /** RegularExpression Id. */
  int PSL_BEFORE_ = 197;
  /** RegularExpression Id. */
  int PSL_BEFOREEXCL = 198;
  /** RegularExpression Id. */
  int PSL_BEFOREEXCL_ = 199;
  /** RegularExpression Id. */
  int PSL_BOOLEAN = 200;
  /** RegularExpression Id. */
  int PSL_CLOCK = 201;
  /** RegularExpression Id. */
  int PSL_CONST = 202;
  /** RegularExpression Id. */
  int PSL_COUNTONES = 203;
  /** RegularExpression Id. */
  int PSL_E = 204;
  /** RegularExpression Id. */
  int PSL_EF = 205;
  /** RegularExpression Id. */
  int PSL_EG = 206;
  /** RegularExpression Id. */
  int PSL_ENDED = 207;
  /** RegularExpression Id. */
  int PSL_EVENTUALLYEXCL = 208;
  /** RegularExpression Id. */
  int PSL_EX = 209;
  /** RegularExpression Id. */
  int PSL_F = 210;
  /** RegularExpression Id. */
  int PSL_FELL = 211;
  /** RegularExpression Id. */
  int PSL_FORALL = 212;
  /** RegularExpression Id. */
  int PSL_G = 213;
  /** RegularExpression Id. */
  int PSL_HDLTYPE = 214;
  /** RegularExpression Id. */
  int PSL_INF = 215;
  /** RegularExpression Id. */
  int PSL_INHERIT = 216;
  /** RegularExpression Id. */
  int PSL_ISB = 217;
  /** RegularExpression Id. */
  int PSL_ISUNKNOWN = 218;
  /** RegularExpression Id. */
  int PSL_NEVER = 219;
  /** RegularExpression Id. */
  int PSL_NEXTEXCL = 220;
  /** RegularExpression Id. */
  int PSL_NEXT_A = 221;
  /** RegularExpression Id. */
  int PSL_NEXT_AEXCL = 222;
  /** RegularExpression Id. */
  int PSL_NEXT_E = 223;
  /** RegularExpression Id. */
  int PSL_NEXT_EEXCL = 224;
  /** RegularExpression Id. */
  int PSL_NEXT_EVENT = 225;
  /** RegularExpression Id. */
  int PSL_NEXT_EVENTEXCL = 226;
  /** RegularExpression Id. */
  int PSL_NEXT_EVENT_A = 227;
  /** RegularExpression Id. */
  int PSL_NEXT_EVENT_AEXCL = 228;
  /** RegularExpression Id. */
  int PSL_NEXT_EVENT_E = 229;
  /** RegularExpression Id. */
  int PSL_NEXT_EVENT_EEXCL = 230;
  /** RegularExpression Id. */
  int PSL_NONDET = 231;
  /** RegularExpression Id. */
  int PSL_NONDET_VECTOR = 232;
  /** RegularExpression Id. */
  int PSL_NOTC = 233;
  /** RegularExpression Id. */
  int PSL_ONEHOT = 234;
  /** RegularExpression Id. */
  int PSL_ONEHOT0 = 235;
  /** RegularExpression Id. */
  int PSL_ORD = 236;
  /** RegularExpression Id. */
  int PSL_PREV = 237;
  /** RegularExpression Id. */
  int PSL_ROSE = 238;
  /** RegularExpression Id. */
  int PSL_STABLE = 239;
  /** RegularExpression Id. */
  int PSL_SYNC_ABORT = 240;
  /** RegularExpression Id. */
  int PSL_TOE = 241;
  /** RegularExpression Id. */
  int PSL_U = 242;
  /** RegularExpression Id. */
  int PSL_UNION = 243;
  /** RegularExpression Id. */
  int PSL_UNTIL_ = 244;
  /** RegularExpression Id. */
  int PSL_UNTILEXCL = 245;
  /** RegularExpression Id. */
  int PSL_UNTILEXCL_ = 246;
  /** RegularExpression Id. */
  int PSL_W = 247;
  /** RegularExpression Id. */
  int PSL_WITHIN = 248;
  /** RegularExpression Id. */
  int PSL_X = 249;
  /** RegularExpression Id. */
  int PSL_XEXCL = 250;
  /** RegularExpression Id. */
  int PSL_ASSUME = 251;
  /** RegularExpression Id. */
  int PSL_ASSUME_GUARANTEE = 252;
  /** RegularExpression Id. */
  int PSL_DEFAULT = 253;
  /** RegularExpression Id. */
  int PSL_FAIRNESS = 254;
  /** RegularExpression Id. */
  int PSL_NEXT = 255;
  /** RegularExpression Id. */
  int PSL_PROPERTY = 256;
  /** RegularExpression Id. */
  int PSL_REPORT = 257;
  /** RegularExpression Id. */
  int PSL_RESTRICT = 258;
  /** RegularExpression Id. */
  int PSL_RESTRICT_GUARANTEE = 259;
  /** RegularExpression Id. */
  int PSL_SEQUENCE = 260;
  /** RegularExpression Id. */
  int PSL_STRONG = 261;
  /** RegularExpression Id. */
  int PSL_VMODE = 262;
  /** RegularExpression Id. */
  int PSL_VPROP = 263;
  /** RegularExpression Id. */
  int PSL_VUNIT = 264;
  /** RegularExpression Id. */
  int PSL_UNTIL = 265;
  /** RegularExpression Id. */
  int psl_digit = 266;
  /** RegularExpression Id. */
  int psl_hex_digit = 267;
  /** RegularExpression Id. */
  int psl_integer = 268;
  /** RegularExpression Id. */
  int psl_base = 269;
  /** RegularExpression Id. */
  int psl_based_integer = 270;
  /** RegularExpression Id. */
  int psl_exponent = 271;
  /** RegularExpression Id. */
  int psl_based_literal = 272;
  /** RegularExpression Id. */
  int psl_decimal_literal = 273;
  /** RegularExpression Id. */
  int psl_base_specifier = 274;
  /** RegularExpression Id. */
  int psl_bit_value = 275;
  /** RegularExpression Id. */
  int psl_bit_string_literal = 276;
  /** RegularExpression Id. */
  int psl_letter = 277;
  /** RegularExpression Id. */
  int psl_letter_or_digit = 278;
  /** RegularExpression Id. */
  int psl_basic_identifier = 279;
  /** RegularExpression Id. */
  int psl_special_character = 280;
  /** RegularExpression Id. */
  int psl_format_effector = 281;
  /** RegularExpression Id. */
  int psl_egraphic_character = 282;
  /** RegularExpression Id. */
  int psl_graphic_character = 283;
  /** RegularExpression Id. */
  int psl_extended_identifier = 284;
  /** RegularExpression Id. */
  int psl_string_literal = 285;
  /** RegularExpression Id. */
  int PSL_EXP = 286;
  /** RegularExpression Id. */
  int PSL_MUL = 287;
  /** RegularExpression Id. */
  int PSL_DIV = 288;
  /** RegularExpression Id. */
  int PSL_ADD = 289;
  /** RegularExpression Id. */
  int PSL_SUB = 290;
  /** RegularExpression Id. */
  int PSL_CONCAT = 291;
  /** RegularExpression Id. */
  int PSL_EQ = 292;
  /** RegularExpression Id. */
  int PSL_NEQ = 293;
  /** RegularExpression Id. */
  int PSL_GE = 294;
  /** RegularExpression Id. */
  int PSL_LE = 295;
  /** RegularExpression Id. */
  int PSL_GT = 296;
  /** RegularExpression Id. */
  int PSL_LO = 297;
  /** RegularExpression Id. */
  int PSL_FOLLOWS = 298;
  /** RegularExpression Id. */
  int PSL_LBRACKET = 299;
  /** RegularExpression Id. */
  int PSL_RBRACKET = 300;
  /** RegularExpression Id. */
  int PSL_LPAREN = 301;
  /** RegularExpression Id. */
  int PSL_RPAREN = 302;
  /** RegularExpression Id. */
  int PSL_LBRACE = 303;
  /** RegularExpression Id. */
  int PSL_RBRACE = 304;
  /** RegularExpression Id. */
  int PSL_COMMA = 305;
  /** RegularExpression Id. */
  int PSL_SEMICOLON = 306;
  /** RegularExpression Id. */
  int PSL_COLON = 307;
  /** RegularExpression Id. */
  int PSL_DOTS = 308;
  /** RegularExpression Id. */
  int PSL_ASSIGN = 309;
  /** RegularExpression Id. */
  int PSL_SUFFOVERLAP = 310;
  /** RegularExpression Id. */
  int PSL_SUFFNONOVERLAP = 311;
  /** RegularExpression Id. */
  int PSL_IMPLIFF = 312;
  /** RegularExpression Id. */
  int PSL_IMPLIF = 313;
  /** RegularExpression Id. */
  int PSL_REPSTAR = 314;
  /** RegularExpression Id. */
  int PSL_REPPLUS = 315;
  /** RegularExpression Id. */
  int PSL_REPGOTO = 316;
  /** RegularExpression Id. */
  int PSL_REPNON = 317;
  /** RegularExpression Id. */
  int PSL_LAND = 318;
  /** RegularExpression Id. */
  int PSL_LOR = 319;
  /** RegularExpression Id. */
  int PSL_PIPE = 320;
  /** RegularExpression Id. */
  int PSL_EXCL = 321;
  /** RegularExpression Id. */
  int PSL_DOLLAR = 322;
  /** RegularExpression Id. */
  int PSL_AT = 323;
  /** RegularExpression Id. */
  int PSL_PERIOD = 324;
  /** RegularExpression Id. */
  int PSL_TICK = 325;

  /** Lexical state. */
  int REPORT_TICKS_MODE = 0;
  /** Lexical state. */
  int DEFAULT = 1;
  /** Lexical state. */
  int PSL_MODE = 2;
  /** Lexical state. */
  int PSL_MODE_TICKS = 3;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\n\"",
    "\"\\r\"",
    "\"\\t\"",
    "\"\\b\"",
    "\"\\u0000\"",
    "\"\\f\"",
    "\"\\u00a0\"",
    "\"\\ufffd\"",
    "<SINGLE_LINE_COMMENT>",
    "\"if\"",
    "\"is\"",
    "\"in\"",
    "\"to\"",
    "\"of\"",
    "\"on\"",
    "\"or\"",
    "\"for\"",
    "\"use\"",
    "\"sla\"",
    "\"sll\"",
    "\"sra\"",
    "\"srl\"",
    "\"rol\"",
    "\"ror\"",
    "\"map\"",
    "\"bus\"",
    "\"all\"",
    "\"and\"",
    "\"abs\"",
    "\"mod\"",
    "\"new\"",
    "\"xor\"",
    "\"nor\"",
    "\"not\"",
    "\"rem\"",
    "\"out\"",
    "\"null\"",
    "\"xnor\"",
    "\"then\"",
    "\"nand\"",
    "\"pure\"",
    "\"open\"",
    "\"end\"",
    "\"wait\"",
    "\"when\"",
    "\"case\"",
    "\"with\"",
    "\"file\"",
    "\"exit\"",
    "\"port\"",
    "\"body\"",
    "\"type\"",
    "\"loop\"",
    "\"else\"",
    "\"begin\"",
    "\"while\"",
    "\"units\"",
    "\"after\"",
    "\"inout\"",
    "\"label\"",
    "\"array\"",
    "\"range\"",
    "\"alias\"",
    "\"group\"",
    "\"block\"",
    "\"elsif\"",
    "\"others\"",
    "\"reject\"",
    "\"buffer\"",
    "\"return\"",
    "\"select\"",
    "\"access\"",
    "\"across\"",
    "\"signal\"",
    "\"shared\"",
    "\"downto\"",
    "\"impure\"",
    "\"record\"",
    "\"entity\"",
    "\"library\"",
    "\"linkage\"",
    "\"literal\"",
    "\"package\"",
    "\"generic\"",
    "\"process\"",
    "\"subtype\"",
    "\"guarded\"",
    "\"constant\"",
    "\"register\"",
    "\"severity\"",
    "\"function\"",
    "\"generate\"",
    "\"inertial\"",
    "\"postponed\"",
    "\"attribute\"",
    "\"component\"",
    "\"disconnect\"",
    "\"architecture\"",
    "\"configuration\"",
    "\"procedural\"",
    "\"procedure\"",
    "\"protected\"",
    "\"quantity\"",
    "\"transport\"",
    "\"unaffected\"",
    "\"variable\"",
    "\"assert\"",
    "\"next\"",
    "\"report\"",
    "\"until\"",
    "\"cover\"",
    "<character_literal>",
    "<digit>",
    "<hex_digit>",
    "<integer>",
    "<base>",
    "<based_integer>",
    "<exponent>",
    "<based_literal>",
    "<decimal_literal>",
    "<base_specifier>",
    "<bit_value>",
    "<bit_string_literal>",
    "<letter>",
    "<letter_or_digit>",
    "<basic_identifier>",
    "<special_character>",
    "<format_effector>",
    "<egraphic_character>",
    "<graphic_character>",
    "<extended_identifier>",
    "<string_literal>",
    "\"**\"",
    "\"*\"",
    "\"/\"",
    "\"+\"",
    "\"-\"",
    "\"&\"",
    "\"=\"",
    "\"/=\"",
    "\">=\"",
    "\"<=\"",
    "\">\"",
    "\"<\"",
    "\";\"",
    "\",\"",
    "\":\"",
    "\"<>\"",
    "\"\\\'\"",
    "\"(\"",
    "\")\"",
    "\"[\"",
    "\"]\"",
    "\":=\"",
    "\".\"",
    "\"=>\"",
    "\"|\"",
    "\"{\"",
    "\"}\"",
    "<psl_character_literal>",
    "\"not\"",
    "\"and\"",
    "\"or\"",
    "\"to\"",
    "\"nand\"",
    "\"nor\"",
    "\"xor\"",
    "\"xnor\"",
    "\"sll\"",
    "\"srl\"",
    "\"sla\"",
    "\"sra\"",
    "\"rol\"",
    "\"ror\"",
    "\"new\"",
    "\"mod\"",
    "\"rem\"",
    "\"abs\"",
    "\"all\"",
    "\"null\"",
    "\"others\"",
    "\"downto\"",
    "\"range\"",
    "\"return\"",
    "\"open\"",
    "\"in\"",
    "\"A\"",
    "\"abort\"",
    "\"AF\"",
    "\"AG\"",
    "\"always\"",
    "\"anda\"",
    "\"assert\"",
    "\"async_abort\"",
    "\"before\"",
    "\"before_\"",
    "\"before!\"",
    "\"before!_\"",
    "\"boolean\"",
    "\"clock\"",
    "\"const\"",
    "\"countones\"",
    "\"E\"",
    "\"EF\"",
    "\"EG\"",
    "\"ended\"",
    "\"eventually!\"",
    "\"EX\"",
    "\"F\"",
    "\"fell\"",
    "\"forall\"",
    "\"G\"",
    "\"hdltype\"",
    "\"inf\"",
    "\"inherit\"",
    "\"isb\"",
    "\"isunknown\"",
    "\"never\"",
    "\"next!\"",
    "\"next_a\"",
    "\"next_a!\"",
    "\"next_e\"",
    "\"next_e!\"",
    "\"next_event\"",
    "\"next_event!\"",
    "\"next_event_a\"",
    "\"next_event_a!\"",
    "\"next_event_e\"",
    "\"next_event_e!\"",
    "\"nondet\"",
    "\"nondet_vector\"",
    "\"notc\"",
    "\"onehot\"",
    "\"onehot0\"",
    "\"ord\"",
    "\"prev\"",
    "\"rose\"",
    "\"stable\"",
    "\"sync_abort\"",
    "\"toe\"",
    "\"U\"",
    "\"union\"",
    "\"until_\"",
    "\"until!\"",
    "\"until!_\"",
    "\"W\"",
    "\"within\"",
    "\"X\"",
    "\"X!\"",
    "\"assume\"",
    "\"assume_guarantee\"",
    "\"default\"",
    "\"fairness\"",
    "\"next\"",
    "\"property\"",
    "\"report\"",
    "\"restrict\"",
    "\"restrict_guarantee\"",
    "\"sequence\"",
    "\"strong\"",
    "\"vmode\"",
    "\"vprop\"",
    "\"VUNIT\"",
    "\"until\"",
    "<psl_digit>",
    "<psl_hex_digit>",
    "<psl_integer>",
    "<psl_base>",
    "<psl_based_integer>",
    "<psl_exponent>",
    "<psl_based_literal>",
    "<psl_decimal_literal>",
    "<psl_base_specifier>",
    "<psl_bit_value>",
    "<psl_bit_string_literal>",
    "<psl_letter>",
    "<psl_letter_or_digit>",
    "<psl_basic_identifier>",
    "<psl_special_character>",
    "<psl_format_effector>",
    "<psl_egraphic_character>",
    "<psl_graphic_character>",
    "<psl_extended_identifier>",
    "<psl_string_literal>",
    "\"**\"",
    "\"*\"",
    "\"/\"",
    "\"+\"",
    "\"-\"",
    "\"&\"",
    "\"=\"",
    "\"/=\"",
    "\">=\"",
    "\"<=\"",
    "\">\"",
    "\"<\"",
    "\"=>\"",
    "\"[\"",
    "\"]\"",
    "\"(\"",
    "\")\"",
    "\"{\"",
    "\"}\"",
    "\",\"",
    "\";\"",
    "\":\"",
    "\"..\"",
    "\":=\"",
    "\"|->\"",
    "\"|=>\"",
    "\"<->\"",
    "\"->\"",
    "\"[*\"",
    "\"[+]\"",
    "\"[->\"",
    "\"[=\"",
    "\"&&\"",
    "\"||\"",
    "\"|\"",
    "\"!\"",
    "\"$\"",
    "\"@\"",
    "\".\"",
    "\"\\\'\"",
  };

}
