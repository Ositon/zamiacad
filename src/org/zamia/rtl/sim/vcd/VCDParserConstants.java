/* Generated By:JavaCC: Do not edit this line. VCDParserConstants.java */
/* 
 * Copyright 2009 by the authors indicated in the @author tags. 
 * All rights reserved. 
 * 
 * See the LICENSE file for details.
 * 
 * 
 */

package org.zamia.rtl.sim.vcd;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface VCDParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int DECLARATION_COMMAND = 16;
  /** RegularExpression Id. */
  int END = 18;
  /** RegularExpression Id. */
  int DUMPALL = 19;
  /** RegularExpression Id. */
  int DUMPOFF = 20;
  /** RegularExpression Id. */
  int DUMPON = 21;
  /** RegularExpression Id. */
  int DUMPVARS = 22;
  /** RegularExpression Id. */
  int SCOPE = 23;
  /** RegularExpression Id. */
  int UPSCOPE = 24;
  /** RegularExpression Id. */
  int VAR = 25;
  /** RegularExpression Id. */
  int TIMESCALE = 26;
  /** RegularExpression Id. */
  int digit = 27;
  /** RegularExpression Id. */
  int DECIMAL_NUMBER = 28;
  /** RegularExpression Id. */
  int SIMULATION_TIME = 29;
  /** RegularExpression Id. */
  int VALUE = 30;
  /** RegularExpression Id. */
  int BINARY_NUMBER = 31;
  /** RegularExpression Id. */
  int exponent = 32;
  /** RegularExpression Id. */
  int REAL_NUMBER = 33;
  /** RegularExpression Id. */
  int SCALAR_VALUE_CHANGE = 34;
  /** RegularExpression Id. */
  int IDENTIFIER_CHARACTER = 35;
  /** RegularExpression Id. */
  int IDENTIFIER_CODE = 36;
  /** RegularExpression Id. */
  int BEGIN = 37;
  /** RegularExpression Id. */
  int FORK = 38;
  /** RegularExpression Id. */
  int FUNCTION = 39;
  /** RegularExpression Id. */
  int MODULE = 40;
  /** RegularExpression Id. */
  int TASK = 41;
  /** RegularExpression Id. */
  int EVENT = 42;
  /** RegularExpression Id. */
  int INTEGER = 43;
  /** RegularExpression Id. */
  int PARAMETER = 44;
  /** RegularExpression Id. */
  int REAL = 45;
  /** RegularExpression Id. */
  int REALTIME = 46;
  /** RegularExpression Id. */
  int REG = 47;
  /** RegularExpression Id. */
  int SUPPLY0 = 48;
  /** RegularExpression Id. */
  int SUPPLY1 = 49;
  /** RegularExpression Id. */
  int TIME = 50;
  /** RegularExpression Id. */
  int TRI = 51;
  /** RegularExpression Id. */
  int TRIAND = 52;
  /** RegularExpression Id. */
  int TRIOR = 53;
  /** RegularExpression Id. */
  int TRIREG = 54;
  /** RegularExpression Id. */
  int TRI0 = 55;
  /** RegularExpression Id. */
  int TRI1 = 56;
  /** RegularExpression Id. */
  int WAND = 57;
  /** RegularExpression Id. */
  int WIRE = 58;
  /** RegularExpression Id. */
  int WOR = 59;
  /** RegularExpression Id. */
  int VAR_END = 60;
  /** RegularExpression Id. */
  int VAR_DIGIT = 61;
  /** RegularExpression Id. */
  int VAR_DECIMAL_NUMBER = 62;
  /** RegularExpression Id. */
  int VAR_LETTER = 63;
  /** RegularExpression Id. */
  int VAR_LETTER_OR_DIGIT = 64;
  /** RegularExpression Id. */
  int VAR_ID = 65;
  /** RegularExpression Id. */
  int LBRACKET = 66;
  /** RegularExpression Id. */
  int RBRACKET = 67;
  /** RegularExpression Id. */
  int COLON = 68;
  /** RegularExpression Id. */
  int VARB_DIGIT = 69;
  /** RegularExpression Id. */
  int VARB_DECIMAL_NUMBER = 70;
  /** RegularExpression Id. */
  int VAR_IDENTIFIER_CHARACTER = 71;
  /** RegularExpression Id. */
  int VAR_IDENTIFIER_CODE = 72;
  /** RegularExpression Id. */
  int TS_DIGIT = 73;
  /** RegularExpression Id. */
  int TS_DECIMAL_NUMBER = 74;
  /** RegularExpression Id. */
  int SECOND = 75;
  /** RegularExpression Id. */
  int MSECOND = 76;
  /** RegularExpression Id. */
  int USECOND = 77;
  /** RegularExpression Id. */
  int NSECOND = 78;
  /** RegularExpression Id. */
  int PSECOND = 79;
  /** RegularExpression Id. */
  int FSECOND = 80;

  /** Lexical state. */
  int TS_MODE = 0;
  /** Lexical state. */
  int VAR_BRACKET_MODE = 1;
  /** Lexical state. */
  int VAR_MODE = 2;
  /** Lexical state. */
  int VAR_ID_MODE = 3;
  /** Lexical state. */
  int SCOPE_MODE = 4;
  /** Lexical state. */
  int ID_MODE = 5;
  /** Lexical state. */
  int DEFAULT = 6;
  /** Lexical state. */
  int COMMENT = 7;
  /** Lexical state. */
  int DECLARATION = 8;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\n\"",
    "\"\\r\"",
    "\"\\t\"",
    "\"\\b\"",
    "\"\\u0000\"",
    "\"\\f\"",
    "\"\\u00a0\"",
    "\"\\ufffd\"",
    "\"$comment\"",
    "\"$end\"",
    "<token of kind 12>",
    "\"$date\"",
    "\"$enddefinitions\"",
    "\"$version\"",
    "\"$end\"",
    "<token of kind 17>",
    "\"$end\"",
    "\"$dumpall\"",
    "\"$dumpoff\"",
    "\"$dumpon\"",
    "\"$dumpvars\"",
    "\"$scope\"",
    "\"$upscope\"",
    "\"$var\"",
    "\"$timescale\"",
    "<digit>",
    "<DECIMAL_NUMBER>",
    "<SIMULATION_TIME>",
    "<VALUE>",
    "<BINARY_NUMBER>",
    "<exponent>",
    "<REAL_NUMBER>",
    "<SCALAR_VALUE_CHANGE>",
    "<IDENTIFIER_CHARACTER>",
    "<IDENTIFIER_CODE>",
    "\"begin\"",
    "\"fork\"",
    "\"function\"",
    "\"module\"",
    "\"task\"",
    "\"event\"",
    "\"integer\"",
    "\"parameter\"",
    "\"real\"",
    "\"realtime\"",
    "\"reg\"",
    "\"supply0\"",
    "\"supply1\"",
    "\"time\"",
    "\"tri\"",
    "\"triand\"",
    "\"trior\"",
    "\"trireg\"",
    "\"tri0\"",
    "\"tri1\"",
    "\"wand\"",
    "\"wire\"",
    "\"wor\"",
    "\"$end\"",
    "<VAR_DIGIT>",
    "<VAR_DECIMAL_NUMBER>",
    "<VAR_LETTER>",
    "<VAR_LETTER_OR_DIGIT>",
    "<VAR_ID>",
    "\"[\"",
    "\"]\"",
    "\":\"",
    "<VARB_DIGIT>",
    "<VARB_DECIMAL_NUMBER>",
    "<VAR_IDENTIFIER_CHARACTER>",
    "<VAR_IDENTIFIER_CODE>",
    "<TS_DIGIT>",
    "<TS_DECIMAL_NUMBER>",
    "\"s\"",
    "\"ms\"",
    "\"us\"",
    "\"ns\"",
    "\"ps\"",
    "\"fs\"",
  };

}
