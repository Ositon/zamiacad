/* Generated By:JavaCC: Do not edit this line. VCDParser.java */
/* 
 * Copyright 2009 by the authors indicated in the @author tags. 
 * All rights reserved. 
 * 
 * See the LICENSE file for details.
 * 
 * 
 */

package org.zamia.rtl.sim.vcd;

import org.zamia.*;
import java.util.*;
import java.io.Reader;
import java.io.IOException;
import java.io.StringReader;
import org.zamia.rtl.sim.*;
import org.zamia.zil.*;
import org.zamia.util.*;

/**
 * @author Guenter Bartsch
 */

@SuppressWarnings("all")
public class VCDParser implements VCDParserConstants {

        public final static boolean dump = false;
        private SourceFile sf;
        private String lib;
        public final static ZamiaLogger logger = ZamiaLogger.getInstance();
        public final static ExceptionLogger el = ExceptionLogger.getInstance();
        private SimpleCharStream stream;

        private PathName fCurPath;
        private VCDData fData;

        private long fTimeScale=1, fTimeDiv=1;
        private long fCurTime=0;

        public VCDParser() {
                this (new SimpleCharStream(new StringReader("")));
        }

    private long getLocation(Token token_) {

        return token_ == null ? 0 :  ((long) token_.beginColumn) << 32 | (long) token_.beginLine ;
    }

    private long getLocation () {
        Token t = getToken(0);
        if (t.next != null)
                t = t.next;
        return getLocation (t);
    }


    public VCDData parse(Reader reader_, SourceFile sf_) throws IOException, ZamiaException {

                try {
                        logger.debug("VCD: parsing %s", sf_);

                stream = new SimpleCharStream(reader_);
                sf = sf_;

                fCurPath = new PathName(".");

            fData = new VCDData();

            ReInit (stream);
            value_change_dump_definitions ();

                } catch (ParseException e) {
          throw new ZamiaException(e.getMessage(), new SourceLocation(sf, getLocation(e.currentToken.next)));
        } catch (TokenMgrError e) {
          throw new ZamiaException(e.getMessage(), new SourceLocation(sf_,e.line,e.col));
                }

                return fData;
    }

  final public void value_change_dump_definitions() throws ParseException, ZamiaException {
                if (dump) logger.debug ("VCD: Compiling %s", sf.toString());
    label_1:
    while (true) {
      switch (jj_nt.kind) {
      case DECLARATION_COMMAND:
      case SCOPE:
      case UPSCOPE:
      case VAR:
      case TIMESCALE:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      switch (jj_nt.kind) {
      case DECLARATION_COMMAND:
        jj_consume_token(DECLARATION_COMMAND);
        break;
      case SCOPE:
        vcd_declaration_scope();
        break;
      case UPSCOPE:
        vcd_declaration_upscope();
        break;
      case VAR:
        vcd_declaration_vars();
        break;
      case TIMESCALE:
        vcd_declaration_timescale();
        break;
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    label_2:
    while (true) {
      switch (jj_nt.kind) {
      case DUMPALL:
      case DUMPOFF:
      case DUMPON:
      case DUMPVARS:
      case SIMULATION_TIME:
      case BINARY_NUMBER:
      case REAL_NUMBER:
      case SCALAR_VALUE_CHANGE:
        ;
        break;
      default:
        jj_la1[2] = jj_gen;
        break label_2;
      }
      simulation_command();
    }
    jj_consume_token(0);
  }

  final public void vcd_declaration_scope() throws ParseException {
        Token t;
    jj_consume_token(SCOPE);
    scope_type();
    t = jj_consume_token(IDENTIFIER_CODE);
    jj_consume_token(END);
                logger.info("VCD: vcd_declaration_scope: %s", t.image);
                fCurPath = fCurPath.append(t.image);
                logger.info("VCD: current scope is "+fCurPath);
  }

  final public void scope_type() throws ParseException {
    switch (jj_nt.kind) {
    case BEGIN:
      jj_consume_token(BEGIN);
      break;
    case FORK:
      jj_consume_token(FORK);
      break;
    case FUNCTION:
      jj_consume_token(FUNCTION);
      break;
    case MODULE:
      jj_consume_token(MODULE);
      break;
    case TASK:
      jj_consume_token(TASK);
      break;
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void vcd_declaration_upscope() throws ParseException {
        Token t;
    jj_consume_token(UPSCOPE);
    jj_consume_token(END);
                logger.info("VCD: vcd_declaration_upscope");
                fCurPath = fCurPath.getParent();
  }

  final public void vcd_declaration_vars() throws ParseException {
        Token tID, tWidth;
        int width;
        SignalInfo si = new SignalInfo();
    jj_consume_token(VAR);
    var_type();
    tWidth = jj_consume_token(VAR_DECIMAL_NUMBER);
    tID = jj_consume_token(VAR_IDENTIFIER_CODE);
    reference(si);
    jj_consume_token(VAR_END);
                si.setWidth(Integer.parseInt(tWidth.image));
                si.guessType();
                logger.info ("VCD: variable declaration: %s => %s, type is %s", si, tID.image, si.getType());
                fData.newSignal(tID.image, si);
  }

  final public void var_type() throws ParseException {
    switch (jj_nt.kind) {
    case EVENT:
      jj_consume_token(EVENT);
      break;
    case INTEGER:
      jj_consume_token(INTEGER);
      break;
    case PARAMETER:
      jj_consume_token(PARAMETER);
      break;
    case REAL:
      jj_consume_token(REAL);
      break;
    case REALTIME:
      jj_consume_token(REALTIME);
      break;
    case REG:
      jj_consume_token(REG);
      break;
    case SUPPLY0:
      jj_consume_token(SUPPLY0);
      break;
    case SUPPLY1:
      jj_consume_token(SUPPLY1);
      break;
    case TIME:
      jj_consume_token(TIME);
      break;
    case TRI:
      jj_consume_token(TRI);
      break;
    case TRIAND:
      jj_consume_token(TRIAND);
      break;
    case TRIOR:
      jj_consume_token(TRIOR);
      break;
    case TRIREG:
      jj_consume_token(TRIREG);
      break;
    case TRI0:
      jj_consume_token(TRI0);
      break;
    case TRI1:
      jj_consume_token(TRI1);
      break;
    case WAND:
      jj_consume_token(WAND);
      break;
    case WIRE:
      jj_consume_token(WIRE);
      break;
    case WOR:
      jj_consume_token(WOR);
      break;
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void reference(SignalInfo aSI) throws ParseException {
        Token t, tIdx1 = null, tIdx2 = null;
    t = jj_consume_token(VAR_ID);
    switch (jj_nt.kind) {
    case LBRACKET:
      jj_consume_token(LBRACKET);
      tIdx1 = jj_consume_token(VARB_DECIMAL_NUMBER);
      switch (jj_nt.kind) {
      case COLON:
        jj_consume_token(COLON);
        tIdx2 = jj_consume_token(VARB_DECIMAL_NUMBER);
        break;
      default:
        jj_la1[5] = jj_gen;
        ;
      }
      jj_consume_token(RBRACKET);
      break;
    default:
      jj_la1[6] = jj_gen;
      ;
    }
                aSI.setPath(fCurPath.append(t.image));
                if (tIdx1 != null) {
                        aSI.setIdx1(Integer.parseInt(tIdx1.image));
                }
                if (tIdx2 != null) {
                        aSI.setIdx2(Integer.parseInt(tIdx2.image));
                }
  }

  final public void vcd_declaration_timescale() throws ParseException {
        Token t;
        long f;
    jj_consume_token(TIMESCALE);
    t = jj_consume_token(TS_DECIMAL_NUMBER);
    time_unit();
    jj_consume_token(END);
                f = Long.parseLong(t.image);
                fTimeScale *= f;

                // 10ps
                fData.setTimeScale(10 * fTimeDiv / fTimeScale);

                logger.info("VCD: TimeScale is %d, TimeDiv is %d", fTimeScale, fTimeDiv);
  }

  final public void time_unit() throws ParseException {
    switch (jj_nt.kind) {
    case SECOND:
      jj_consume_token(SECOND);
                    fTimeScale = 1000000000000l;
      break;
    case MSECOND:
      jj_consume_token(MSECOND);
                    fTimeScale = 1000000000l;
      break;
    case USECOND:
      jj_consume_token(USECOND);
                    fTimeScale = 1000000l;
      break;
    case NSECOND:
      jj_consume_token(NSECOND);
                    fTimeScale = 1000l;
      break;
    case PSECOND:
      jj_consume_token(PSECOND);
                    fTimeScale = 1l;
      break;
    case FSECOND:
      jj_consume_token(FSECOND);
                    fTimeScale = 1l;fTimeDiv = 1000;
      break;
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void simulation_command() throws ParseException, ZamiaException {
        Token t;
    switch (jj_nt.kind) {
    case DUMPALL:
    case DUMPOFF:
    case DUMPON:
    case DUMPVARS:
      simulation_keyword();
      label_3:
      while (true) {
        switch (jj_nt.kind) {
        case BINARY_NUMBER:
        case REAL_NUMBER:
        case SCALAR_VALUE_CHANGE:
          ;
          break;
        default:
          jj_la1[8] = jj_gen;
          break label_3;
        }
        value_change();
      }
      jj_consume_token(END);
      break;
    case SIMULATION_TIME:
      t = jj_consume_token(SIMULATION_TIME);
                        fCurTime = Long.parseLong(t.image.substring(1)) / fTimeDiv * fTimeScale;

                        logger.info ("VCD: Simulation time %d ps", fCurTime);
      break;
    case BINARY_NUMBER:
    case REAL_NUMBER:
    case SCALAR_VALUE_CHANGE:
      value_change();
      break;
    default:
      jj_la1[9] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void simulation_keyword() throws ParseException {
    switch (jj_nt.kind) {
    case DUMPALL:
      jj_consume_token(DUMPALL);
      break;
    case DUMPOFF:
      jj_consume_token(DUMPOFF);
      break;
    case DUMPON:
      jj_consume_token(DUMPON);
      break;
    case DUMPVARS:
      jj_consume_token(DUMPVARS);
      break;
    default:
      jj_la1[10] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void value_change() throws ParseException, ZamiaException {
        Token t;
        char vc;
        String ic;
        SignalInfo si;
        ZILValue value;
    switch (jj_nt.kind) {
    case SCALAR_VALUE_CHANGE:
      t = jj_consume_token(SCALAR_VALUE_CHANGE);
                vc = t.image.charAt(0);
                ic = t.image.substring(1);

                si = fData.getSignalInfo(ic);

                logger.info("VCD: scalar_value_change %s => %c at %d ps", si.getPath(), vc, fCurTime);

                value = ZILValue.getBit(vc, null);

                fData.add(fCurTime, ic, value);
      break;
    case BINARY_NUMBER:
    case REAL_NUMBER:
      vector_value_change();
      break;
    default:
      jj_la1[11] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void vector_value_change() throws ParseException, ZamiaException {
        Token tIC, tV;
        String vs;
        SignalInfo si;
        int w,l;
        char expansionC;
        StringBuilder buf;
        ZILValue value;
    switch (jj_nt.kind) {
    case BINARY_NUMBER:
      tV = jj_consume_token(BINARY_NUMBER);
      tIC = jj_consume_token(IDENTIFIER_CODE);
                        si = fData.getSignalInfo(tIC.image);
                        vs = tV.image.substring(1);

                        w = si.getWidth();
                        l = vs.length();

                        if (l<w) {
                                switch (vs.charAt(0)) {
                                        case '1': expansionC='0'; break;
                                        case '0': expansionC='0'; break;
                                        case 'Z': expansionC='Z'; break;
                                        case 'X': expansionC='X'; break;
                                        default: expansionC='0'; logger.error("VCD: unknown value : %c", vs.charAt(0));
                                }

                                buf = new StringBuilder();
                                for (int i = l; i<w; i++) {
                                        buf.append(expansionC);
                                }
                                buf.append(vs);
                                vs = buf.toString();
                        }

                        logger.info("VCD: vector_value_change binary %s => %s at %d ps", si.getPath(), vs, fCurTime);

                        if (w>1) {

                                ZILTypeArray type = (ZILTypeArray) si.getType();

                                value = new ZILValue(type, null, null);

                                int offset = si.getMinIdx();

                                for (int i = 0; i<w; i++) {
                                        value.setValue(offset, ZILValue.getBit(vs.charAt(w-i-1),null));
                                        offset++;
                                }

                        } else {
                                value = ZILValue.getBit(vs.charAt(0), null);
                        }

                        fData.add(fCurTime, tIC.image, value);
      break;
    case REAL_NUMBER:
      tV = jj_consume_token(REAL_NUMBER);
      tIC = jj_consume_token(IDENTIFIER_CODE);
                        logger.error("VCD: vector_value_change real %s => %s", tIC, tV);
                        // FIXME: implement
                        {if (true) throw new ZamiaException ("Sorry, real values in VCD files are not supported yet.");}
      break;
    default:
      jj_la1[12] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  /** Generated Token Manager. */
  public VCDParserTokenManager token_source;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_gen;
  final private int[] jj_la1 = new int[13];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x7810000,0x7810000,0xa0780000,0x0,0x0,0x0,0x0,0x0,0x80000000,0xa0780000,0x780000,0x80000000,0x80000000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x6,0x3e0,0xffffc00,0x0,0x0,0x0,0x6,0x6,0x0,0x6,0x2,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x0,0x0,0x0,0x0,0x0,0x10,0x4,0x1f800,0x0,0x0,0x0,0x0,0x0,};
   }

  /** Constructor with user supplied CharStream. */
  public VCDParser(CharStream stream) {
    token_source = new VCDParserTokenManager(stream);
    token = new Token();
    token.next = jj_nt = token_source.getNextToken();
    jj_gen = 0;
    for (int i = 0; i < 13; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(CharStream stream) {
    token_source.ReInit(stream);
    token = new Token();
    token.next = jj_nt = token_source.getNextToken();
    jj_gen = 0;
    for (int i = 0; i < 13; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public VCDParser(VCDParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    token.next = jj_nt = token_source.getNextToken();
    jj_gen = 0;
    for (int i = 0; i < 13; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(VCDParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    token.next = jj_nt = token_source.getNextToken();
    jj_gen = 0;
    for (int i = 0; i < 13; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken = token;
    if ((token = jj_nt).next != null) jj_nt = jj_nt.next;
    else jj_nt = jj_nt.next = token_source.getNextToken();
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    jj_nt = token;
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if ((token = jj_nt).next != null) jj_nt = jj_nt.next;
    else jj_nt = jj_nt.next = token_source.getNextToken();
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[81];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 13; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 81; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
