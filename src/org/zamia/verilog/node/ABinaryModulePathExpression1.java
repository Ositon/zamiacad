/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.zamia.verilog.node;

import org.zamia.verilog.analysis.*;

@SuppressWarnings("nls")
public final class ABinaryModulePathExpression1 extends PModulePathExpression1
{
    private PModulePathExpression1 _e1_;
    private PBinaryModulePathOperator _binaryModulePathOperator_;
    private PModulePathUnaryExpression _e2_;

    public ABinaryModulePathExpression1()
    {
        // Constructor
    }

    public ABinaryModulePathExpression1(
        @SuppressWarnings("hiding") PModulePathExpression1 _e1_,
        @SuppressWarnings("hiding") PBinaryModulePathOperator _binaryModulePathOperator_,
        @SuppressWarnings("hiding") PModulePathUnaryExpression _e2_)
    {
        // Constructor
        setE1(_e1_);

        setBinaryModulePathOperator(_binaryModulePathOperator_);

        setE2(_e2_);

    }

    @Override
    public Object clone()
    {
        return new ABinaryModulePathExpression1(
            cloneNode(this._e1_),
            cloneNode(this._binaryModulePathOperator_),
            cloneNode(this._e2_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseABinaryModulePathExpression1(this);
    }

    public PModulePathExpression1 getE1()
    {
        return this._e1_;
    }

    public void setE1(PModulePathExpression1 node)
    {
        if(this._e1_ != null)
        {
            this._e1_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._e1_ = node;
    }

    public PBinaryModulePathOperator getBinaryModulePathOperator()
    {
        return this._binaryModulePathOperator_;
    }

    public void setBinaryModulePathOperator(PBinaryModulePathOperator node)
    {
        if(this._binaryModulePathOperator_ != null)
        {
            this._binaryModulePathOperator_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._binaryModulePathOperator_ = node;
    }

    public PModulePathUnaryExpression getE2()
    {
        return this._e2_;
    }

    public void setE2(PModulePathUnaryExpression node)
    {
        if(this._e2_ != null)
        {
            this._e2_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._e2_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._e1_)
            + toString(this._binaryModulePathOperator_)
            + toString(this._e2_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._e1_ == child)
        {
            this._e1_ = null;
            return;
        }

        if(this._binaryModulePathOperator_ == child)
        {
            this._binaryModulePathOperator_ = null;
            return;
        }

        if(this._e2_ == child)
        {
            this._e2_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._e1_ == oldChild)
        {
            setE1((PModulePathExpression1) newChild);
            return;
        }

        if(this._binaryModulePathOperator_ == oldChild)
        {
            setBinaryModulePathOperator((PBinaryModulePathOperator) newChild);
            return;
        }

        if(this._e2_ == oldChild)
        {
            setE2((PModulePathUnaryExpression) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
