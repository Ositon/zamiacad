/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.zamia.verilog.node;

import org.zamia.verilog.analysis.*;

@SuppressWarnings("nls")
public final class AP0LoopStatementNsf extends PLoopStatementNsf
{
    private TKForever _kForever_;
    private PStatementNoShortIf _statementNoShortIf_;

    public AP0LoopStatementNsf()
    {
        // Constructor
    }

    public AP0LoopStatementNsf(
        @SuppressWarnings("hiding") TKForever _kForever_,
        @SuppressWarnings("hiding") PStatementNoShortIf _statementNoShortIf_)
    {
        // Constructor
        setKForever(_kForever_);

        setStatementNoShortIf(_statementNoShortIf_);

    }

    @Override
    public Object clone()
    {
        return new AP0LoopStatementNsf(
            cloneNode(this._kForever_),
            cloneNode(this._statementNoShortIf_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAP0LoopStatementNsf(this);
    }

    public TKForever getKForever()
    {
        return this._kForever_;
    }

    public void setKForever(TKForever node)
    {
        if(this._kForever_ != null)
        {
            this._kForever_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._kForever_ = node;
    }

    public PStatementNoShortIf getStatementNoShortIf()
    {
        return this._statementNoShortIf_;
    }

    public void setStatementNoShortIf(PStatementNoShortIf node)
    {
        if(this._statementNoShortIf_ != null)
        {
            this._statementNoShortIf_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._statementNoShortIf_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._kForever_)
            + toString(this._statementNoShortIf_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._kForever_ == child)
        {
            this._kForever_ = null;
            return;
        }

        if(this._statementNoShortIf_ == child)
        {
            this._statementNoShortIf_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._kForever_ == oldChild)
        {
            setKForever((TKForever) newChild);
            return;
        }

        if(this._statementNoShortIf_ == oldChild)
        {
            setStatementNoShortIf((PStatementNoShortIf) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
