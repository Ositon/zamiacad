/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.zamia.verilog.node;

import org.zamia.verilog.analysis.*;

@SuppressWarnings("nls")
public final class AP3EventControl extends PEventControl
{
    private TTAt _tAt_;
    private TTAny _tAny_;

    public AP3EventControl()
    {
        // Constructor
    }

    public AP3EventControl(
        @SuppressWarnings("hiding") TTAt _tAt_,
        @SuppressWarnings("hiding") TTAny _tAny_)
    {
        // Constructor
        setTAt(_tAt_);

        setTAny(_tAny_);

    }

    @Override
    public Object clone()
    {
        return new AP3EventControl(
            cloneNode(this._tAt_),
            cloneNode(this._tAny_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAP3EventControl(this);
    }

    public TTAt getTAt()
    {
        return this._tAt_;
    }

    public void setTAt(TTAt node)
    {
        if(this._tAt_ != null)
        {
            this._tAt_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._tAt_ = node;
    }

    public TTAny getTAny()
    {
        return this._tAny_;
    }

    public void setTAny(TTAny node)
    {
        if(this._tAny_ != null)
        {
            this._tAny_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._tAny_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._tAt_)
            + toString(this._tAny_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._tAt_ == child)
        {
            this._tAt_ = null;
            return;
        }

        if(this._tAny_ == child)
        {
            this._tAny_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._tAt_ == oldChild)
        {
            setTAt((TTAt) newChild);
            return;
        }

        if(this._tAny_ == oldChild)
        {
            setTAny((TTAny) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
