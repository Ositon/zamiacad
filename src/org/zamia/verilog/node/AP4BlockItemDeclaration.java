/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.zamia.verilog.node;

import org.zamia.verilog.analysis.*;

@SuppressWarnings("nls")
public final class AP4BlockItemDeclaration extends PBlockItemDeclaration
{
    private TKRealtime _kRealtime_;
    private PListOfBlockRealIdentifiers _listOfBlockRealIdentifiers_;
    private TTSemicolon _tSemicolon_;

    public AP4BlockItemDeclaration()
    {
        // Constructor
    }

    public AP4BlockItemDeclaration(
        @SuppressWarnings("hiding") TKRealtime _kRealtime_,
        @SuppressWarnings("hiding") PListOfBlockRealIdentifiers _listOfBlockRealIdentifiers_,
        @SuppressWarnings("hiding") TTSemicolon _tSemicolon_)
    {
        // Constructor
        setKRealtime(_kRealtime_);

        setListOfBlockRealIdentifiers(_listOfBlockRealIdentifiers_);

        setTSemicolon(_tSemicolon_);

    }

    @Override
    public Object clone()
    {
        return new AP4BlockItemDeclaration(
            cloneNode(this._kRealtime_),
            cloneNode(this._listOfBlockRealIdentifiers_),
            cloneNode(this._tSemicolon_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAP4BlockItemDeclaration(this);
    }

    public TKRealtime getKRealtime()
    {
        return this._kRealtime_;
    }

    public void setKRealtime(TKRealtime node)
    {
        if(this._kRealtime_ != null)
        {
            this._kRealtime_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._kRealtime_ = node;
    }

    public PListOfBlockRealIdentifiers getListOfBlockRealIdentifiers()
    {
        return this._listOfBlockRealIdentifiers_;
    }

    public void setListOfBlockRealIdentifiers(PListOfBlockRealIdentifiers node)
    {
        if(this._listOfBlockRealIdentifiers_ != null)
        {
            this._listOfBlockRealIdentifiers_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._listOfBlockRealIdentifiers_ = node;
    }

    public TTSemicolon getTSemicolon()
    {
        return this._tSemicolon_;
    }

    public void setTSemicolon(TTSemicolon node)
    {
        if(this._tSemicolon_ != null)
        {
            this._tSemicolon_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._tSemicolon_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._kRealtime_)
            + toString(this._listOfBlockRealIdentifiers_)
            + toString(this._tSemicolon_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._kRealtime_ == child)
        {
            this._kRealtime_ = null;
            return;
        }

        if(this._listOfBlockRealIdentifiers_ == child)
        {
            this._listOfBlockRealIdentifiers_ = null;
            return;
        }

        if(this._tSemicolon_ == child)
        {
            this._tSemicolon_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._kRealtime_ == oldChild)
        {
            setKRealtime((TKRealtime) newChild);
            return;
        }

        if(this._listOfBlockRealIdentifiers_ == oldChild)
        {
            setListOfBlockRealIdentifiers((PListOfBlockRealIdentifiers) newChild);
            return;
        }

        if(this._tSemicolon_ == oldChild)
        {
            setTSemicolon((TTSemicolon) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
