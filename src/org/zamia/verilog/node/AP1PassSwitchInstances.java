/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.zamia.verilog.node;

import org.zamia.verilog.analysis.*;

@SuppressWarnings("nls")
public final class AP1PassSwitchInstances extends PPassSwitchInstances
{
    private PPassSwitchInstance _passSwitchInstance_;
    private TTComma _tComma_;
    private PPassSwitchInstances _passSwitchInstances_;

    public AP1PassSwitchInstances()
    {
        // Constructor
    }

    public AP1PassSwitchInstances(
        @SuppressWarnings("hiding") PPassSwitchInstance _passSwitchInstance_,
        @SuppressWarnings("hiding") TTComma _tComma_,
        @SuppressWarnings("hiding") PPassSwitchInstances _passSwitchInstances_)
    {
        // Constructor
        setPassSwitchInstance(_passSwitchInstance_);

        setTComma(_tComma_);

        setPassSwitchInstances(_passSwitchInstances_);

    }

    @Override
    public Object clone()
    {
        return new AP1PassSwitchInstances(
            cloneNode(this._passSwitchInstance_),
            cloneNode(this._tComma_),
            cloneNode(this._passSwitchInstances_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAP1PassSwitchInstances(this);
    }

    public PPassSwitchInstance getPassSwitchInstance()
    {
        return this._passSwitchInstance_;
    }

    public void setPassSwitchInstance(PPassSwitchInstance node)
    {
        if(this._passSwitchInstance_ != null)
        {
            this._passSwitchInstance_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._passSwitchInstance_ = node;
    }

    public TTComma getTComma()
    {
        return this._tComma_;
    }

    public void setTComma(TTComma node)
    {
        if(this._tComma_ != null)
        {
            this._tComma_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._tComma_ = node;
    }

    public PPassSwitchInstances getPassSwitchInstances()
    {
        return this._passSwitchInstances_;
    }

    public void setPassSwitchInstances(PPassSwitchInstances node)
    {
        if(this._passSwitchInstances_ != null)
        {
            this._passSwitchInstances_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._passSwitchInstances_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._passSwitchInstance_)
            + toString(this._tComma_)
            + toString(this._passSwitchInstances_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._passSwitchInstance_ == child)
        {
            this._passSwitchInstance_ = null;
            return;
        }

        if(this._tComma_ == child)
        {
            this._tComma_ = null;
            return;
        }

        if(this._passSwitchInstances_ == child)
        {
            this._passSwitchInstances_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._passSwitchInstance_ == oldChild)
        {
            setPassSwitchInstance((PPassSwitchInstance) newChild);
            return;
        }

        if(this._tComma_ == oldChild)
        {
            setTComma((TTComma) newChild);
            return;
        }

        if(this._passSwitchInstances_ == oldChild)
        {
            setPassSwitchInstances((PPassSwitchInstances) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
