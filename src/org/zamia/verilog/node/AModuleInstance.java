/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.zamia.verilog.node;

import org.zamia.verilog.analysis.*;

@SuppressWarnings("nls")
public final class AModuleInstance extends PModuleInstance
{
    private PNameOfModuleInstance _nameOfModuleInstance_;
    private TTLparen _tLparen_;
    private PPortConnections _portConnections_;
    private TTRparen _tRparen_;

    public AModuleInstance()
    {
        // Constructor
    }

    public AModuleInstance(
        @SuppressWarnings("hiding") PNameOfModuleInstance _nameOfModuleInstance_,
        @SuppressWarnings("hiding") TTLparen _tLparen_,
        @SuppressWarnings("hiding") PPortConnections _portConnections_,
        @SuppressWarnings("hiding") TTRparen _tRparen_)
    {
        // Constructor
        setNameOfModuleInstance(_nameOfModuleInstance_);

        setTLparen(_tLparen_);

        setPortConnections(_portConnections_);

        setTRparen(_tRparen_);

    }

    @Override
    public Object clone()
    {
        return new AModuleInstance(
            cloneNode(this._nameOfModuleInstance_),
            cloneNode(this._tLparen_),
            cloneNode(this._portConnections_),
            cloneNode(this._tRparen_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAModuleInstance(this);
    }

    public PNameOfModuleInstance getNameOfModuleInstance()
    {
        return this._nameOfModuleInstance_;
    }

    public void setNameOfModuleInstance(PNameOfModuleInstance node)
    {
        if(this._nameOfModuleInstance_ != null)
        {
            this._nameOfModuleInstance_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._nameOfModuleInstance_ = node;
    }

    public TTLparen getTLparen()
    {
        return this._tLparen_;
    }

    public void setTLparen(TTLparen node)
    {
        if(this._tLparen_ != null)
        {
            this._tLparen_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._tLparen_ = node;
    }

    public PPortConnections getPortConnections()
    {
        return this._portConnections_;
    }

    public void setPortConnections(PPortConnections node)
    {
        if(this._portConnections_ != null)
        {
            this._portConnections_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._portConnections_ = node;
    }

    public TTRparen getTRparen()
    {
        return this._tRparen_;
    }

    public void setTRparen(TTRparen node)
    {
        if(this._tRparen_ != null)
        {
            this._tRparen_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._tRparen_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._nameOfModuleInstance_)
            + toString(this._tLparen_)
            + toString(this._portConnections_)
            + toString(this._tRparen_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._nameOfModuleInstance_ == child)
        {
            this._nameOfModuleInstance_ = null;
            return;
        }

        if(this._tLparen_ == child)
        {
            this._tLparen_ = null;
            return;
        }

        if(this._portConnections_ == child)
        {
            this._portConnections_ = null;
            return;
        }

        if(this._tRparen_ == child)
        {
            this._tRparen_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._nameOfModuleInstance_ == oldChild)
        {
            setNameOfModuleInstance((PNameOfModuleInstance) newChild);
            return;
        }

        if(this._tLparen_ == oldChild)
        {
            setTLparen((TTLparen) newChild);
            return;
        }

        if(this._portConnections_ == oldChild)
        {
            setPortConnections((PPortConnections) newChild);
            return;
        }

        if(this._tRparen_ == oldChild)
        {
            setTRparen((TTRparen) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
