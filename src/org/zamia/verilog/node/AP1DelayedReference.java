/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.zamia.verilog.node;

import org.zamia.verilog.analysis.*;

@SuppressWarnings("nls")
public final class AP1DelayedReference extends PDelayedReference
{
    private PIdentifier _identifier_;
    private TTLbracket _tLbracket_;
    private PMintypmaxExpression _mintypmaxExpression_;
    private TTRbracket _tRbracket_;

    public AP1DelayedReference()
    {
        // Constructor
    }

    public AP1DelayedReference(
        @SuppressWarnings("hiding") PIdentifier _identifier_,
        @SuppressWarnings("hiding") TTLbracket _tLbracket_,
        @SuppressWarnings("hiding") PMintypmaxExpression _mintypmaxExpression_,
        @SuppressWarnings("hiding") TTRbracket _tRbracket_)
    {
        // Constructor
        setIdentifier(_identifier_);

        setTLbracket(_tLbracket_);

        setMintypmaxExpression(_mintypmaxExpression_);

        setTRbracket(_tRbracket_);

    }

    @Override
    public Object clone()
    {
        return new AP1DelayedReference(
            cloneNode(this._identifier_),
            cloneNode(this._tLbracket_),
            cloneNode(this._mintypmaxExpression_),
            cloneNode(this._tRbracket_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAP1DelayedReference(this);
    }

    public PIdentifier getIdentifier()
    {
        return this._identifier_;
    }

    public void setIdentifier(PIdentifier node)
    {
        if(this._identifier_ != null)
        {
            this._identifier_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._identifier_ = node;
    }

    public TTLbracket getTLbracket()
    {
        return this._tLbracket_;
    }

    public void setTLbracket(TTLbracket node)
    {
        if(this._tLbracket_ != null)
        {
            this._tLbracket_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._tLbracket_ = node;
    }

    public PMintypmaxExpression getMintypmaxExpression()
    {
        return this._mintypmaxExpression_;
    }

    public void setMintypmaxExpression(PMintypmaxExpression node)
    {
        if(this._mintypmaxExpression_ != null)
        {
            this._mintypmaxExpression_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._mintypmaxExpression_ = node;
    }

    public TTRbracket getTRbracket()
    {
        return this._tRbracket_;
    }

    public void setTRbracket(TTRbracket node)
    {
        if(this._tRbracket_ != null)
        {
            this._tRbracket_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._tRbracket_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._identifier_)
            + toString(this._tLbracket_)
            + toString(this._mintypmaxExpression_)
            + toString(this._tRbracket_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._identifier_ == child)
        {
            this._identifier_ = null;
            return;
        }

        if(this._tLbracket_ == child)
        {
            this._tLbracket_ = null;
            return;
        }

        if(this._mintypmaxExpression_ == child)
        {
            this._mintypmaxExpression_ = null;
            return;
        }

        if(this._tRbracket_ == child)
        {
            this._tRbracket_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._identifier_ == oldChild)
        {
            setIdentifier((PIdentifier) newChild);
            return;
        }

        if(this._tLbracket_ == oldChild)
        {
            setTLbracket((TTLbracket) newChild);
            return;
        }

        if(this._mintypmaxExpression_ == oldChild)
        {
            setMintypmaxExpression((PMintypmaxExpression) newChild);
            return;
        }

        if(this._tRbracket_ == oldChild)
        {
            setTRbracket((TTRbracket) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
