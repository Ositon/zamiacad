/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.zamia.verilog.node;

import org.zamia.verilog.analysis.*;

@SuppressWarnings("nls")
public final class APassGateInstantiation extends PGateInstantiation
{
    private PPassSwitchtype _passSwitchtype_;
    private PPassSwitchInstances _passSwitchInstances_;
    private TTSemicolon _tSemicolon_;

    public APassGateInstantiation()
    {
        // Constructor
    }

    public APassGateInstantiation(
        @SuppressWarnings("hiding") PPassSwitchtype _passSwitchtype_,
        @SuppressWarnings("hiding") PPassSwitchInstances _passSwitchInstances_,
        @SuppressWarnings("hiding") TTSemicolon _tSemicolon_)
    {
        // Constructor
        setPassSwitchtype(_passSwitchtype_);

        setPassSwitchInstances(_passSwitchInstances_);

        setTSemicolon(_tSemicolon_);

    }

    @Override
    public Object clone()
    {
        return new APassGateInstantiation(
            cloneNode(this._passSwitchtype_),
            cloneNode(this._passSwitchInstances_),
            cloneNode(this._tSemicolon_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAPassGateInstantiation(this);
    }

    public PPassSwitchtype getPassSwitchtype()
    {
        return this._passSwitchtype_;
    }

    public void setPassSwitchtype(PPassSwitchtype node)
    {
        if(this._passSwitchtype_ != null)
        {
            this._passSwitchtype_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._passSwitchtype_ = node;
    }

    public PPassSwitchInstances getPassSwitchInstances()
    {
        return this._passSwitchInstances_;
    }

    public void setPassSwitchInstances(PPassSwitchInstances node)
    {
        if(this._passSwitchInstances_ != null)
        {
            this._passSwitchInstances_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._passSwitchInstances_ = node;
    }

    public TTSemicolon getTSemicolon()
    {
        return this._tSemicolon_;
    }

    public void setTSemicolon(TTSemicolon node)
    {
        if(this._tSemicolon_ != null)
        {
            this._tSemicolon_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._tSemicolon_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._passSwitchtype_)
            + toString(this._passSwitchInstances_)
            + toString(this._tSemicolon_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._passSwitchtype_ == child)
        {
            this._passSwitchtype_ = null;
            return;
        }

        if(this._passSwitchInstances_ == child)
        {
            this._passSwitchInstances_ = null;
            return;
        }

        if(this._tSemicolon_ == child)
        {
            this._tSemicolon_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._passSwitchtype_ == oldChild)
        {
            setPassSwitchtype((PPassSwitchtype) newChild);
            return;
        }

        if(this._passSwitchInstances_ == oldChild)
        {
            setPassSwitchInstances((PPassSwitchInstances) newChild);
            return;
        }

        if(this._tSemicolon_ == oldChild)
        {
            setTSemicolon((TTSemicolon) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
