/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.zamia.verilog.node;

import java.util.*;
import org.zamia.verilog.analysis.*;

@SuppressWarnings("nls")
public final class AP0TaskDeclaration extends PTaskDeclaration
{
    private TKTask _kTask_;
    private TKAutomatic _kAutomatic_;
    private PIdentifier _identifier_;
    private TTSemicolon _tSemicolon_;
    private final LinkedList<PTaskItemDeclaration> _taskItemDeclaration_ = new LinkedList<PTaskItemDeclaration>();
    private PStatementOrNull _statementOrNull_;
    private TKEndtask _kEndtask_;

    public AP0TaskDeclaration()
    {
        // Constructor
    }

    public AP0TaskDeclaration(
        @SuppressWarnings("hiding") TKTask _kTask_,
        @SuppressWarnings("hiding") TKAutomatic _kAutomatic_,
        @SuppressWarnings("hiding") PIdentifier _identifier_,
        @SuppressWarnings("hiding") TTSemicolon _tSemicolon_,
        @SuppressWarnings("hiding") List<PTaskItemDeclaration> _taskItemDeclaration_,
        @SuppressWarnings("hiding") PStatementOrNull _statementOrNull_,
        @SuppressWarnings("hiding") TKEndtask _kEndtask_)
    {
        // Constructor
        setKTask(_kTask_);

        setKAutomatic(_kAutomatic_);

        setIdentifier(_identifier_);

        setTSemicolon(_tSemicolon_);

        setTaskItemDeclaration(_taskItemDeclaration_);

        setStatementOrNull(_statementOrNull_);

        setKEndtask(_kEndtask_);

    }

    @Override
    public Object clone()
    {
        return new AP0TaskDeclaration(
            cloneNode(this._kTask_),
            cloneNode(this._kAutomatic_),
            cloneNode(this._identifier_),
            cloneNode(this._tSemicolon_),
            cloneList(this._taskItemDeclaration_),
            cloneNode(this._statementOrNull_),
            cloneNode(this._kEndtask_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAP0TaskDeclaration(this);
    }

    public TKTask getKTask()
    {
        return this._kTask_;
    }

    public void setKTask(TKTask node)
    {
        if(this._kTask_ != null)
        {
            this._kTask_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._kTask_ = node;
    }

    public TKAutomatic getKAutomatic()
    {
        return this._kAutomatic_;
    }

    public void setKAutomatic(TKAutomatic node)
    {
        if(this._kAutomatic_ != null)
        {
            this._kAutomatic_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._kAutomatic_ = node;
    }

    public PIdentifier getIdentifier()
    {
        return this._identifier_;
    }

    public void setIdentifier(PIdentifier node)
    {
        if(this._identifier_ != null)
        {
            this._identifier_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._identifier_ = node;
    }

    public TTSemicolon getTSemicolon()
    {
        return this._tSemicolon_;
    }

    public void setTSemicolon(TTSemicolon node)
    {
        if(this._tSemicolon_ != null)
        {
            this._tSemicolon_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._tSemicolon_ = node;
    }

    public LinkedList<PTaskItemDeclaration> getTaskItemDeclaration()
    {
        return this._taskItemDeclaration_;
    }

    public void setTaskItemDeclaration(List<PTaskItemDeclaration> list)
    {
        this._taskItemDeclaration_.clear();
        this._taskItemDeclaration_.addAll(list);
        for(PTaskItemDeclaration e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    public PStatementOrNull getStatementOrNull()
    {
        return this._statementOrNull_;
    }

    public void setStatementOrNull(PStatementOrNull node)
    {
        if(this._statementOrNull_ != null)
        {
            this._statementOrNull_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._statementOrNull_ = node;
    }

    public TKEndtask getKEndtask()
    {
        return this._kEndtask_;
    }

    public void setKEndtask(TKEndtask node)
    {
        if(this._kEndtask_ != null)
        {
            this._kEndtask_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._kEndtask_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._kTask_)
            + toString(this._kAutomatic_)
            + toString(this._identifier_)
            + toString(this._tSemicolon_)
            + toString(this._taskItemDeclaration_)
            + toString(this._statementOrNull_)
            + toString(this._kEndtask_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._kTask_ == child)
        {
            this._kTask_ = null;
            return;
        }

        if(this._kAutomatic_ == child)
        {
            this._kAutomatic_ = null;
            return;
        }

        if(this._identifier_ == child)
        {
            this._identifier_ = null;
            return;
        }

        if(this._tSemicolon_ == child)
        {
            this._tSemicolon_ = null;
            return;
        }

        if(this._taskItemDeclaration_.remove(child))
        {
            return;
        }

        if(this._statementOrNull_ == child)
        {
            this._statementOrNull_ = null;
            return;
        }

        if(this._kEndtask_ == child)
        {
            this._kEndtask_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._kTask_ == oldChild)
        {
            setKTask((TKTask) newChild);
            return;
        }

        if(this._kAutomatic_ == oldChild)
        {
            setKAutomatic((TKAutomatic) newChild);
            return;
        }

        if(this._identifier_ == oldChild)
        {
            setIdentifier((PIdentifier) newChild);
            return;
        }

        if(this._tSemicolon_ == oldChild)
        {
            setTSemicolon((TTSemicolon) newChild);
            return;
        }

        for(ListIterator<PTaskItemDeclaration> i = this._taskItemDeclaration_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PTaskItemDeclaration) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(this._statementOrNull_ == oldChild)
        {
            setStatementOrNull((PStatementOrNull) newChild);
            return;
        }

        if(this._kEndtask_ == oldChild)
        {
            setKEndtask((TKEndtask) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
