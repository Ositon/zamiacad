/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.zamia.verilog.node;

import org.zamia.verilog.analysis.*;

@SuppressWarnings("nls")
public final class AP1PassEnableSwitchInstances extends PPassEnableSwitchInstances
{
    private PPassEnableSwitchInstance _passEnableSwitchInstance_;
    private TTComma _tComma_;
    private PPassEnableSwitchInstances _passEnableSwitchInstances_;

    public AP1PassEnableSwitchInstances()
    {
        // Constructor
    }

    public AP1PassEnableSwitchInstances(
        @SuppressWarnings("hiding") PPassEnableSwitchInstance _passEnableSwitchInstance_,
        @SuppressWarnings("hiding") TTComma _tComma_,
        @SuppressWarnings("hiding") PPassEnableSwitchInstances _passEnableSwitchInstances_)
    {
        // Constructor
        setPassEnableSwitchInstance(_passEnableSwitchInstance_);

        setTComma(_tComma_);

        setPassEnableSwitchInstances(_passEnableSwitchInstances_);

    }

    @Override
    public Object clone()
    {
        return new AP1PassEnableSwitchInstances(
            cloneNode(this._passEnableSwitchInstance_),
            cloneNode(this._tComma_),
            cloneNode(this._passEnableSwitchInstances_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAP1PassEnableSwitchInstances(this);
    }

    public PPassEnableSwitchInstance getPassEnableSwitchInstance()
    {
        return this._passEnableSwitchInstance_;
    }

    public void setPassEnableSwitchInstance(PPassEnableSwitchInstance node)
    {
        if(this._passEnableSwitchInstance_ != null)
        {
            this._passEnableSwitchInstance_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._passEnableSwitchInstance_ = node;
    }

    public TTComma getTComma()
    {
        return this._tComma_;
    }

    public void setTComma(TTComma node)
    {
        if(this._tComma_ != null)
        {
            this._tComma_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._tComma_ = node;
    }

    public PPassEnableSwitchInstances getPassEnableSwitchInstances()
    {
        return this._passEnableSwitchInstances_;
    }

    public void setPassEnableSwitchInstances(PPassEnableSwitchInstances node)
    {
        if(this._passEnableSwitchInstances_ != null)
        {
            this._passEnableSwitchInstances_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._passEnableSwitchInstances_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._passEnableSwitchInstance_)
            + toString(this._tComma_)
            + toString(this._passEnableSwitchInstances_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._passEnableSwitchInstance_ == child)
        {
            this._passEnableSwitchInstance_ = null;
            return;
        }

        if(this._tComma_ == child)
        {
            this._tComma_ = null;
            return;
        }

        if(this._passEnableSwitchInstances_ == child)
        {
            this._passEnableSwitchInstances_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._passEnableSwitchInstance_ == oldChild)
        {
            setPassEnableSwitchInstance((PPassEnableSwitchInstance) newChild);
            return;
        }

        if(this._tComma_ == oldChild)
        {
            setTComma((TTComma) newChild);
            return;
        }

        if(this._passEnableSwitchInstances_ == oldChild)
        {
            setPassEnableSwitchInstances((PPassEnableSwitchInstances) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
