/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.zamia.verilog.node;

import org.zamia.verilog.analysis.*;

@SuppressWarnings("nls")
public final class AP1ShowcancelledDeclaration extends PShowcancelledDeclaration
{
    private TKNoshowcancelled _kNoshowcancelled_;
    private PListOfPathDescriptors _listOfPathDescriptors_;
    private TTSemicolon _tSemicolon_;

    public AP1ShowcancelledDeclaration()
    {
        // Constructor
    }

    public AP1ShowcancelledDeclaration(
        @SuppressWarnings("hiding") TKNoshowcancelled _kNoshowcancelled_,
        @SuppressWarnings("hiding") PListOfPathDescriptors _listOfPathDescriptors_,
        @SuppressWarnings("hiding") TTSemicolon _tSemicolon_)
    {
        // Constructor
        setKNoshowcancelled(_kNoshowcancelled_);

        setListOfPathDescriptors(_listOfPathDescriptors_);

        setTSemicolon(_tSemicolon_);

    }

    @Override
    public Object clone()
    {
        return new AP1ShowcancelledDeclaration(
            cloneNode(this._kNoshowcancelled_),
            cloneNode(this._listOfPathDescriptors_),
            cloneNode(this._tSemicolon_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAP1ShowcancelledDeclaration(this);
    }

    public TKNoshowcancelled getKNoshowcancelled()
    {
        return this._kNoshowcancelled_;
    }

    public void setKNoshowcancelled(TKNoshowcancelled node)
    {
        if(this._kNoshowcancelled_ != null)
        {
            this._kNoshowcancelled_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._kNoshowcancelled_ = node;
    }

    public PListOfPathDescriptors getListOfPathDescriptors()
    {
        return this._listOfPathDescriptors_;
    }

    public void setListOfPathDescriptors(PListOfPathDescriptors node)
    {
        if(this._listOfPathDescriptors_ != null)
        {
            this._listOfPathDescriptors_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._listOfPathDescriptors_ = node;
    }

    public TTSemicolon getTSemicolon()
    {
        return this._tSemicolon_;
    }

    public void setTSemicolon(TTSemicolon node)
    {
        if(this._tSemicolon_ != null)
        {
            this._tSemicolon_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._tSemicolon_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._kNoshowcancelled_)
            + toString(this._listOfPathDescriptors_)
            + toString(this._tSemicolon_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._kNoshowcancelled_ == child)
        {
            this._kNoshowcancelled_ = null;
            return;
        }

        if(this._listOfPathDescriptors_ == child)
        {
            this._listOfPathDescriptors_ = null;
            return;
        }

        if(this._tSemicolon_ == child)
        {
            this._tSemicolon_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._kNoshowcancelled_ == oldChild)
        {
            setKNoshowcancelled((TKNoshowcancelled) newChild);
            return;
        }

        if(this._listOfPathDescriptors_ == oldChild)
        {
            setListOfPathDescriptors((PListOfPathDescriptors) newChild);
            return;
        }

        if(this._tSemicolon_ == oldChild)
        {
            setTSemicolon((TTSemicolon) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
