/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.zamia.verilog.node;

import java.util.*;
import org.zamia.verilog.analysis.*;

@SuppressWarnings("nls")
public final class ASpecifyBlock extends PSpecifyBlock
{
    private TKSpecify _kSpecify_;
    private final LinkedList<PSpecifyItem> _specifyItem_ = new LinkedList<PSpecifyItem>();
    private TKEndspecify _kEndspecify_;

    public ASpecifyBlock()
    {
        // Constructor
    }

    public ASpecifyBlock(
        @SuppressWarnings("hiding") TKSpecify _kSpecify_,
        @SuppressWarnings("hiding") List<PSpecifyItem> _specifyItem_,
        @SuppressWarnings("hiding") TKEndspecify _kEndspecify_)
    {
        // Constructor
        setKSpecify(_kSpecify_);

        setSpecifyItem(_specifyItem_);

        setKEndspecify(_kEndspecify_);

    }

    @Override
    public Object clone()
    {
        return new ASpecifyBlock(
            cloneNode(this._kSpecify_),
            cloneList(this._specifyItem_),
            cloneNode(this._kEndspecify_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseASpecifyBlock(this);
    }

    public TKSpecify getKSpecify()
    {
        return this._kSpecify_;
    }

    public void setKSpecify(TKSpecify node)
    {
        if(this._kSpecify_ != null)
        {
            this._kSpecify_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._kSpecify_ = node;
    }

    public LinkedList<PSpecifyItem> getSpecifyItem()
    {
        return this._specifyItem_;
    }

    public void setSpecifyItem(List<PSpecifyItem> list)
    {
        this._specifyItem_.clear();
        this._specifyItem_.addAll(list);
        for(PSpecifyItem e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    public TKEndspecify getKEndspecify()
    {
        return this._kEndspecify_;
    }

    public void setKEndspecify(TKEndspecify node)
    {
        if(this._kEndspecify_ != null)
        {
            this._kEndspecify_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._kEndspecify_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._kSpecify_)
            + toString(this._specifyItem_)
            + toString(this._kEndspecify_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._kSpecify_ == child)
        {
            this._kSpecify_ = null;
            return;
        }

        if(this._specifyItem_.remove(child))
        {
            return;
        }

        if(this._kEndspecify_ == child)
        {
            this._kEndspecify_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._kSpecify_ == oldChild)
        {
            setKSpecify((TKSpecify) newChild);
            return;
        }

        for(ListIterator<PSpecifyItem> i = this._specifyItem_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PSpecifyItem) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(this._kEndspecify_ == oldChild)
        {
            setKEndspecify((TKEndspecify) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
