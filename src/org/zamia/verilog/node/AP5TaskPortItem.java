/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.zamia.verilog.node;

import org.zamia.verilog.analysis.*;

@SuppressWarnings("nls")
public final class AP5TaskPortItem extends PTaskPortItem
{
    private TKInout _kInout_;
    private PTaskPortType _taskPortType_;
    private PIdentifier _identifier_;

    public AP5TaskPortItem()
    {
        // Constructor
    }

    public AP5TaskPortItem(
        @SuppressWarnings("hiding") TKInout _kInout_,
        @SuppressWarnings("hiding") PTaskPortType _taskPortType_,
        @SuppressWarnings("hiding") PIdentifier _identifier_)
    {
        // Constructor
        setKInout(_kInout_);

        setTaskPortType(_taskPortType_);

        setIdentifier(_identifier_);

    }

    @Override
    public Object clone()
    {
        return new AP5TaskPortItem(
            cloneNode(this._kInout_),
            cloneNode(this._taskPortType_),
            cloneNode(this._identifier_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAP5TaskPortItem(this);
    }

    public TKInout getKInout()
    {
        return this._kInout_;
    }

    public void setKInout(TKInout node)
    {
        if(this._kInout_ != null)
        {
            this._kInout_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._kInout_ = node;
    }

    public PTaskPortType getTaskPortType()
    {
        return this._taskPortType_;
    }

    public void setTaskPortType(PTaskPortType node)
    {
        if(this._taskPortType_ != null)
        {
            this._taskPortType_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._taskPortType_ = node;
    }

    public PIdentifier getIdentifier()
    {
        return this._identifier_;
    }

    public void setIdentifier(PIdentifier node)
    {
        if(this._identifier_ != null)
        {
            this._identifier_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._identifier_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._kInout_)
            + toString(this._taskPortType_)
            + toString(this._identifier_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._kInout_ == child)
        {
            this._kInout_ = null;
            return;
        }

        if(this._taskPortType_ == child)
        {
            this._taskPortType_ = null;
            return;
        }

        if(this._identifier_ == child)
        {
            this._identifier_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._kInout_ == oldChild)
        {
            setKInout((TKInout) newChild);
            return;
        }

        if(this._taskPortType_ == oldChild)
        {
            setTaskPortType((PTaskPortType) newChild);
            return;
        }

        if(this._identifier_ == oldChild)
        {
            setIdentifier((PIdentifier) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
