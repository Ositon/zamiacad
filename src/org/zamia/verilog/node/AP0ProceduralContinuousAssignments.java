/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.zamia.verilog.node;

import org.zamia.verilog.analysis.*;

@SuppressWarnings("nls")
public final class AP0ProceduralContinuousAssignments extends PProceduralContinuousAssignments
{
    private TKAssign _kAssign_;
    private PAssignment _assignment_;

    public AP0ProceduralContinuousAssignments()
    {
        // Constructor
    }

    public AP0ProceduralContinuousAssignments(
        @SuppressWarnings("hiding") TKAssign _kAssign_,
        @SuppressWarnings("hiding") PAssignment _assignment_)
    {
        // Constructor
        setKAssign(_kAssign_);

        setAssignment(_assignment_);

    }

    @Override
    public Object clone()
    {
        return new AP0ProceduralContinuousAssignments(
            cloneNode(this._kAssign_),
            cloneNode(this._assignment_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAP0ProceduralContinuousAssignments(this);
    }

    public TKAssign getKAssign()
    {
        return this._kAssign_;
    }

    public void setKAssign(TKAssign node)
    {
        if(this._kAssign_ != null)
        {
            this._kAssign_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._kAssign_ = node;
    }

    public PAssignment getAssignment()
    {
        return this._assignment_;
    }

    public void setAssignment(PAssignment node)
    {
        if(this._assignment_ != null)
        {
            this._assignment_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._assignment_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._kAssign_)
            + toString(this._assignment_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._kAssign_ == child)
        {
            this._kAssign_ = null;
            return;
        }

        if(this._assignment_ == child)
        {
            this._assignment_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._kAssign_ == oldChild)
        {
            setKAssign((TKAssign) newChild);
            return;
        }

        if(this._assignment_ == oldChild)
        {
            setAssignment((PAssignment) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
