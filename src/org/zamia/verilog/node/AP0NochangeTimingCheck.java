/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.zamia.verilog.node;

import org.zamia.verilog.analysis.*;

@SuppressWarnings("nls")
public final class AP0NochangeTimingCheck extends PNochangeTimingCheck
{
    private TKSnochange _kSnochange_;
    private TTLparen _tLparen_;
    private PTimingCheckEvent _e0_;
    private TTComma _c0_;
    private PTimingCheckEvent _e1_;
    private TTComma _c1_;
    private PMintypmaxExpression _x0_;
    private TTComma _c2_;
    private PMintypmaxExpression _x1_;
    private TTRparen _tRparen_;
    private TTSemicolon _tSemicolon_;

    public AP0NochangeTimingCheck()
    {
        // Constructor
    }

    public AP0NochangeTimingCheck(
        @SuppressWarnings("hiding") TKSnochange _kSnochange_,
        @SuppressWarnings("hiding") TTLparen _tLparen_,
        @SuppressWarnings("hiding") PTimingCheckEvent _e0_,
        @SuppressWarnings("hiding") TTComma _c0_,
        @SuppressWarnings("hiding") PTimingCheckEvent _e1_,
        @SuppressWarnings("hiding") TTComma _c1_,
        @SuppressWarnings("hiding") PMintypmaxExpression _x0_,
        @SuppressWarnings("hiding") TTComma _c2_,
        @SuppressWarnings("hiding") PMintypmaxExpression _x1_,
        @SuppressWarnings("hiding") TTRparen _tRparen_,
        @SuppressWarnings("hiding") TTSemicolon _tSemicolon_)
    {
        // Constructor
        setKSnochange(_kSnochange_);

        setTLparen(_tLparen_);

        setE0(_e0_);

        setC0(_c0_);

        setE1(_e1_);

        setC1(_c1_);

        setX0(_x0_);

        setC2(_c2_);

        setX1(_x1_);

        setTRparen(_tRparen_);

        setTSemicolon(_tSemicolon_);

    }

    @Override
    public Object clone()
    {
        return new AP0NochangeTimingCheck(
            cloneNode(this._kSnochange_),
            cloneNode(this._tLparen_),
            cloneNode(this._e0_),
            cloneNode(this._c0_),
            cloneNode(this._e1_),
            cloneNode(this._c1_),
            cloneNode(this._x0_),
            cloneNode(this._c2_),
            cloneNode(this._x1_),
            cloneNode(this._tRparen_),
            cloneNode(this._tSemicolon_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAP0NochangeTimingCheck(this);
    }

    public TKSnochange getKSnochange()
    {
        return this._kSnochange_;
    }

    public void setKSnochange(TKSnochange node)
    {
        if(this._kSnochange_ != null)
        {
            this._kSnochange_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._kSnochange_ = node;
    }

    public TTLparen getTLparen()
    {
        return this._tLparen_;
    }

    public void setTLparen(TTLparen node)
    {
        if(this._tLparen_ != null)
        {
            this._tLparen_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._tLparen_ = node;
    }

    public PTimingCheckEvent getE0()
    {
        return this._e0_;
    }

    public void setE0(PTimingCheckEvent node)
    {
        if(this._e0_ != null)
        {
            this._e0_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._e0_ = node;
    }

    public TTComma getC0()
    {
        return this._c0_;
    }

    public void setC0(TTComma node)
    {
        if(this._c0_ != null)
        {
            this._c0_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._c0_ = node;
    }

    public PTimingCheckEvent getE1()
    {
        return this._e1_;
    }

    public void setE1(PTimingCheckEvent node)
    {
        if(this._e1_ != null)
        {
            this._e1_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._e1_ = node;
    }

    public TTComma getC1()
    {
        return this._c1_;
    }

    public void setC1(TTComma node)
    {
        if(this._c1_ != null)
        {
            this._c1_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._c1_ = node;
    }

    public PMintypmaxExpression getX0()
    {
        return this._x0_;
    }

    public void setX0(PMintypmaxExpression node)
    {
        if(this._x0_ != null)
        {
            this._x0_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._x0_ = node;
    }

    public TTComma getC2()
    {
        return this._c2_;
    }

    public void setC2(TTComma node)
    {
        if(this._c2_ != null)
        {
            this._c2_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._c2_ = node;
    }

    public PMintypmaxExpression getX1()
    {
        return this._x1_;
    }

    public void setX1(PMintypmaxExpression node)
    {
        if(this._x1_ != null)
        {
            this._x1_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._x1_ = node;
    }

    public TTRparen getTRparen()
    {
        return this._tRparen_;
    }

    public void setTRparen(TTRparen node)
    {
        if(this._tRparen_ != null)
        {
            this._tRparen_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._tRparen_ = node;
    }

    public TTSemicolon getTSemicolon()
    {
        return this._tSemicolon_;
    }

    public void setTSemicolon(TTSemicolon node)
    {
        if(this._tSemicolon_ != null)
        {
            this._tSemicolon_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._tSemicolon_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._kSnochange_)
            + toString(this._tLparen_)
            + toString(this._e0_)
            + toString(this._c0_)
            + toString(this._e1_)
            + toString(this._c1_)
            + toString(this._x0_)
            + toString(this._c2_)
            + toString(this._x1_)
            + toString(this._tRparen_)
            + toString(this._tSemicolon_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._kSnochange_ == child)
        {
            this._kSnochange_ = null;
            return;
        }

        if(this._tLparen_ == child)
        {
            this._tLparen_ = null;
            return;
        }

        if(this._e0_ == child)
        {
            this._e0_ = null;
            return;
        }

        if(this._c0_ == child)
        {
            this._c0_ = null;
            return;
        }

        if(this._e1_ == child)
        {
            this._e1_ = null;
            return;
        }

        if(this._c1_ == child)
        {
            this._c1_ = null;
            return;
        }

        if(this._x0_ == child)
        {
            this._x0_ = null;
            return;
        }

        if(this._c2_ == child)
        {
            this._c2_ = null;
            return;
        }

        if(this._x1_ == child)
        {
            this._x1_ = null;
            return;
        }

        if(this._tRparen_ == child)
        {
            this._tRparen_ = null;
            return;
        }

        if(this._tSemicolon_ == child)
        {
            this._tSemicolon_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._kSnochange_ == oldChild)
        {
            setKSnochange((TKSnochange) newChild);
            return;
        }

        if(this._tLparen_ == oldChild)
        {
            setTLparen((TTLparen) newChild);
            return;
        }

        if(this._e0_ == oldChild)
        {
            setE0((PTimingCheckEvent) newChild);
            return;
        }

        if(this._c0_ == oldChild)
        {
            setC0((TTComma) newChild);
            return;
        }

        if(this._e1_ == oldChild)
        {
            setE1((PTimingCheckEvent) newChild);
            return;
        }

        if(this._c1_ == oldChild)
        {
            setC1((TTComma) newChild);
            return;
        }

        if(this._x0_ == oldChild)
        {
            setX0((PMintypmaxExpression) newChild);
            return;
        }

        if(this._c2_ == oldChild)
        {
            setC2((TTComma) newChild);
            return;
        }

        if(this._x1_ == oldChild)
        {
            setX1((PMintypmaxExpression) newChild);
            return;
        }

        if(this._tRparen_ == oldChild)
        {
            setTRparen((TTRparen) newChild);
            return;
        }

        if(this._tSemicolon_ == oldChild)
        {
            setTSemicolon((TTSemicolon) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
