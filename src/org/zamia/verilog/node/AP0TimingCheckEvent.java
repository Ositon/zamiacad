/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.zamia.verilog.node;

import org.zamia.verilog.analysis.*;

@SuppressWarnings("nls")
public final class AP0TimingCheckEvent extends PTimingCheckEvent
{
    private PTimingCheckEventControl _timingCheckEventControl_;
    private PSpecifyTerminalDescriptor _specifyTerminalDescriptor_;

    public AP0TimingCheckEvent()
    {
        // Constructor
    }

    public AP0TimingCheckEvent(
        @SuppressWarnings("hiding") PTimingCheckEventControl _timingCheckEventControl_,
        @SuppressWarnings("hiding") PSpecifyTerminalDescriptor _specifyTerminalDescriptor_)
    {
        // Constructor
        setTimingCheckEventControl(_timingCheckEventControl_);

        setSpecifyTerminalDescriptor(_specifyTerminalDescriptor_);

    }

    @Override
    public Object clone()
    {
        return new AP0TimingCheckEvent(
            cloneNode(this._timingCheckEventControl_),
            cloneNode(this._specifyTerminalDescriptor_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAP0TimingCheckEvent(this);
    }

    public PTimingCheckEventControl getTimingCheckEventControl()
    {
        return this._timingCheckEventControl_;
    }

    public void setTimingCheckEventControl(PTimingCheckEventControl node)
    {
        if(this._timingCheckEventControl_ != null)
        {
            this._timingCheckEventControl_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._timingCheckEventControl_ = node;
    }

    public PSpecifyTerminalDescriptor getSpecifyTerminalDescriptor()
    {
        return this._specifyTerminalDescriptor_;
    }

    public void setSpecifyTerminalDescriptor(PSpecifyTerminalDescriptor node)
    {
        if(this._specifyTerminalDescriptor_ != null)
        {
            this._specifyTerminalDescriptor_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._specifyTerminalDescriptor_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._timingCheckEventControl_)
            + toString(this._specifyTerminalDescriptor_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._timingCheckEventControl_ == child)
        {
            this._timingCheckEventControl_ = null;
            return;
        }

        if(this._specifyTerminalDescriptor_ == child)
        {
            this._specifyTerminalDescriptor_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._timingCheckEventControl_ == oldChild)
        {
            setTimingCheckEventControl((PTimingCheckEventControl) newChild);
            return;
        }

        if(this._specifyTerminalDescriptor_ == oldChild)
        {
            setSpecifyTerminalDescriptor((PSpecifyTerminalDescriptor) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
