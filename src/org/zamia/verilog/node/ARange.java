/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.zamia.verilog.node;

import org.zamia.verilog.analysis.*;

@SuppressWarnings("nls")
public final class ARange extends PRange
{
    private TTLbracket _tLbracket_;
    private PExpression _e1_;
    private TTColon _tColon_;
    private PExpression _e2_;
    private TTRbracket _tRbracket_;

    public ARange()
    {
        // Constructor
    }

    public ARange(
        @SuppressWarnings("hiding") TTLbracket _tLbracket_,
        @SuppressWarnings("hiding") PExpression _e1_,
        @SuppressWarnings("hiding") TTColon _tColon_,
        @SuppressWarnings("hiding") PExpression _e2_,
        @SuppressWarnings("hiding") TTRbracket _tRbracket_)
    {
        // Constructor
        setTLbracket(_tLbracket_);

        setE1(_e1_);

        setTColon(_tColon_);

        setE2(_e2_);

        setTRbracket(_tRbracket_);

    }

    @Override
    public Object clone()
    {
        return new ARange(
            cloneNode(this._tLbracket_),
            cloneNode(this._e1_),
            cloneNode(this._tColon_),
            cloneNode(this._e2_),
            cloneNode(this._tRbracket_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseARange(this);
    }

    public TTLbracket getTLbracket()
    {
        return this._tLbracket_;
    }

    public void setTLbracket(TTLbracket node)
    {
        if(this._tLbracket_ != null)
        {
            this._tLbracket_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._tLbracket_ = node;
    }

    public PExpression getE1()
    {
        return this._e1_;
    }

    public void setE1(PExpression node)
    {
        if(this._e1_ != null)
        {
            this._e1_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._e1_ = node;
    }

    public TTColon getTColon()
    {
        return this._tColon_;
    }

    public void setTColon(TTColon node)
    {
        if(this._tColon_ != null)
        {
            this._tColon_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._tColon_ = node;
    }

    public PExpression getE2()
    {
        return this._e2_;
    }

    public void setE2(PExpression node)
    {
        if(this._e2_ != null)
        {
            this._e2_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._e2_ = node;
    }

    public TTRbracket getTRbracket()
    {
        return this._tRbracket_;
    }

    public void setTRbracket(TTRbracket node)
    {
        if(this._tRbracket_ != null)
        {
            this._tRbracket_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._tRbracket_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._tLbracket_)
            + toString(this._e1_)
            + toString(this._tColon_)
            + toString(this._e2_)
            + toString(this._tRbracket_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._tLbracket_ == child)
        {
            this._tLbracket_ = null;
            return;
        }

        if(this._e1_ == child)
        {
            this._e1_ = null;
            return;
        }

        if(this._tColon_ == child)
        {
            this._tColon_ = null;
            return;
        }

        if(this._e2_ == child)
        {
            this._e2_ = null;
            return;
        }

        if(this._tRbracket_ == child)
        {
            this._tRbracket_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._tLbracket_ == oldChild)
        {
            setTLbracket((TTLbracket) newChild);
            return;
        }

        if(this._e1_ == oldChild)
        {
            setE1((PExpression) newChild);
            return;
        }

        if(this._tColon_ == oldChild)
        {
            setTColon((TTColon) newChild);
            return;
        }

        if(this._e2_ == oldChild)
        {
            setE2((PExpression) newChild);
            return;
        }

        if(this._tRbracket_ == oldChild)
        {
            setTRbracket((TTRbracket) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
