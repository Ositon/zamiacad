/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.zamia.verilog.node;

import org.zamia.verilog.analysis.*;

@SuppressWarnings("nls")
public final class AP1EventControl extends PEventControl
{
    private TTAt _tAt_;
    private TTLparen _tLparen_;
    private PEventExpression _eventExpression_;
    private TTRparen _tRparen_;

    public AP1EventControl()
    {
        // Constructor
    }

    public AP1EventControl(
        @SuppressWarnings("hiding") TTAt _tAt_,
        @SuppressWarnings("hiding") TTLparen _tLparen_,
        @SuppressWarnings("hiding") PEventExpression _eventExpression_,
        @SuppressWarnings("hiding") TTRparen _tRparen_)
    {
        // Constructor
        setTAt(_tAt_);

        setTLparen(_tLparen_);

        setEventExpression(_eventExpression_);

        setTRparen(_tRparen_);

    }

    @Override
    public Object clone()
    {
        return new AP1EventControl(
            cloneNode(this._tAt_),
            cloneNode(this._tLparen_),
            cloneNode(this._eventExpression_),
            cloneNode(this._tRparen_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAP1EventControl(this);
    }

    public TTAt getTAt()
    {
        return this._tAt_;
    }

    public void setTAt(TTAt node)
    {
        if(this._tAt_ != null)
        {
            this._tAt_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._tAt_ = node;
    }

    public TTLparen getTLparen()
    {
        return this._tLparen_;
    }

    public void setTLparen(TTLparen node)
    {
        if(this._tLparen_ != null)
        {
            this._tLparen_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._tLparen_ = node;
    }

    public PEventExpression getEventExpression()
    {
        return this._eventExpression_;
    }

    public void setEventExpression(PEventExpression node)
    {
        if(this._eventExpression_ != null)
        {
            this._eventExpression_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._eventExpression_ = node;
    }

    public TTRparen getTRparen()
    {
        return this._tRparen_;
    }

    public void setTRparen(TTRparen node)
    {
        if(this._tRparen_ != null)
        {
            this._tRparen_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._tRparen_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._tAt_)
            + toString(this._tLparen_)
            + toString(this._eventExpression_)
            + toString(this._tRparen_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._tAt_ == child)
        {
            this._tAt_ = null;
            return;
        }

        if(this._tLparen_ == child)
        {
            this._tLparen_ = null;
            return;
        }

        if(this._eventExpression_ == child)
        {
            this._eventExpression_ = null;
            return;
        }

        if(this._tRparen_ == child)
        {
            this._tRparen_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._tAt_ == oldChild)
        {
            setTAt((TTAt) newChild);
            return;
        }

        if(this._tLparen_ == oldChild)
        {
            setTLparen((TTLparen) newChild);
            return;
        }

        if(this._eventExpression_ == oldChild)
        {
            setEventExpression((PEventExpression) newChild);
            return;
        }

        if(this._tRparen_ == oldChild)
        {
            setTRparen((TTRparen) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
