/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.zamia.verilog.node;

import org.zamia.verilog.analysis.*;

@SuppressWarnings("nls")
public final class ACmosSwitchInstance extends PCmosSwitchInstance
{
    private PNameOfGateInstance _nameOfGateInstance_;
    private TTLparen _tLparen_;
    private PTerminal _t1_;
    private TTComma _c1_;
    private PTerminal _t2_;
    private TTComma _c2_;
    private PNcontrolTerminal _ncontrolTerminal_;
    private TTComma _c3_;
    private PPcontrolTerminal _pcontrolTerminal_;
    private TTRparen _tRparen_;

    public ACmosSwitchInstance()
    {
        // Constructor
    }

    public ACmosSwitchInstance(
        @SuppressWarnings("hiding") PNameOfGateInstance _nameOfGateInstance_,
        @SuppressWarnings("hiding") TTLparen _tLparen_,
        @SuppressWarnings("hiding") PTerminal _t1_,
        @SuppressWarnings("hiding") TTComma _c1_,
        @SuppressWarnings("hiding") PTerminal _t2_,
        @SuppressWarnings("hiding") TTComma _c2_,
        @SuppressWarnings("hiding") PNcontrolTerminal _ncontrolTerminal_,
        @SuppressWarnings("hiding") TTComma _c3_,
        @SuppressWarnings("hiding") PPcontrolTerminal _pcontrolTerminal_,
        @SuppressWarnings("hiding") TTRparen _tRparen_)
    {
        // Constructor
        setNameOfGateInstance(_nameOfGateInstance_);

        setTLparen(_tLparen_);

        setT1(_t1_);

        setC1(_c1_);

        setT2(_t2_);

        setC2(_c2_);

        setNcontrolTerminal(_ncontrolTerminal_);

        setC3(_c3_);

        setPcontrolTerminal(_pcontrolTerminal_);

        setTRparen(_tRparen_);

    }

    @Override
    public Object clone()
    {
        return new ACmosSwitchInstance(
            cloneNode(this._nameOfGateInstance_),
            cloneNode(this._tLparen_),
            cloneNode(this._t1_),
            cloneNode(this._c1_),
            cloneNode(this._t2_),
            cloneNode(this._c2_),
            cloneNode(this._ncontrolTerminal_),
            cloneNode(this._c3_),
            cloneNode(this._pcontrolTerminal_),
            cloneNode(this._tRparen_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseACmosSwitchInstance(this);
    }

    public PNameOfGateInstance getNameOfGateInstance()
    {
        return this._nameOfGateInstance_;
    }

    public void setNameOfGateInstance(PNameOfGateInstance node)
    {
        if(this._nameOfGateInstance_ != null)
        {
            this._nameOfGateInstance_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._nameOfGateInstance_ = node;
    }

    public TTLparen getTLparen()
    {
        return this._tLparen_;
    }

    public void setTLparen(TTLparen node)
    {
        if(this._tLparen_ != null)
        {
            this._tLparen_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._tLparen_ = node;
    }

    public PTerminal getT1()
    {
        return this._t1_;
    }

    public void setT1(PTerminal node)
    {
        if(this._t1_ != null)
        {
            this._t1_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._t1_ = node;
    }

    public TTComma getC1()
    {
        return this._c1_;
    }

    public void setC1(TTComma node)
    {
        if(this._c1_ != null)
        {
            this._c1_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._c1_ = node;
    }

    public PTerminal getT2()
    {
        return this._t2_;
    }

    public void setT2(PTerminal node)
    {
        if(this._t2_ != null)
        {
            this._t2_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._t2_ = node;
    }

    public TTComma getC2()
    {
        return this._c2_;
    }

    public void setC2(TTComma node)
    {
        if(this._c2_ != null)
        {
            this._c2_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._c2_ = node;
    }

    public PNcontrolTerminal getNcontrolTerminal()
    {
        return this._ncontrolTerminal_;
    }

    public void setNcontrolTerminal(PNcontrolTerminal node)
    {
        if(this._ncontrolTerminal_ != null)
        {
            this._ncontrolTerminal_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._ncontrolTerminal_ = node;
    }

    public TTComma getC3()
    {
        return this._c3_;
    }

    public void setC3(TTComma node)
    {
        if(this._c3_ != null)
        {
            this._c3_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._c3_ = node;
    }

    public PPcontrolTerminal getPcontrolTerminal()
    {
        return this._pcontrolTerminal_;
    }

    public void setPcontrolTerminal(PPcontrolTerminal node)
    {
        if(this._pcontrolTerminal_ != null)
        {
            this._pcontrolTerminal_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._pcontrolTerminal_ = node;
    }

    public TTRparen getTRparen()
    {
        return this._tRparen_;
    }

    public void setTRparen(TTRparen node)
    {
        if(this._tRparen_ != null)
        {
            this._tRparen_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._tRparen_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._nameOfGateInstance_)
            + toString(this._tLparen_)
            + toString(this._t1_)
            + toString(this._c1_)
            + toString(this._t2_)
            + toString(this._c2_)
            + toString(this._ncontrolTerminal_)
            + toString(this._c3_)
            + toString(this._pcontrolTerminal_)
            + toString(this._tRparen_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._nameOfGateInstance_ == child)
        {
            this._nameOfGateInstance_ = null;
            return;
        }

        if(this._tLparen_ == child)
        {
            this._tLparen_ = null;
            return;
        }

        if(this._t1_ == child)
        {
            this._t1_ = null;
            return;
        }

        if(this._c1_ == child)
        {
            this._c1_ = null;
            return;
        }

        if(this._t2_ == child)
        {
            this._t2_ = null;
            return;
        }

        if(this._c2_ == child)
        {
            this._c2_ = null;
            return;
        }

        if(this._ncontrolTerminal_ == child)
        {
            this._ncontrolTerminal_ = null;
            return;
        }

        if(this._c3_ == child)
        {
            this._c3_ = null;
            return;
        }

        if(this._pcontrolTerminal_ == child)
        {
            this._pcontrolTerminal_ = null;
            return;
        }

        if(this._tRparen_ == child)
        {
            this._tRparen_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._nameOfGateInstance_ == oldChild)
        {
            setNameOfGateInstance((PNameOfGateInstance) newChild);
            return;
        }

        if(this._tLparen_ == oldChild)
        {
            setTLparen((TTLparen) newChild);
            return;
        }

        if(this._t1_ == oldChild)
        {
            setT1((PTerminal) newChild);
            return;
        }

        if(this._c1_ == oldChild)
        {
            setC1((TTComma) newChild);
            return;
        }

        if(this._t2_ == oldChild)
        {
            setT2((PTerminal) newChild);
            return;
        }

        if(this._c2_ == oldChild)
        {
            setC2((TTComma) newChild);
            return;
        }

        if(this._ncontrolTerminal_ == oldChild)
        {
            setNcontrolTerminal((PNcontrolTerminal) newChild);
            return;
        }

        if(this._c3_ == oldChild)
        {
            setC3((TTComma) newChild);
            return;
        }

        if(this._pcontrolTerminal_ == oldChild)
        {
            setPcontrolTerminal((PPcontrolTerminal) newChild);
            return;
        }

        if(this._tRparen_ == oldChild)
        {
            setTRparen((TTRparen) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
