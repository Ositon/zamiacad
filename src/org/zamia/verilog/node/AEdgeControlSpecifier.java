/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.zamia.verilog.node;

import java.util.*;
import org.zamia.verilog.analysis.*;

@SuppressWarnings("nls")
public final class AEdgeControlSpecifier extends PEdgeControlSpecifier
{
    private TKEdge _kEdge_;
    private TTLbracket _tLbracket_;
    private TTEdgeDescriptor _tEdgeDescriptor_;
    private final LinkedList<PEdgeControlSpecifierRep> _edgeControlSpecifierRep_ = new LinkedList<PEdgeControlSpecifierRep>();
    private TTRbracket _tRbracket_;

    public AEdgeControlSpecifier()
    {
        // Constructor
    }

    public AEdgeControlSpecifier(
        @SuppressWarnings("hiding") TKEdge _kEdge_,
        @SuppressWarnings("hiding") TTLbracket _tLbracket_,
        @SuppressWarnings("hiding") TTEdgeDescriptor _tEdgeDescriptor_,
        @SuppressWarnings("hiding") List<PEdgeControlSpecifierRep> _edgeControlSpecifierRep_,
        @SuppressWarnings("hiding") TTRbracket _tRbracket_)
    {
        // Constructor
        setKEdge(_kEdge_);

        setTLbracket(_tLbracket_);

        setTEdgeDescriptor(_tEdgeDescriptor_);

        setEdgeControlSpecifierRep(_edgeControlSpecifierRep_);

        setTRbracket(_tRbracket_);

    }

    @Override
    public Object clone()
    {
        return new AEdgeControlSpecifier(
            cloneNode(this._kEdge_),
            cloneNode(this._tLbracket_),
            cloneNode(this._tEdgeDescriptor_),
            cloneList(this._edgeControlSpecifierRep_),
            cloneNode(this._tRbracket_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAEdgeControlSpecifier(this);
    }

    public TKEdge getKEdge()
    {
        return this._kEdge_;
    }

    public void setKEdge(TKEdge node)
    {
        if(this._kEdge_ != null)
        {
            this._kEdge_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._kEdge_ = node;
    }

    public TTLbracket getTLbracket()
    {
        return this._tLbracket_;
    }

    public void setTLbracket(TTLbracket node)
    {
        if(this._tLbracket_ != null)
        {
            this._tLbracket_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._tLbracket_ = node;
    }

    public TTEdgeDescriptor getTEdgeDescriptor()
    {
        return this._tEdgeDescriptor_;
    }

    public void setTEdgeDescriptor(TTEdgeDescriptor node)
    {
        if(this._tEdgeDescriptor_ != null)
        {
            this._tEdgeDescriptor_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._tEdgeDescriptor_ = node;
    }

    public LinkedList<PEdgeControlSpecifierRep> getEdgeControlSpecifierRep()
    {
        return this._edgeControlSpecifierRep_;
    }

    public void setEdgeControlSpecifierRep(List<PEdgeControlSpecifierRep> list)
    {
        this._edgeControlSpecifierRep_.clear();
        this._edgeControlSpecifierRep_.addAll(list);
        for(PEdgeControlSpecifierRep e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    public TTRbracket getTRbracket()
    {
        return this._tRbracket_;
    }

    public void setTRbracket(TTRbracket node)
    {
        if(this._tRbracket_ != null)
        {
            this._tRbracket_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._tRbracket_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._kEdge_)
            + toString(this._tLbracket_)
            + toString(this._tEdgeDescriptor_)
            + toString(this._edgeControlSpecifierRep_)
            + toString(this._tRbracket_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._kEdge_ == child)
        {
            this._kEdge_ = null;
            return;
        }

        if(this._tLbracket_ == child)
        {
            this._tLbracket_ = null;
            return;
        }

        if(this._tEdgeDescriptor_ == child)
        {
            this._tEdgeDescriptor_ = null;
            return;
        }

        if(this._edgeControlSpecifierRep_.remove(child))
        {
            return;
        }

        if(this._tRbracket_ == child)
        {
            this._tRbracket_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._kEdge_ == oldChild)
        {
            setKEdge((TKEdge) newChild);
            return;
        }

        if(this._tLbracket_ == oldChild)
        {
            setTLbracket((TTLbracket) newChild);
            return;
        }

        if(this._tEdgeDescriptor_ == oldChild)
        {
            setTEdgeDescriptor((TTEdgeDescriptor) newChild);
            return;
        }

        for(ListIterator<PEdgeControlSpecifierRep> i = this._edgeControlSpecifierRep_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PEdgeControlSpecifierRep) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(this._tRbracket_ == oldChild)
        {
            setTRbracket((TTRbracket) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
