/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.zamia.verilog.node;

import org.zamia.verilog.analysis.*;

@SuppressWarnings("nls")
public final class AP1ListOfParamAssignments extends PListOfParamAssignments
{
    private PListOfParamAssignments _listOfParamAssignments_;
    private TTComma _tComma_;
    private PParamAssignment _paramAssignment_;

    public AP1ListOfParamAssignments()
    {
        // Constructor
    }

    public AP1ListOfParamAssignments(
        @SuppressWarnings("hiding") PListOfParamAssignments _listOfParamAssignments_,
        @SuppressWarnings("hiding") TTComma _tComma_,
        @SuppressWarnings("hiding") PParamAssignment _paramAssignment_)
    {
        // Constructor
        setListOfParamAssignments(_listOfParamAssignments_);

        setTComma(_tComma_);

        setParamAssignment(_paramAssignment_);

    }

    @Override
    public Object clone()
    {
        return new AP1ListOfParamAssignments(
            cloneNode(this._listOfParamAssignments_),
            cloneNode(this._tComma_),
            cloneNode(this._paramAssignment_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAP1ListOfParamAssignments(this);
    }

    public PListOfParamAssignments getListOfParamAssignments()
    {
        return this._listOfParamAssignments_;
    }

    public void setListOfParamAssignments(PListOfParamAssignments node)
    {
        if(this._listOfParamAssignments_ != null)
        {
            this._listOfParamAssignments_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._listOfParamAssignments_ = node;
    }

    public TTComma getTComma()
    {
        return this._tComma_;
    }

    public void setTComma(TTComma node)
    {
        if(this._tComma_ != null)
        {
            this._tComma_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._tComma_ = node;
    }

    public PParamAssignment getParamAssignment()
    {
        return this._paramAssignment_;
    }

    public void setParamAssignment(PParamAssignment node)
    {
        if(this._paramAssignment_ != null)
        {
            this._paramAssignment_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._paramAssignment_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._listOfParamAssignments_)
            + toString(this._tComma_)
            + toString(this._paramAssignment_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._listOfParamAssignments_ == child)
        {
            this._listOfParamAssignments_ = null;
            return;
        }

        if(this._tComma_ == child)
        {
            this._tComma_ = null;
            return;
        }

        if(this._paramAssignment_ == child)
        {
            this._paramAssignment_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._listOfParamAssignments_ == oldChild)
        {
            setListOfParamAssignments((PListOfParamAssignments) newChild);
            return;
        }

        if(this._tComma_ == oldChild)
        {
            setTComma((TTComma) newChild);
            return;
        }

        if(this._paramAssignment_ == oldChild)
        {
            setParamAssignment((PParamAssignment) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
