/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.zamia.verilog.node;

import org.zamia.verilog.analysis.*;

@SuppressWarnings("nls")
public final class AFullPathSimplePathDeclaration extends PSimplePathDeclaration
{
    private TTLparen _tLparen_;
    private PListOfPathDescriptors _l1_;
    private PPolarityOperator _polarityOperator_;
    private TTSg _tSg_;
    private PListOfPathDescriptors _l2_;
    private TTRparen _tRparen_;

    public AFullPathSimplePathDeclaration()
    {
        // Constructor
    }

    public AFullPathSimplePathDeclaration(
        @SuppressWarnings("hiding") TTLparen _tLparen_,
        @SuppressWarnings("hiding") PListOfPathDescriptors _l1_,
        @SuppressWarnings("hiding") PPolarityOperator _polarityOperator_,
        @SuppressWarnings("hiding") TTSg _tSg_,
        @SuppressWarnings("hiding") PListOfPathDescriptors _l2_,
        @SuppressWarnings("hiding") TTRparen _tRparen_)
    {
        // Constructor
        setTLparen(_tLparen_);

        setL1(_l1_);

        setPolarityOperator(_polarityOperator_);

        setTSg(_tSg_);

        setL2(_l2_);

        setTRparen(_tRparen_);

    }

    @Override
    public Object clone()
    {
        return new AFullPathSimplePathDeclaration(
            cloneNode(this._tLparen_),
            cloneNode(this._l1_),
            cloneNode(this._polarityOperator_),
            cloneNode(this._tSg_),
            cloneNode(this._l2_),
            cloneNode(this._tRparen_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAFullPathSimplePathDeclaration(this);
    }

    public TTLparen getTLparen()
    {
        return this._tLparen_;
    }

    public void setTLparen(TTLparen node)
    {
        if(this._tLparen_ != null)
        {
            this._tLparen_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._tLparen_ = node;
    }

    public PListOfPathDescriptors getL1()
    {
        return this._l1_;
    }

    public void setL1(PListOfPathDescriptors node)
    {
        if(this._l1_ != null)
        {
            this._l1_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._l1_ = node;
    }

    public PPolarityOperator getPolarityOperator()
    {
        return this._polarityOperator_;
    }

    public void setPolarityOperator(PPolarityOperator node)
    {
        if(this._polarityOperator_ != null)
        {
            this._polarityOperator_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._polarityOperator_ = node;
    }

    public TTSg getTSg()
    {
        return this._tSg_;
    }

    public void setTSg(TTSg node)
    {
        if(this._tSg_ != null)
        {
            this._tSg_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._tSg_ = node;
    }

    public PListOfPathDescriptors getL2()
    {
        return this._l2_;
    }

    public void setL2(PListOfPathDescriptors node)
    {
        if(this._l2_ != null)
        {
            this._l2_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._l2_ = node;
    }

    public TTRparen getTRparen()
    {
        return this._tRparen_;
    }

    public void setTRparen(TTRparen node)
    {
        if(this._tRparen_ != null)
        {
            this._tRparen_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._tRparen_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._tLparen_)
            + toString(this._l1_)
            + toString(this._polarityOperator_)
            + toString(this._tSg_)
            + toString(this._l2_)
            + toString(this._tRparen_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._tLparen_ == child)
        {
            this._tLparen_ = null;
            return;
        }

        if(this._l1_ == child)
        {
            this._l1_ = null;
            return;
        }

        if(this._polarityOperator_ == child)
        {
            this._polarityOperator_ = null;
            return;
        }

        if(this._tSg_ == child)
        {
            this._tSg_ = null;
            return;
        }

        if(this._l2_ == child)
        {
            this._l2_ = null;
            return;
        }

        if(this._tRparen_ == child)
        {
            this._tRparen_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._tLparen_ == oldChild)
        {
            setTLparen((TTLparen) newChild);
            return;
        }

        if(this._l1_ == oldChild)
        {
            setL1((PListOfPathDescriptors) newChild);
            return;
        }

        if(this._polarityOperator_ == oldChild)
        {
            setPolarityOperator((PPolarityOperator) newChild);
            return;
        }

        if(this._tSg_ == oldChild)
        {
            setTSg((TTSg) newChild);
            return;
        }

        if(this._l2_ == oldChild)
        {
            setL2((PListOfPathDescriptors) newChild);
            return;
        }

        if(this._tRparen_ == oldChild)
        {
            setTRparen((TTRparen) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
