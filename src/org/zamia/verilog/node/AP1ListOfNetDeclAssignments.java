/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.zamia.verilog.node;

import org.zamia.verilog.analysis.*;

@SuppressWarnings("nls")
public final class AP1ListOfNetDeclAssignments extends PListOfNetDeclAssignments
{
    private PListOfNetDeclAssignments _listOfNetDeclAssignments_;
    private TTComma _tComma_;
    private PNetDeclAssignment _netDeclAssignment_;

    public AP1ListOfNetDeclAssignments()
    {
        // Constructor
    }

    public AP1ListOfNetDeclAssignments(
        @SuppressWarnings("hiding") PListOfNetDeclAssignments _listOfNetDeclAssignments_,
        @SuppressWarnings("hiding") TTComma _tComma_,
        @SuppressWarnings("hiding") PNetDeclAssignment _netDeclAssignment_)
    {
        // Constructor
        setListOfNetDeclAssignments(_listOfNetDeclAssignments_);

        setTComma(_tComma_);

        setNetDeclAssignment(_netDeclAssignment_);

    }

    @Override
    public Object clone()
    {
        return new AP1ListOfNetDeclAssignments(
            cloneNode(this._listOfNetDeclAssignments_),
            cloneNode(this._tComma_),
            cloneNode(this._netDeclAssignment_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAP1ListOfNetDeclAssignments(this);
    }

    public PListOfNetDeclAssignments getListOfNetDeclAssignments()
    {
        return this._listOfNetDeclAssignments_;
    }

    public void setListOfNetDeclAssignments(PListOfNetDeclAssignments node)
    {
        if(this._listOfNetDeclAssignments_ != null)
        {
            this._listOfNetDeclAssignments_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._listOfNetDeclAssignments_ = node;
    }

    public TTComma getTComma()
    {
        return this._tComma_;
    }

    public void setTComma(TTComma node)
    {
        if(this._tComma_ != null)
        {
            this._tComma_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._tComma_ = node;
    }

    public PNetDeclAssignment getNetDeclAssignment()
    {
        return this._netDeclAssignment_;
    }

    public void setNetDeclAssignment(PNetDeclAssignment node)
    {
        if(this._netDeclAssignment_ != null)
        {
            this._netDeclAssignment_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._netDeclAssignment_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._listOfNetDeclAssignments_)
            + toString(this._tComma_)
            + toString(this._netDeclAssignment_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._listOfNetDeclAssignments_ == child)
        {
            this._listOfNetDeclAssignments_ = null;
            return;
        }

        if(this._tComma_ == child)
        {
            this._tComma_ = null;
            return;
        }

        if(this._netDeclAssignment_ == child)
        {
            this._netDeclAssignment_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._listOfNetDeclAssignments_ == oldChild)
        {
            setListOfNetDeclAssignments((PListOfNetDeclAssignments) newChild);
            return;
        }

        if(this._tComma_ == oldChild)
        {
            setTComma((TTComma) newChild);
            return;
        }

        if(this._netDeclAssignment_ == oldChild)
        {
            setNetDeclAssignment((PNetDeclAssignment) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
