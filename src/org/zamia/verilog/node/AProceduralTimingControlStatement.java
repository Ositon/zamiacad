/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.zamia.verilog.node;

import org.zamia.verilog.analysis.*;

@SuppressWarnings("nls")
public final class AProceduralTimingControlStatement extends PProceduralTimingControlStatement
{
    private PProceduralTimingControl _proceduralTimingControl_;
    private PStatementOrNull _statementOrNull_;

    public AProceduralTimingControlStatement()
    {
        // Constructor
    }

    public AProceduralTimingControlStatement(
        @SuppressWarnings("hiding") PProceduralTimingControl _proceduralTimingControl_,
        @SuppressWarnings("hiding") PStatementOrNull _statementOrNull_)
    {
        // Constructor
        setProceduralTimingControl(_proceduralTimingControl_);

        setStatementOrNull(_statementOrNull_);

    }

    @Override
    public Object clone()
    {
        return new AProceduralTimingControlStatement(
            cloneNode(this._proceduralTimingControl_),
            cloneNode(this._statementOrNull_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAProceduralTimingControlStatement(this);
    }

    public PProceduralTimingControl getProceduralTimingControl()
    {
        return this._proceduralTimingControl_;
    }

    public void setProceduralTimingControl(PProceduralTimingControl node)
    {
        if(this._proceduralTimingControl_ != null)
        {
            this._proceduralTimingControl_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._proceduralTimingControl_ = node;
    }

    public PStatementOrNull getStatementOrNull()
    {
        return this._statementOrNull_;
    }

    public void setStatementOrNull(PStatementOrNull node)
    {
        if(this._statementOrNull_ != null)
        {
            this._statementOrNull_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._statementOrNull_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._proceduralTimingControl_)
            + toString(this._statementOrNull_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._proceduralTimingControl_ == child)
        {
            this._proceduralTimingControl_ = null;
            return;
        }

        if(this._statementOrNull_ == child)
        {
            this._statementOrNull_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._proceduralTimingControl_ == oldChild)
        {
            setProceduralTimingControl((PProceduralTimingControl) newChild);
            return;
        }

        if(this._statementOrNull_ == oldChild)
        {
            setStatementOrNull((PStatementOrNull) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
