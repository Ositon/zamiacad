/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.zamia.verilog.node;

import java.util.*;
import org.zamia.verilog.analysis.*;

@SuppressWarnings("nls")
public final class AModuleDeclaration extends PModuleDeclaration
{
    private PModuleKeyword _moduleKeyword_;
    private PIdentifier _identifier_;
    private PModuleParameterPortList _moduleParameterPortList_;
    private PListOfPortDeclarations _listOfPortDeclarations_;
    private TTSemicolon _tSemicolon_;
    private final LinkedList<PModuleItem> _moduleItem_ = new LinkedList<PModuleItem>();
    private TKEndmodule _kEndmodule_;

    public AModuleDeclaration()
    {
        // Constructor
    }

    public AModuleDeclaration(
        @SuppressWarnings("hiding") PModuleKeyword _moduleKeyword_,
        @SuppressWarnings("hiding") PIdentifier _identifier_,
        @SuppressWarnings("hiding") PModuleParameterPortList _moduleParameterPortList_,
        @SuppressWarnings("hiding") PListOfPortDeclarations _listOfPortDeclarations_,
        @SuppressWarnings("hiding") TTSemicolon _tSemicolon_,
        @SuppressWarnings("hiding") List<PModuleItem> _moduleItem_,
        @SuppressWarnings("hiding") TKEndmodule _kEndmodule_)
    {
        // Constructor
        setModuleKeyword(_moduleKeyword_);

        setIdentifier(_identifier_);

        setModuleParameterPortList(_moduleParameterPortList_);

        setListOfPortDeclarations(_listOfPortDeclarations_);

        setTSemicolon(_tSemicolon_);

        setModuleItem(_moduleItem_);

        setKEndmodule(_kEndmodule_);

    }

    @Override
    public Object clone()
    {
        return new AModuleDeclaration(
            cloneNode(this._moduleKeyword_),
            cloneNode(this._identifier_),
            cloneNode(this._moduleParameterPortList_),
            cloneNode(this._listOfPortDeclarations_),
            cloneNode(this._tSemicolon_),
            cloneList(this._moduleItem_),
            cloneNode(this._kEndmodule_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAModuleDeclaration(this);
    }

    public PModuleKeyword getModuleKeyword()
    {
        return this._moduleKeyword_;
    }

    public void setModuleKeyword(PModuleKeyword node)
    {
        if(this._moduleKeyword_ != null)
        {
            this._moduleKeyword_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._moduleKeyword_ = node;
    }

    public PIdentifier getIdentifier()
    {
        return this._identifier_;
    }

    public void setIdentifier(PIdentifier node)
    {
        if(this._identifier_ != null)
        {
            this._identifier_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._identifier_ = node;
    }

    public PModuleParameterPortList getModuleParameterPortList()
    {
        return this._moduleParameterPortList_;
    }

    public void setModuleParameterPortList(PModuleParameterPortList node)
    {
        if(this._moduleParameterPortList_ != null)
        {
            this._moduleParameterPortList_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._moduleParameterPortList_ = node;
    }

    public PListOfPortDeclarations getListOfPortDeclarations()
    {
        return this._listOfPortDeclarations_;
    }

    public void setListOfPortDeclarations(PListOfPortDeclarations node)
    {
        if(this._listOfPortDeclarations_ != null)
        {
            this._listOfPortDeclarations_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._listOfPortDeclarations_ = node;
    }

    public TTSemicolon getTSemicolon()
    {
        return this._tSemicolon_;
    }

    public void setTSemicolon(TTSemicolon node)
    {
        if(this._tSemicolon_ != null)
        {
            this._tSemicolon_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._tSemicolon_ = node;
    }

    public LinkedList<PModuleItem> getModuleItem()
    {
        return this._moduleItem_;
    }

    public void setModuleItem(List<PModuleItem> list)
    {
        this._moduleItem_.clear();
        this._moduleItem_.addAll(list);
        for(PModuleItem e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    public TKEndmodule getKEndmodule()
    {
        return this._kEndmodule_;
    }

    public void setKEndmodule(TKEndmodule node)
    {
        if(this._kEndmodule_ != null)
        {
            this._kEndmodule_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._kEndmodule_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._moduleKeyword_)
            + toString(this._identifier_)
            + toString(this._moduleParameterPortList_)
            + toString(this._listOfPortDeclarations_)
            + toString(this._tSemicolon_)
            + toString(this._moduleItem_)
            + toString(this._kEndmodule_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._moduleKeyword_ == child)
        {
            this._moduleKeyword_ = null;
            return;
        }

        if(this._identifier_ == child)
        {
            this._identifier_ = null;
            return;
        }

        if(this._moduleParameterPortList_ == child)
        {
            this._moduleParameterPortList_ = null;
            return;
        }

        if(this._listOfPortDeclarations_ == child)
        {
            this._listOfPortDeclarations_ = null;
            return;
        }

        if(this._tSemicolon_ == child)
        {
            this._tSemicolon_ = null;
            return;
        }

        if(this._moduleItem_.remove(child))
        {
            return;
        }

        if(this._kEndmodule_ == child)
        {
            this._kEndmodule_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._moduleKeyword_ == oldChild)
        {
            setModuleKeyword((PModuleKeyword) newChild);
            return;
        }

        if(this._identifier_ == oldChild)
        {
            setIdentifier((PIdentifier) newChild);
            return;
        }

        if(this._moduleParameterPortList_ == oldChild)
        {
            setModuleParameterPortList((PModuleParameterPortList) newChild);
            return;
        }

        if(this._listOfPortDeclarations_ == oldChild)
        {
            setListOfPortDeclarations((PListOfPortDeclarations) newChild);
            return;
        }

        if(this._tSemicolon_ == oldChild)
        {
            setTSemicolon((TTSemicolon) newChild);
            return;
        }

        for(ListIterator<PModuleItem> i = this._moduleItem_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PModuleItem) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(this._kEndmodule_ == oldChild)
        {
            setKEndmodule((TKEndmodule) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
