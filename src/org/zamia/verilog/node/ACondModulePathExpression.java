/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.zamia.verilog.node;

import org.zamia.verilog.analysis.*;

@SuppressWarnings("nls")
public final class ACondModulePathExpression extends PModulePathExpression
{
    private PModulePathConditionalExpression _modulePathConditionalExpression_;

    public ACondModulePathExpression()
    {
        // Constructor
    }

    public ACondModulePathExpression(
        @SuppressWarnings("hiding") PModulePathConditionalExpression _modulePathConditionalExpression_)
    {
        // Constructor
        setModulePathConditionalExpression(_modulePathConditionalExpression_);

    }

    @Override
    public Object clone()
    {
        return new ACondModulePathExpression(
            cloneNode(this._modulePathConditionalExpression_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseACondModulePathExpression(this);
    }

    public PModulePathConditionalExpression getModulePathConditionalExpression()
    {
        return this._modulePathConditionalExpression_;
    }

    public void setModulePathConditionalExpression(PModulePathConditionalExpression node)
    {
        if(this._modulePathConditionalExpression_ != null)
        {
            this._modulePathConditionalExpression_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._modulePathConditionalExpression_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._modulePathConditionalExpression_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._modulePathConditionalExpression_ == child)
        {
            this._modulePathConditionalExpression_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._modulePathConditionalExpression_ == oldChild)
        {
            setModulePathConditionalExpression((PModulePathConditionalExpression) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
