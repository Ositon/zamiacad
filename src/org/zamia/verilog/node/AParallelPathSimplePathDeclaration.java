/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.zamia.verilog.node;

import org.zamia.verilog.analysis.*;

@SuppressWarnings("nls")
public final class AParallelPathSimplePathDeclaration extends PSimplePathDeclaration
{
    private TTLparen _tLparen_;
    private PListOfPathDescriptors _l1_;
    private PPolarityOperator _polarityOperator_;
    private TTEg _tEg_;
    private PListOfPathDescriptors _l2_;
    private TTRparen _tRparen_;
    private TTEquals _tEquals_;
    private PPathDelayValue _pathDelayValue_;

    public AParallelPathSimplePathDeclaration()
    {
        // Constructor
    }

    public AParallelPathSimplePathDeclaration(
        @SuppressWarnings("hiding") TTLparen _tLparen_,
        @SuppressWarnings("hiding") PListOfPathDescriptors _l1_,
        @SuppressWarnings("hiding") PPolarityOperator _polarityOperator_,
        @SuppressWarnings("hiding") TTEg _tEg_,
        @SuppressWarnings("hiding") PListOfPathDescriptors _l2_,
        @SuppressWarnings("hiding") TTRparen _tRparen_,
        @SuppressWarnings("hiding") TTEquals _tEquals_,
        @SuppressWarnings("hiding") PPathDelayValue _pathDelayValue_)
    {
        // Constructor
        setTLparen(_tLparen_);

        setL1(_l1_);

        setPolarityOperator(_polarityOperator_);

        setTEg(_tEg_);

        setL2(_l2_);

        setTRparen(_tRparen_);

        setTEquals(_tEquals_);

        setPathDelayValue(_pathDelayValue_);

    }

    @Override
    public Object clone()
    {
        return new AParallelPathSimplePathDeclaration(
            cloneNode(this._tLparen_),
            cloneNode(this._l1_),
            cloneNode(this._polarityOperator_),
            cloneNode(this._tEg_),
            cloneNode(this._l2_),
            cloneNode(this._tRparen_),
            cloneNode(this._tEquals_),
            cloneNode(this._pathDelayValue_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAParallelPathSimplePathDeclaration(this);
    }

    public TTLparen getTLparen()
    {
        return this._tLparen_;
    }

    public void setTLparen(TTLparen node)
    {
        if(this._tLparen_ != null)
        {
            this._tLparen_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._tLparen_ = node;
    }

    public PListOfPathDescriptors getL1()
    {
        return this._l1_;
    }

    public void setL1(PListOfPathDescriptors node)
    {
        if(this._l1_ != null)
        {
            this._l1_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._l1_ = node;
    }

    public PPolarityOperator getPolarityOperator()
    {
        return this._polarityOperator_;
    }

    public void setPolarityOperator(PPolarityOperator node)
    {
        if(this._polarityOperator_ != null)
        {
            this._polarityOperator_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._polarityOperator_ = node;
    }

    public TTEg getTEg()
    {
        return this._tEg_;
    }

    public void setTEg(TTEg node)
    {
        if(this._tEg_ != null)
        {
            this._tEg_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._tEg_ = node;
    }

    public PListOfPathDescriptors getL2()
    {
        return this._l2_;
    }

    public void setL2(PListOfPathDescriptors node)
    {
        if(this._l2_ != null)
        {
            this._l2_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._l2_ = node;
    }

    public TTRparen getTRparen()
    {
        return this._tRparen_;
    }

    public void setTRparen(TTRparen node)
    {
        if(this._tRparen_ != null)
        {
            this._tRparen_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._tRparen_ = node;
    }

    public TTEquals getTEquals()
    {
        return this._tEquals_;
    }

    public void setTEquals(TTEquals node)
    {
        if(this._tEquals_ != null)
        {
            this._tEquals_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._tEquals_ = node;
    }

    public PPathDelayValue getPathDelayValue()
    {
        return this._pathDelayValue_;
    }

    public void setPathDelayValue(PPathDelayValue node)
    {
        if(this._pathDelayValue_ != null)
        {
            this._pathDelayValue_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._pathDelayValue_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._tLparen_)
            + toString(this._l1_)
            + toString(this._polarityOperator_)
            + toString(this._tEg_)
            + toString(this._l2_)
            + toString(this._tRparen_)
            + toString(this._tEquals_)
            + toString(this._pathDelayValue_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._tLparen_ == child)
        {
            this._tLparen_ = null;
            return;
        }

        if(this._l1_ == child)
        {
            this._l1_ = null;
            return;
        }

        if(this._polarityOperator_ == child)
        {
            this._polarityOperator_ = null;
            return;
        }

        if(this._tEg_ == child)
        {
            this._tEg_ = null;
            return;
        }

        if(this._l2_ == child)
        {
            this._l2_ = null;
            return;
        }

        if(this._tRparen_ == child)
        {
            this._tRparen_ = null;
            return;
        }

        if(this._tEquals_ == child)
        {
            this._tEquals_ = null;
            return;
        }

        if(this._pathDelayValue_ == child)
        {
            this._pathDelayValue_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._tLparen_ == oldChild)
        {
            setTLparen((TTLparen) newChild);
            return;
        }

        if(this._l1_ == oldChild)
        {
            setL1((PListOfPathDescriptors) newChild);
            return;
        }

        if(this._polarityOperator_ == oldChild)
        {
            setPolarityOperator((PPolarityOperator) newChild);
            return;
        }

        if(this._tEg_ == oldChild)
        {
            setTEg((TTEg) newChild);
            return;
        }

        if(this._l2_ == oldChild)
        {
            setL2((PListOfPathDescriptors) newChild);
            return;
        }

        if(this._tRparen_ == oldChild)
        {
            setTRparen((TTRparen) newChild);
            return;
        }

        if(this._tEquals_ == oldChild)
        {
            setTEquals((TTEquals) newChild);
            return;
        }

        if(this._pathDelayValue_ == oldChild)
        {
            setPathDelayValue((PPathDelayValue) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
