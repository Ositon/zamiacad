/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.zamia.verilog.node;

import org.zamia.verilog.analysis.*;

@SuppressWarnings("nls")
public final class ASpecparamDeclaration extends PSpecparamDeclaration
{
    private TKSpecparam _kSpecparam_;
    private PRange _range_;
    private PListOfSpecparamAssignments _listOfSpecparamAssignments_;
    private TTSemicolon _tSemicolon_;

    public ASpecparamDeclaration()
    {
        // Constructor
    }

    public ASpecparamDeclaration(
        @SuppressWarnings("hiding") TKSpecparam _kSpecparam_,
        @SuppressWarnings("hiding") PRange _range_,
        @SuppressWarnings("hiding") PListOfSpecparamAssignments _listOfSpecparamAssignments_,
        @SuppressWarnings("hiding") TTSemicolon _tSemicolon_)
    {
        // Constructor
        setKSpecparam(_kSpecparam_);

        setRange(_range_);

        setListOfSpecparamAssignments(_listOfSpecparamAssignments_);

        setTSemicolon(_tSemicolon_);

    }

    @Override
    public Object clone()
    {
        return new ASpecparamDeclaration(
            cloneNode(this._kSpecparam_),
            cloneNode(this._range_),
            cloneNode(this._listOfSpecparamAssignments_),
            cloneNode(this._tSemicolon_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseASpecparamDeclaration(this);
    }

    public TKSpecparam getKSpecparam()
    {
        return this._kSpecparam_;
    }

    public void setKSpecparam(TKSpecparam node)
    {
        if(this._kSpecparam_ != null)
        {
            this._kSpecparam_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._kSpecparam_ = node;
    }

    public PRange getRange()
    {
        return this._range_;
    }

    public void setRange(PRange node)
    {
        if(this._range_ != null)
        {
            this._range_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._range_ = node;
    }

    public PListOfSpecparamAssignments getListOfSpecparamAssignments()
    {
        return this._listOfSpecparamAssignments_;
    }

    public void setListOfSpecparamAssignments(PListOfSpecparamAssignments node)
    {
        if(this._listOfSpecparamAssignments_ != null)
        {
            this._listOfSpecparamAssignments_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._listOfSpecparamAssignments_ = node;
    }

    public TTSemicolon getTSemicolon()
    {
        return this._tSemicolon_;
    }

    public void setTSemicolon(TTSemicolon node)
    {
        if(this._tSemicolon_ != null)
        {
            this._tSemicolon_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._tSemicolon_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._kSpecparam_)
            + toString(this._range_)
            + toString(this._listOfSpecparamAssignments_)
            + toString(this._tSemicolon_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._kSpecparam_ == child)
        {
            this._kSpecparam_ = null;
            return;
        }

        if(this._range_ == child)
        {
            this._range_ = null;
            return;
        }

        if(this._listOfSpecparamAssignments_ == child)
        {
            this._listOfSpecparamAssignments_ = null;
            return;
        }

        if(this._tSemicolon_ == child)
        {
            this._tSemicolon_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._kSpecparam_ == oldChild)
        {
            setKSpecparam((TKSpecparam) newChild);
            return;
        }

        if(this._range_ == oldChild)
        {
            setRange((PRange) newChild);
            return;
        }

        if(this._listOfSpecparamAssignments_ == oldChild)
        {
            setListOfSpecparamAssignments((PListOfSpecparamAssignments) newChild);
            return;
        }

        if(this._tSemicolon_ == oldChild)
        {
            setTSemicolon((TTSemicolon) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
