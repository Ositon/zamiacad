/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.zamia.verilog.node;

import java.util.*;
import org.zamia.verilog.analysis.*;

@SuppressWarnings("nls")
public final class AModulePathConcatenation extends PModulePathConcatenation
{
    private TTLbrace _tLbrace_;
    private PModulePathExpression _modulePathExpression_;
    private final LinkedList<PModulePathConcatenationRep> _modulePathConcatenationRep_ = new LinkedList<PModulePathConcatenationRep>();
    private TTRbrace _tRbrace_;

    public AModulePathConcatenation()
    {
        // Constructor
    }

    public AModulePathConcatenation(
        @SuppressWarnings("hiding") TTLbrace _tLbrace_,
        @SuppressWarnings("hiding") PModulePathExpression _modulePathExpression_,
        @SuppressWarnings("hiding") List<PModulePathConcatenationRep> _modulePathConcatenationRep_,
        @SuppressWarnings("hiding") TTRbrace _tRbrace_)
    {
        // Constructor
        setTLbrace(_tLbrace_);

        setModulePathExpression(_modulePathExpression_);

        setModulePathConcatenationRep(_modulePathConcatenationRep_);

        setTRbrace(_tRbrace_);

    }

    @Override
    public Object clone()
    {
        return new AModulePathConcatenation(
            cloneNode(this._tLbrace_),
            cloneNode(this._modulePathExpression_),
            cloneList(this._modulePathConcatenationRep_),
            cloneNode(this._tRbrace_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAModulePathConcatenation(this);
    }

    public TTLbrace getTLbrace()
    {
        return this._tLbrace_;
    }

    public void setTLbrace(TTLbrace node)
    {
        if(this._tLbrace_ != null)
        {
            this._tLbrace_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._tLbrace_ = node;
    }

    public PModulePathExpression getModulePathExpression()
    {
        return this._modulePathExpression_;
    }

    public void setModulePathExpression(PModulePathExpression node)
    {
        if(this._modulePathExpression_ != null)
        {
            this._modulePathExpression_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._modulePathExpression_ = node;
    }

    public LinkedList<PModulePathConcatenationRep> getModulePathConcatenationRep()
    {
        return this._modulePathConcatenationRep_;
    }

    public void setModulePathConcatenationRep(List<PModulePathConcatenationRep> list)
    {
        this._modulePathConcatenationRep_.clear();
        this._modulePathConcatenationRep_.addAll(list);
        for(PModulePathConcatenationRep e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    public TTRbrace getTRbrace()
    {
        return this._tRbrace_;
    }

    public void setTRbrace(TTRbrace node)
    {
        if(this._tRbrace_ != null)
        {
            this._tRbrace_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._tRbrace_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._tLbrace_)
            + toString(this._modulePathExpression_)
            + toString(this._modulePathConcatenationRep_)
            + toString(this._tRbrace_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._tLbrace_ == child)
        {
            this._tLbrace_ = null;
            return;
        }

        if(this._modulePathExpression_ == child)
        {
            this._modulePathExpression_ = null;
            return;
        }

        if(this._modulePathConcatenationRep_.remove(child))
        {
            return;
        }

        if(this._tRbrace_ == child)
        {
            this._tRbrace_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._tLbrace_ == oldChild)
        {
            setTLbrace((TTLbrace) newChild);
            return;
        }

        if(this._modulePathExpression_ == oldChild)
        {
            setModulePathExpression((PModulePathExpression) newChild);
            return;
        }

        for(ListIterator<PModulePathConcatenationRep> i = this._modulePathConcatenationRep_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PModulePathConcatenationRep) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(this._tRbrace_ == oldChild)
        {
            setTRbrace((TTRbrace) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
