/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.zamia.verilog.node;

import org.zamia.verilog.analysis.*;

@SuppressWarnings("nls")
public final class AP1ListOfBlockRealIdentifiers extends PListOfBlockRealIdentifiers
{
    private PBlockRealType _blockRealType_;
    private TTComma _tComma_;
    private PListOfBlockRealIdentifiers _listOfBlockRealIdentifiers_;

    public AP1ListOfBlockRealIdentifiers()
    {
        // Constructor
    }

    public AP1ListOfBlockRealIdentifiers(
        @SuppressWarnings("hiding") PBlockRealType _blockRealType_,
        @SuppressWarnings("hiding") TTComma _tComma_,
        @SuppressWarnings("hiding") PListOfBlockRealIdentifiers _listOfBlockRealIdentifiers_)
    {
        // Constructor
        setBlockRealType(_blockRealType_);

        setTComma(_tComma_);

        setListOfBlockRealIdentifiers(_listOfBlockRealIdentifiers_);

    }

    @Override
    public Object clone()
    {
        return new AP1ListOfBlockRealIdentifiers(
            cloneNode(this._blockRealType_),
            cloneNode(this._tComma_),
            cloneNode(this._listOfBlockRealIdentifiers_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAP1ListOfBlockRealIdentifiers(this);
    }

    public PBlockRealType getBlockRealType()
    {
        return this._blockRealType_;
    }

    public void setBlockRealType(PBlockRealType node)
    {
        if(this._blockRealType_ != null)
        {
            this._blockRealType_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._blockRealType_ = node;
    }

    public TTComma getTComma()
    {
        return this._tComma_;
    }

    public void setTComma(TTComma node)
    {
        if(this._tComma_ != null)
        {
            this._tComma_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._tComma_ = node;
    }

    public PListOfBlockRealIdentifiers getListOfBlockRealIdentifiers()
    {
        return this._listOfBlockRealIdentifiers_;
    }

    public void setListOfBlockRealIdentifiers(PListOfBlockRealIdentifiers node)
    {
        if(this._listOfBlockRealIdentifiers_ != null)
        {
            this._listOfBlockRealIdentifiers_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._listOfBlockRealIdentifiers_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._blockRealType_)
            + toString(this._tComma_)
            + toString(this._listOfBlockRealIdentifiers_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._blockRealType_ == child)
        {
            this._blockRealType_ = null;
            return;
        }

        if(this._tComma_ == child)
        {
            this._tComma_ = null;
            return;
        }

        if(this._listOfBlockRealIdentifiers_ == child)
        {
            this._listOfBlockRealIdentifiers_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._blockRealType_ == oldChild)
        {
            setBlockRealType((PBlockRealType) newChild);
            return;
        }

        if(this._tComma_ == oldChild)
        {
            setTComma((TTComma) newChild);
            return;
        }

        if(this._listOfBlockRealIdentifiers_ == oldChild)
        {
            setListOfBlockRealIdentifiers((PListOfBlockRealIdentifiers) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
