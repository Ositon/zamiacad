/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.zamia.verilog.node;

import org.zamia.verilog.analysis.*;

@SuppressWarnings("nls")
public final class AP1ParameterDeclaration extends PParameterDeclaration
{
    private TKParameter _kParameter_;
    private PParameterType _parameterType_;
    private PListOfParamAssignments _listOfParamAssignments_;

    public AP1ParameterDeclaration()
    {
        // Constructor
    }

    public AP1ParameterDeclaration(
        @SuppressWarnings("hiding") TKParameter _kParameter_,
        @SuppressWarnings("hiding") PParameterType _parameterType_,
        @SuppressWarnings("hiding") PListOfParamAssignments _listOfParamAssignments_)
    {
        // Constructor
        setKParameter(_kParameter_);

        setParameterType(_parameterType_);

        setListOfParamAssignments(_listOfParamAssignments_);

    }

    @Override
    public Object clone()
    {
        return new AP1ParameterDeclaration(
            cloneNode(this._kParameter_),
            cloneNode(this._parameterType_),
            cloneNode(this._listOfParamAssignments_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAP1ParameterDeclaration(this);
    }

    public TKParameter getKParameter()
    {
        return this._kParameter_;
    }

    public void setKParameter(TKParameter node)
    {
        if(this._kParameter_ != null)
        {
            this._kParameter_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._kParameter_ = node;
    }

    public PParameterType getParameterType()
    {
        return this._parameterType_;
    }

    public void setParameterType(PParameterType node)
    {
        if(this._parameterType_ != null)
        {
            this._parameterType_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._parameterType_ = node;
    }

    public PListOfParamAssignments getListOfParamAssignments()
    {
        return this._listOfParamAssignments_;
    }

    public void setListOfParamAssignments(PListOfParamAssignments node)
    {
        if(this._listOfParamAssignments_ != null)
        {
            this._listOfParamAssignments_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._listOfParamAssignments_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._kParameter_)
            + toString(this._parameterType_)
            + toString(this._listOfParamAssignments_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._kParameter_ == child)
        {
            this._kParameter_ = null;
            return;
        }

        if(this._parameterType_ == child)
        {
            this._parameterType_ = null;
            return;
        }

        if(this._listOfParamAssignments_ == child)
        {
            this._listOfParamAssignments_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._kParameter_ == oldChild)
        {
            setKParameter((TKParameter) newChild);
            return;
        }

        if(this._parameterType_ == oldChild)
        {
            setParameterType((PParameterType) newChild);
            return;
        }

        if(this._listOfParamAssignments_ == oldChild)
        {
            setListOfParamAssignments((PListOfParamAssignments) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
