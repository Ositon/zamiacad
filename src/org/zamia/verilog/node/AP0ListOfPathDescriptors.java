/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.zamia.verilog.node;

import org.zamia.verilog.analysis.*;

@SuppressWarnings("nls")
public final class AP0ListOfPathDescriptors extends PListOfPathDescriptors
{
    private PSpecifyTerminalDescriptor _specifyTerminalDescriptor_;
    private TTComma _tComma_;
    private PListOfPathDescriptors _listOfPathDescriptors_;

    public AP0ListOfPathDescriptors()
    {
        // Constructor
    }

    public AP0ListOfPathDescriptors(
        @SuppressWarnings("hiding") PSpecifyTerminalDescriptor _specifyTerminalDescriptor_,
        @SuppressWarnings("hiding") TTComma _tComma_,
        @SuppressWarnings("hiding") PListOfPathDescriptors _listOfPathDescriptors_)
    {
        // Constructor
        setSpecifyTerminalDescriptor(_specifyTerminalDescriptor_);

        setTComma(_tComma_);

        setListOfPathDescriptors(_listOfPathDescriptors_);

    }

    @Override
    public Object clone()
    {
        return new AP0ListOfPathDescriptors(
            cloneNode(this._specifyTerminalDescriptor_),
            cloneNode(this._tComma_),
            cloneNode(this._listOfPathDescriptors_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAP0ListOfPathDescriptors(this);
    }

    public PSpecifyTerminalDescriptor getSpecifyTerminalDescriptor()
    {
        return this._specifyTerminalDescriptor_;
    }

    public void setSpecifyTerminalDescriptor(PSpecifyTerminalDescriptor node)
    {
        if(this._specifyTerminalDescriptor_ != null)
        {
            this._specifyTerminalDescriptor_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._specifyTerminalDescriptor_ = node;
    }

    public TTComma getTComma()
    {
        return this._tComma_;
    }

    public void setTComma(TTComma node)
    {
        if(this._tComma_ != null)
        {
            this._tComma_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._tComma_ = node;
    }

    public PListOfPathDescriptors getListOfPathDescriptors()
    {
        return this._listOfPathDescriptors_;
    }

    public void setListOfPathDescriptors(PListOfPathDescriptors node)
    {
        if(this._listOfPathDescriptors_ != null)
        {
            this._listOfPathDescriptors_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._listOfPathDescriptors_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._specifyTerminalDescriptor_)
            + toString(this._tComma_)
            + toString(this._listOfPathDescriptors_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._specifyTerminalDescriptor_ == child)
        {
            this._specifyTerminalDescriptor_ = null;
            return;
        }

        if(this._tComma_ == child)
        {
            this._tComma_ = null;
            return;
        }

        if(this._listOfPathDescriptors_ == child)
        {
            this._listOfPathDescriptors_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._specifyTerminalDescriptor_ == oldChild)
        {
            setSpecifyTerminalDescriptor((PSpecifyTerminalDescriptor) newChild);
            return;
        }

        if(this._tComma_ == oldChild)
        {
            setTComma((TTComma) newChild);
            return;
        }

        if(this._listOfPathDescriptors_ == oldChild)
        {
            setListOfPathDescriptors((PListOfPathDescriptors) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
