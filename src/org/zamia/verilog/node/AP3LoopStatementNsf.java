/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.zamia.verilog.node;

import org.zamia.verilog.analysis.*;

@SuppressWarnings("nls")
public final class AP3LoopStatementNsf extends PLoopStatementNsf
{
    private TKFor _kFor_;
    private TTLparen _tLparen_;
    private PAssignment _a1_;
    private TTSemicolon _c1_;
    private PExpression _expression_;
    private TTSemicolon _c2_;
    private PAssignment _a2_;
    private TTRparen _tRparen_;
    private PStatementNoShortIf _statementNoShortIf_;

    public AP3LoopStatementNsf()
    {
        // Constructor
    }

    public AP3LoopStatementNsf(
        @SuppressWarnings("hiding") TKFor _kFor_,
        @SuppressWarnings("hiding") TTLparen _tLparen_,
        @SuppressWarnings("hiding") PAssignment _a1_,
        @SuppressWarnings("hiding") TTSemicolon _c1_,
        @SuppressWarnings("hiding") PExpression _expression_,
        @SuppressWarnings("hiding") TTSemicolon _c2_,
        @SuppressWarnings("hiding") PAssignment _a2_,
        @SuppressWarnings("hiding") TTRparen _tRparen_,
        @SuppressWarnings("hiding") PStatementNoShortIf _statementNoShortIf_)
    {
        // Constructor
        setKFor(_kFor_);

        setTLparen(_tLparen_);

        setA1(_a1_);

        setC1(_c1_);

        setExpression(_expression_);

        setC2(_c2_);

        setA2(_a2_);

        setTRparen(_tRparen_);

        setStatementNoShortIf(_statementNoShortIf_);

    }

    @Override
    public Object clone()
    {
        return new AP3LoopStatementNsf(
            cloneNode(this._kFor_),
            cloneNode(this._tLparen_),
            cloneNode(this._a1_),
            cloneNode(this._c1_),
            cloneNode(this._expression_),
            cloneNode(this._c2_),
            cloneNode(this._a2_),
            cloneNode(this._tRparen_),
            cloneNode(this._statementNoShortIf_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAP3LoopStatementNsf(this);
    }

    public TKFor getKFor()
    {
        return this._kFor_;
    }

    public void setKFor(TKFor node)
    {
        if(this._kFor_ != null)
        {
            this._kFor_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._kFor_ = node;
    }

    public TTLparen getTLparen()
    {
        return this._tLparen_;
    }

    public void setTLparen(TTLparen node)
    {
        if(this._tLparen_ != null)
        {
            this._tLparen_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._tLparen_ = node;
    }

    public PAssignment getA1()
    {
        return this._a1_;
    }

    public void setA1(PAssignment node)
    {
        if(this._a1_ != null)
        {
            this._a1_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._a1_ = node;
    }

    public TTSemicolon getC1()
    {
        return this._c1_;
    }

    public void setC1(TTSemicolon node)
    {
        if(this._c1_ != null)
        {
            this._c1_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._c1_ = node;
    }

    public PExpression getExpression()
    {
        return this._expression_;
    }

    public void setExpression(PExpression node)
    {
        if(this._expression_ != null)
        {
            this._expression_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._expression_ = node;
    }

    public TTSemicolon getC2()
    {
        return this._c2_;
    }

    public void setC2(TTSemicolon node)
    {
        if(this._c2_ != null)
        {
            this._c2_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._c2_ = node;
    }

    public PAssignment getA2()
    {
        return this._a2_;
    }

    public void setA2(PAssignment node)
    {
        if(this._a2_ != null)
        {
            this._a2_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._a2_ = node;
    }

    public TTRparen getTRparen()
    {
        return this._tRparen_;
    }

    public void setTRparen(TTRparen node)
    {
        if(this._tRparen_ != null)
        {
            this._tRparen_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._tRparen_ = node;
    }

    public PStatementNoShortIf getStatementNoShortIf()
    {
        return this._statementNoShortIf_;
    }

    public void setStatementNoShortIf(PStatementNoShortIf node)
    {
        if(this._statementNoShortIf_ != null)
        {
            this._statementNoShortIf_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._statementNoShortIf_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._kFor_)
            + toString(this._tLparen_)
            + toString(this._a1_)
            + toString(this._c1_)
            + toString(this._expression_)
            + toString(this._c2_)
            + toString(this._a2_)
            + toString(this._tRparen_)
            + toString(this._statementNoShortIf_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._kFor_ == child)
        {
            this._kFor_ = null;
            return;
        }

        if(this._tLparen_ == child)
        {
            this._tLparen_ = null;
            return;
        }

        if(this._a1_ == child)
        {
            this._a1_ = null;
            return;
        }

        if(this._c1_ == child)
        {
            this._c1_ = null;
            return;
        }

        if(this._expression_ == child)
        {
            this._expression_ = null;
            return;
        }

        if(this._c2_ == child)
        {
            this._c2_ = null;
            return;
        }

        if(this._a2_ == child)
        {
            this._a2_ = null;
            return;
        }

        if(this._tRparen_ == child)
        {
            this._tRparen_ = null;
            return;
        }

        if(this._statementNoShortIf_ == child)
        {
            this._statementNoShortIf_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._kFor_ == oldChild)
        {
            setKFor((TKFor) newChild);
            return;
        }

        if(this._tLparen_ == oldChild)
        {
            setTLparen((TTLparen) newChild);
            return;
        }

        if(this._a1_ == oldChild)
        {
            setA1((PAssignment) newChild);
            return;
        }

        if(this._c1_ == oldChild)
        {
            setC1((TTSemicolon) newChild);
            return;
        }

        if(this._expression_ == oldChild)
        {
            setExpression((PExpression) newChild);
            return;
        }

        if(this._c2_ == oldChild)
        {
            setC2((TTSemicolon) newChild);
            return;
        }

        if(this._a2_ == oldChild)
        {
            setA2((PAssignment) newChild);
            return;
        }

        if(this._tRparen_ == oldChild)
        {
            setTRparen((TTRparen) newChild);
            return;
        }

        if(this._statementNoShortIf_ == oldChild)
        {
            setStatementNoShortIf((PStatementNoShortIf) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
