/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.zamia.verilog.node;

import org.zamia.verilog.analysis.*;

@SuppressWarnings("nls")
public final class AP2EventExpression extends PEventExpression
{
    private PEventExpressionTerm _eventExpressionTerm_;
    private TTComma _tComma_;
    private PEventExpression _eventExpression_;

    public AP2EventExpression()
    {
        // Constructor
    }

    public AP2EventExpression(
        @SuppressWarnings("hiding") PEventExpressionTerm _eventExpressionTerm_,
        @SuppressWarnings("hiding") TTComma _tComma_,
        @SuppressWarnings("hiding") PEventExpression _eventExpression_)
    {
        // Constructor
        setEventExpressionTerm(_eventExpressionTerm_);

        setTComma(_tComma_);

        setEventExpression(_eventExpression_);

    }

    @Override
    public Object clone()
    {
        return new AP2EventExpression(
            cloneNode(this._eventExpressionTerm_),
            cloneNode(this._tComma_),
            cloneNode(this._eventExpression_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAP2EventExpression(this);
    }

    public PEventExpressionTerm getEventExpressionTerm()
    {
        return this._eventExpressionTerm_;
    }

    public void setEventExpressionTerm(PEventExpressionTerm node)
    {
        if(this._eventExpressionTerm_ != null)
        {
            this._eventExpressionTerm_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._eventExpressionTerm_ = node;
    }

    public TTComma getTComma()
    {
        return this._tComma_;
    }

    public void setTComma(TTComma node)
    {
        if(this._tComma_ != null)
        {
            this._tComma_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._tComma_ = node;
    }

    public PEventExpression getEventExpression()
    {
        return this._eventExpression_;
    }

    public void setEventExpression(PEventExpression node)
    {
        if(this._eventExpression_ != null)
        {
            this._eventExpression_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._eventExpression_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._eventExpressionTerm_)
            + toString(this._tComma_)
            + toString(this._eventExpression_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._eventExpressionTerm_ == child)
        {
            this._eventExpressionTerm_ = null;
            return;
        }

        if(this._tComma_ == child)
        {
            this._tComma_ = null;
            return;
        }

        if(this._eventExpression_ == child)
        {
            this._eventExpression_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._eventExpressionTerm_ == oldChild)
        {
            setEventExpressionTerm((PEventExpressionTerm) newChild);
            return;
        }

        if(this._tComma_ == oldChild)
        {
            setTComma((TTComma) newChild);
            return;
        }

        if(this._eventExpression_ == oldChild)
        {
            setEventExpression((PEventExpression) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
