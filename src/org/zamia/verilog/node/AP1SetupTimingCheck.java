/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.zamia.verilog.node;

import org.zamia.verilog.analysis.*;

@SuppressWarnings("nls")
public final class AP1SetupTimingCheck extends PSetupTimingCheck
{
    private TKSsetup _kSsetup_;
    private TTLparen _tLparen_;
    private PTimingCheckEvent _e0_;
    private TTComma _c0_;
    private PTimingCheckEvent _e1_;
    private TTComma _c1_;
    private PExpression _expression_;
    private TTComma _tComma_;
    private PIdentifier _identifier_;
    private TTRparen _tRparen_;
    private TTSemicolon _tSemicolon_;

    public AP1SetupTimingCheck()
    {
        // Constructor
    }

    public AP1SetupTimingCheck(
        @SuppressWarnings("hiding") TKSsetup _kSsetup_,
        @SuppressWarnings("hiding") TTLparen _tLparen_,
        @SuppressWarnings("hiding") PTimingCheckEvent _e0_,
        @SuppressWarnings("hiding") TTComma _c0_,
        @SuppressWarnings("hiding") PTimingCheckEvent _e1_,
        @SuppressWarnings("hiding") TTComma _c1_,
        @SuppressWarnings("hiding") PExpression _expression_,
        @SuppressWarnings("hiding") TTComma _tComma_,
        @SuppressWarnings("hiding") PIdentifier _identifier_,
        @SuppressWarnings("hiding") TTRparen _tRparen_,
        @SuppressWarnings("hiding") TTSemicolon _tSemicolon_)
    {
        // Constructor
        setKSsetup(_kSsetup_);

        setTLparen(_tLparen_);

        setE0(_e0_);

        setC0(_c0_);

        setE1(_e1_);

        setC1(_c1_);

        setExpression(_expression_);

        setTComma(_tComma_);

        setIdentifier(_identifier_);

        setTRparen(_tRparen_);

        setTSemicolon(_tSemicolon_);

    }

    @Override
    public Object clone()
    {
        return new AP1SetupTimingCheck(
            cloneNode(this._kSsetup_),
            cloneNode(this._tLparen_),
            cloneNode(this._e0_),
            cloneNode(this._c0_),
            cloneNode(this._e1_),
            cloneNode(this._c1_),
            cloneNode(this._expression_),
            cloneNode(this._tComma_),
            cloneNode(this._identifier_),
            cloneNode(this._tRparen_),
            cloneNode(this._tSemicolon_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAP1SetupTimingCheck(this);
    }

    public TKSsetup getKSsetup()
    {
        return this._kSsetup_;
    }

    public void setKSsetup(TKSsetup node)
    {
        if(this._kSsetup_ != null)
        {
            this._kSsetup_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._kSsetup_ = node;
    }

    public TTLparen getTLparen()
    {
        return this._tLparen_;
    }

    public void setTLparen(TTLparen node)
    {
        if(this._tLparen_ != null)
        {
            this._tLparen_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._tLparen_ = node;
    }

    public PTimingCheckEvent getE0()
    {
        return this._e0_;
    }

    public void setE0(PTimingCheckEvent node)
    {
        if(this._e0_ != null)
        {
            this._e0_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._e0_ = node;
    }

    public TTComma getC0()
    {
        return this._c0_;
    }

    public void setC0(TTComma node)
    {
        if(this._c0_ != null)
        {
            this._c0_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._c0_ = node;
    }

    public PTimingCheckEvent getE1()
    {
        return this._e1_;
    }

    public void setE1(PTimingCheckEvent node)
    {
        if(this._e1_ != null)
        {
            this._e1_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._e1_ = node;
    }

    public TTComma getC1()
    {
        return this._c1_;
    }

    public void setC1(TTComma node)
    {
        if(this._c1_ != null)
        {
            this._c1_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._c1_ = node;
    }

    public PExpression getExpression()
    {
        return this._expression_;
    }

    public void setExpression(PExpression node)
    {
        if(this._expression_ != null)
        {
            this._expression_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._expression_ = node;
    }

    public TTComma getTComma()
    {
        return this._tComma_;
    }

    public void setTComma(TTComma node)
    {
        if(this._tComma_ != null)
        {
            this._tComma_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._tComma_ = node;
    }

    public PIdentifier getIdentifier()
    {
        return this._identifier_;
    }

    public void setIdentifier(PIdentifier node)
    {
        if(this._identifier_ != null)
        {
            this._identifier_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._identifier_ = node;
    }

    public TTRparen getTRparen()
    {
        return this._tRparen_;
    }

    public void setTRparen(TTRparen node)
    {
        if(this._tRparen_ != null)
        {
            this._tRparen_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._tRparen_ = node;
    }

    public TTSemicolon getTSemicolon()
    {
        return this._tSemicolon_;
    }

    public void setTSemicolon(TTSemicolon node)
    {
        if(this._tSemicolon_ != null)
        {
            this._tSemicolon_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._tSemicolon_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._kSsetup_)
            + toString(this._tLparen_)
            + toString(this._e0_)
            + toString(this._c0_)
            + toString(this._e1_)
            + toString(this._c1_)
            + toString(this._expression_)
            + toString(this._tComma_)
            + toString(this._identifier_)
            + toString(this._tRparen_)
            + toString(this._tSemicolon_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._kSsetup_ == child)
        {
            this._kSsetup_ = null;
            return;
        }

        if(this._tLparen_ == child)
        {
            this._tLparen_ = null;
            return;
        }

        if(this._e0_ == child)
        {
            this._e0_ = null;
            return;
        }

        if(this._c0_ == child)
        {
            this._c0_ = null;
            return;
        }

        if(this._e1_ == child)
        {
            this._e1_ = null;
            return;
        }

        if(this._c1_ == child)
        {
            this._c1_ = null;
            return;
        }

        if(this._expression_ == child)
        {
            this._expression_ = null;
            return;
        }

        if(this._tComma_ == child)
        {
            this._tComma_ = null;
            return;
        }

        if(this._identifier_ == child)
        {
            this._identifier_ = null;
            return;
        }

        if(this._tRparen_ == child)
        {
            this._tRparen_ = null;
            return;
        }

        if(this._tSemicolon_ == child)
        {
            this._tSemicolon_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._kSsetup_ == oldChild)
        {
            setKSsetup((TKSsetup) newChild);
            return;
        }

        if(this._tLparen_ == oldChild)
        {
            setTLparen((TTLparen) newChild);
            return;
        }

        if(this._e0_ == oldChild)
        {
            setE0((PTimingCheckEvent) newChild);
            return;
        }

        if(this._c0_ == oldChild)
        {
            setC0((TTComma) newChild);
            return;
        }

        if(this._e1_ == oldChild)
        {
            setE1((PTimingCheckEvent) newChild);
            return;
        }

        if(this._c1_ == oldChild)
        {
            setC1((TTComma) newChild);
            return;
        }

        if(this._expression_ == oldChild)
        {
            setExpression((PExpression) newChild);
            return;
        }

        if(this._tComma_ == oldChild)
        {
            setTComma((TTComma) newChild);
            return;
        }

        if(this._identifier_ == oldChild)
        {
            setIdentifier((PIdentifier) newChild);
            return;
        }

        if(this._tRparen_ == oldChild)
        {
            setTRparen((TTRparen) newChild);
            return;
        }

        if(this._tSemicolon_ == oldChild)
        {
            setTSemicolon((TTSemicolon) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
