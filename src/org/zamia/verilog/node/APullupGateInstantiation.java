/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.zamia.verilog.node;

import org.zamia.verilog.analysis.*;

@SuppressWarnings("nls")
public final class APullupGateInstantiation extends PGateInstantiation
{
    private TKPullup _kPullup_;
    private PPullupStrength _pullupStrength_;
    private PPullGateInstances _pullGateInstances_;
    private TTSemicolon _tSemicolon_;

    public APullupGateInstantiation()
    {
        // Constructor
    }

    public APullupGateInstantiation(
        @SuppressWarnings("hiding") TKPullup _kPullup_,
        @SuppressWarnings("hiding") PPullupStrength _pullupStrength_,
        @SuppressWarnings("hiding") PPullGateInstances _pullGateInstances_,
        @SuppressWarnings("hiding") TTSemicolon _tSemicolon_)
    {
        // Constructor
        setKPullup(_kPullup_);

        setPullupStrength(_pullupStrength_);

        setPullGateInstances(_pullGateInstances_);

        setTSemicolon(_tSemicolon_);

    }

    @Override
    public Object clone()
    {
        return new APullupGateInstantiation(
            cloneNode(this._kPullup_),
            cloneNode(this._pullupStrength_),
            cloneNode(this._pullGateInstances_),
            cloneNode(this._tSemicolon_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAPullupGateInstantiation(this);
    }

    public TKPullup getKPullup()
    {
        return this._kPullup_;
    }

    public void setKPullup(TKPullup node)
    {
        if(this._kPullup_ != null)
        {
            this._kPullup_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._kPullup_ = node;
    }

    public PPullupStrength getPullupStrength()
    {
        return this._pullupStrength_;
    }

    public void setPullupStrength(PPullupStrength node)
    {
        if(this._pullupStrength_ != null)
        {
            this._pullupStrength_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._pullupStrength_ = node;
    }

    public PPullGateInstances getPullGateInstances()
    {
        return this._pullGateInstances_;
    }

    public void setPullGateInstances(PPullGateInstances node)
    {
        if(this._pullGateInstances_ != null)
        {
            this._pullGateInstances_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._pullGateInstances_ = node;
    }

    public TTSemicolon getTSemicolon()
    {
        return this._tSemicolon_;
    }

    public void setTSemicolon(TTSemicolon node)
    {
        if(this._tSemicolon_ != null)
        {
            this._tSemicolon_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._tSemicolon_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._kPullup_)
            + toString(this._pullupStrength_)
            + toString(this._pullGateInstances_)
            + toString(this._tSemicolon_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._kPullup_ == child)
        {
            this._kPullup_ = null;
            return;
        }

        if(this._pullupStrength_ == child)
        {
            this._pullupStrength_ = null;
            return;
        }

        if(this._pullGateInstances_ == child)
        {
            this._pullGateInstances_ = null;
            return;
        }

        if(this._tSemicolon_ == child)
        {
            this._tSemicolon_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._kPullup_ == oldChild)
        {
            setKPullup((TKPullup) newChild);
            return;
        }

        if(this._pullupStrength_ == oldChild)
        {
            setPullupStrength((PPullupStrength) newChild);
            return;
        }

        if(this._pullGateInstances_ == oldChild)
        {
            setPullGateInstances((PPullGateInstances) newChild);
            return;
        }

        if(this._tSemicolon_ == oldChild)
        {
            setTSemicolon((TTSemicolon) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
