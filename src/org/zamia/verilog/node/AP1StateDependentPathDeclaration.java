/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.zamia.verilog.node;

import org.zamia.verilog.analysis.*;

@SuppressWarnings("nls")
public final class AP1StateDependentPathDeclaration extends PStateDependentPathDeclaration
{
    private TKIf _kIf_;
    private TTLparen _tLparen_;
    private PModulePathExpression _modulePathExpression_;
    private TTRparen _tRparen_;
    private PEdgeSensitivePathDeclaration _edgeSensitivePathDeclaration_;

    public AP1StateDependentPathDeclaration()
    {
        // Constructor
    }

    public AP1StateDependentPathDeclaration(
        @SuppressWarnings("hiding") TKIf _kIf_,
        @SuppressWarnings("hiding") TTLparen _tLparen_,
        @SuppressWarnings("hiding") PModulePathExpression _modulePathExpression_,
        @SuppressWarnings("hiding") TTRparen _tRparen_,
        @SuppressWarnings("hiding") PEdgeSensitivePathDeclaration _edgeSensitivePathDeclaration_)
    {
        // Constructor
        setKIf(_kIf_);

        setTLparen(_tLparen_);

        setModulePathExpression(_modulePathExpression_);

        setTRparen(_tRparen_);

        setEdgeSensitivePathDeclaration(_edgeSensitivePathDeclaration_);

    }

    @Override
    public Object clone()
    {
        return new AP1StateDependentPathDeclaration(
            cloneNode(this._kIf_),
            cloneNode(this._tLparen_),
            cloneNode(this._modulePathExpression_),
            cloneNode(this._tRparen_),
            cloneNode(this._edgeSensitivePathDeclaration_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAP1StateDependentPathDeclaration(this);
    }

    public TKIf getKIf()
    {
        return this._kIf_;
    }

    public void setKIf(TKIf node)
    {
        if(this._kIf_ != null)
        {
            this._kIf_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._kIf_ = node;
    }

    public TTLparen getTLparen()
    {
        return this._tLparen_;
    }

    public void setTLparen(TTLparen node)
    {
        if(this._tLparen_ != null)
        {
            this._tLparen_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._tLparen_ = node;
    }

    public PModulePathExpression getModulePathExpression()
    {
        return this._modulePathExpression_;
    }

    public void setModulePathExpression(PModulePathExpression node)
    {
        if(this._modulePathExpression_ != null)
        {
            this._modulePathExpression_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._modulePathExpression_ = node;
    }

    public TTRparen getTRparen()
    {
        return this._tRparen_;
    }

    public void setTRparen(TTRparen node)
    {
        if(this._tRparen_ != null)
        {
            this._tRparen_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._tRparen_ = node;
    }

    public PEdgeSensitivePathDeclaration getEdgeSensitivePathDeclaration()
    {
        return this._edgeSensitivePathDeclaration_;
    }

    public void setEdgeSensitivePathDeclaration(PEdgeSensitivePathDeclaration node)
    {
        if(this._edgeSensitivePathDeclaration_ != null)
        {
            this._edgeSensitivePathDeclaration_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._edgeSensitivePathDeclaration_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._kIf_)
            + toString(this._tLparen_)
            + toString(this._modulePathExpression_)
            + toString(this._tRparen_)
            + toString(this._edgeSensitivePathDeclaration_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._kIf_ == child)
        {
            this._kIf_ = null;
            return;
        }

        if(this._tLparen_ == child)
        {
            this._tLparen_ = null;
            return;
        }

        if(this._modulePathExpression_ == child)
        {
            this._modulePathExpression_ = null;
            return;
        }

        if(this._tRparen_ == child)
        {
            this._tRparen_ = null;
            return;
        }

        if(this._edgeSensitivePathDeclaration_ == child)
        {
            this._edgeSensitivePathDeclaration_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._kIf_ == oldChild)
        {
            setKIf((TKIf) newChild);
            return;
        }

        if(this._tLparen_ == oldChild)
        {
            setTLparen((TTLparen) newChild);
            return;
        }

        if(this._modulePathExpression_ == oldChild)
        {
            setModulePathExpression((PModulePathExpression) newChild);
            return;
        }

        if(this._tRparen_ == oldChild)
        {
            setTRparen((TTRparen) newChild);
            return;
        }

        if(this._edgeSensitivePathDeclaration_ == oldChild)
        {
            setEdgeSensitivePathDeclaration((PEdgeSensitivePathDeclaration) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
