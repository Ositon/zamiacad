/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.zamia.verilog.node;

import java.util.*;
import org.zamia.verilog.analysis.*;

@SuppressWarnings("nls")
public final class AParamsSystemFunctionCall extends PSystemFunctionCall
{
    private TSystemFunctionIdentifier _systemFunctionIdentifier_;
    private TTLparen _tLparen_;
    private PExpression _expression_;
    private final LinkedList<PSystemFunctionCallRep> _systemFunctionCallRep_ = new LinkedList<PSystemFunctionCallRep>();
    private TTRparen _tRparen_;

    public AParamsSystemFunctionCall()
    {
        // Constructor
    }

    public AParamsSystemFunctionCall(
        @SuppressWarnings("hiding") TSystemFunctionIdentifier _systemFunctionIdentifier_,
        @SuppressWarnings("hiding") TTLparen _tLparen_,
        @SuppressWarnings("hiding") PExpression _expression_,
        @SuppressWarnings("hiding") List<PSystemFunctionCallRep> _systemFunctionCallRep_,
        @SuppressWarnings("hiding") TTRparen _tRparen_)
    {
        // Constructor
        setSystemFunctionIdentifier(_systemFunctionIdentifier_);

        setTLparen(_tLparen_);

        setExpression(_expression_);

        setSystemFunctionCallRep(_systemFunctionCallRep_);

        setTRparen(_tRparen_);

    }

    @Override
    public Object clone()
    {
        return new AParamsSystemFunctionCall(
            cloneNode(this._systemFunctionIdentifier_),
            cloneNode(this._tLparen_),
            cloneNode(this._expression_),
            cloneList(this._systemFunctionCallRep_),
            cloneNode(this._tRparen_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAParamsSystemFunctionCall(this);
    }

    public TSystemFunctionIdentifier getSystemFunctionIdentifier()
    {
        return this._systemFunctionIdentifier_;
    }

    public void setSystemFunctionIdentifier(TSystemFunctionIdentifier node)
    {
        if(this._systemFunctionIdentifier_ != null)
        {
            this._systemFunctionIdentifier_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._systemFunctionIdentifier_ = node;
    }

    public TTLparen getTLparen()
    {
        return this._tLparen_;
    }

    public void setTLparen(TTLparen node)
    {
        if(this._tLparen_ != null)
        {
            this._tLparen_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._tLparen_ = node;
    }

    public PExpression getExpression()
    {
        return this._expression_;
    }

    public void setExpression(PExpression node)
    {
        if(this._expression_ != null)
        {
            this._expression_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._expression_ = node;
    }

    public LinkedList<PSystemFunctionCallRep> getSystemFunctionCallRep()
    {
        return this._systemFunctionCallRep_;
    }

    public void setSystemFunctionCallRep(List<PSystemFunctionCallRep> list)
    {
        this._systemFunctionCallRep_.clear();
        this._systemFunctionCallRep_.addAll(list);
        for(PSystemFunctionCallRep e : list)
        {
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
        }
    }

    public TTRparen getTRparen()
    {
        return this._tRparen_;
    }

    public void setTRparen(TTRparen node)
    {
        if(this._tRparen_ != null)
        {
            this._tRparen_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._tRparen_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._systemFunctionIdentifier_)
            + toString(this._tLparen_)
            + toString(this._expression_)
            + toString(this._systemFunctionCallRep_)
            + toString(this._tRparen_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._systemFunctionIdentifier_ == child)
        {
            this._systemFunctionIdentifier_ = null;
            return;
        }

        if(this._tLparen_ == child)
        {
            this._tLparen_ = null;
            return;
        }

        if(this._expression_ == child)
        {
            this._expression_ = null;
            return;
        }

        if(this._systemFunctionCallRep_.remove(child))
        {
            return;
        }

        if(this._tRparen_ == child)
        {
            this._tRparen_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._systemFunctionIdentifier_ == oldChild)
        {
            setSystemFunctionIdentifier((TSystemFunctionIdentifier) newChild);
            return;
        }

        if(this._tLparen_ == oldChild)
        {
            setTLparen((TTLparen) newChild);
            return;
        }

        if(this._expression_ == oldChild)
        {
            setExpression((PExpression) newChild);
            return;
        }

        for(ListIterator<PSystemFunctionCallRep> i = this._systemFunctionCallRep_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PSystemFunctionCallRep) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(this._tRparen_ == oldChild)
        {
            setTRparen((TTRparen) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
