/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.zamia.verilog.node;

import org.zamia.verilog.analysis.*;

@SuppressWarnings("nls")
public final class AP1NInputGateInstances extends PNInputGateInstances
{
    private PNInputGateInstance _nInputGateInstance_;
    private TTComma _tComma_;
    private PNInputGateInstances _nInputGateInstances_;

    public AP1NInputGateInstances()
    {
        // Constructor
    }

    public AP1NInputGateInstances(
        @SuppressWarnings("hiding") PNInputGateInstance _nInputGateInstance_,
        @SuppressWarnings("hiding") TTComma _tComma_,
        @SuppressWarnings("hiding") PNInputGateInstances _nInputGateInstances_)
    {
        // Constructor
        setNInputGateInstance(_nInputGateInstance_);

        setTComma(_tComma_);

        setNInputGateInstances(_nInputGateInstances_);

    }

    @Override
    public Object clone()
    {
        return new AP1NInputGateInstances(
            cloneNode(this._nInputGateInstance_),
            cloneNode(this._tComma_),
            cloneNode(this._nInputGateInstances_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAP1NInputGateInstances(this);
    }

    public PNInputGateInstance getNInputGateInstance()
    {
        return this._nInputGateInstance_;
    }

    public void setNInputGateInstance(PNInputGateInstance node)
    {
        if(this._nInputGateInstance_ != null)
        {
            this._nInputGateInstance_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._nInputGateInstance_ = node;
    }

    public TTComma getTComma()
    {
        return this._tComma_;
    }

    public void setTComma(TTComma node)
    {
        if(this._tComma_ != null)
        {
            this._tComma_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._tComma_ = node;
    }

    public PNInputGateInstances getNInputGateInstances()
    {
        return this._nInputGateInstances_;
    }

    public void setNInputGateInstances(PNInputGateInstances node)
    {
        if(this._nInputGateInstances_ != null)
        {
            this._nInputGateInstances_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._nInputGateInstances_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._nInputGateInstance_)
            + toString(this._tComma_)
            + toString(this._nInputGateInstances_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._nInputGateInstance_ == child)
        {
            this._nInputGateInstance_ = null;
            return;
        }

        if(this._tComma_ == child)
        {
            this._tComma_ = null;
            return;
        }

        if(this._nInputGateInstances_ == child)
        {
            this._nInputGateInstances_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._nInputGateInstance_ == oldChild)
        {
            setNInputGateInstance((PNInputGateInstance) newChild);
            return;
        }

        if(this._tComma_ == oldChild)
        {
            setTComma((TTComma) newChild);
            return;
        }

        if(this._nInputGateInstances_ == oldChild)
        {
            setNInputGateInstances((PNInputGateInstances) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
