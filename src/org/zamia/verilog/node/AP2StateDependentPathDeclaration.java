/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.zamia.verilog.node;

import org.zamia.verilog.analysis.*;

@SuppressWarnings("nls")
public final class AP2StateDependentPathDeclaration extends PStateDependentPathDeclaration
{
    private TKIfnone _kIfnone_;
    private PSimplePathDeclaration _simplePathDeclaration_;

    public AP2StateDependentPathDeclaration()
    {
        // Constructor
    }

    public AP2StateDependentPathDeclaration(
        @SuppressWarnings("hiding") TKIfnone _kIfnone_,
        @SuppressWarnings("hiding") PSimplePathDeclaration _simplePathDeclaration_)
    {
        // Constructor
        setKIfnone(_kIfnone_);

        setSimplePathDeclaration(_simplePathDeclaration_);

    }

    @Override
    public Object clone()
    {
        return new AP2StateDependentPathDeclaration(
            cloneNode(this._kIfnone_),
            cloneNode(this._simplePathDeclaration_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAP2StateDependentPathDeclaration(this);
    }

    public TKIfnone getKIfnone()
    {
        return this._kIfnone_;
    }

    public void setKIfnone(TKIfnone node)
    {
        if(this._kIfnone_ != null)
        {
            this._kIfnone_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._kIfnone_ = node;
    }

    public PSimplePathDeclaration getSimplePathDeclaration()
    {
        return this._simplePathDeclaration_;
    }

    public void setSimplePathDeclaration(PSimplePathDeclaration node)
    {
        if(this._simplePathDeclaration_ != null)
        {
            this._simplePathDeclaration_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._simplePathDeclaration_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._kIfnone_)
            + toString(this._simplePathDeclaration_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._kIfnone_ == child)
        {
            this._kIfnone_ = null;
            return;
        }

        if(this._simplePathDeclaration_ == child)
        {
            this._simplePathDeclaration_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._kIfnone_ == oldChild)
        {
            setKIfnone((TKIfnone) newChild);
            return;
        }

        if(this._simplePathDeclaration_ == oldChild)
        {
            setSimplePathDeclaration((PSimplePathDeclaration) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
