
options {
  STATIC = false;
  //LOOKAHEAD = 5;
  
  // DEBUG_PARSER = true;
  // CHOICE_AMBIGUITY_CHECK=3;
  IGNORE_CASE=false;
  USER_CHAR_STREAM = true;
  UNICODE_INPUT = true;
  CACHE_TOKENS = true;
}

PARSER_BEGIN(Verilog)

/* 
 * Copyright 2008 by the authors indicated in the @author tags. 
 * All rights reserved. 
 * 
 * See the LICENSE file for details.
 * 
 * 
 */

package org.zamia.verilog;

import org.zamia.*;
import org.zamia.intermediate.*;
import java.util.*;
import java.io.Reader;
import java.io.IOException;
import java.io.StringReader;
import org.zamia.intermediate.OperationMath.MathOp;
import org.zamia.intermediate.OperationCompare.CompareOp;
import org.zamia.intermediate.OperationLogic.LogicOp;
import org.zamia.intermediate.OperationLiteral.LiteralCat;
import org.zamia.rtl.RTLPort.PortDir;
import org.zamia.intermediate.InterfaceDeclaration.InterfaceKind;

/**
 * IEEE Std 1364-2005 compliant Verilog(R) parser
 *
 * @author Guenter Bartsch
 */

@SuppressWarnings("all")
public class Verilog implements IHDLCompiler {
	
	public final static boolean dump = false;
	private SourceFile sf;
	private String lib;
	public final static ZamiaLogger logger = ZamiaLogger.getInstance();
	private ZamiaProject zprj;
    private DUManager dum;
    private HashSetArray<DUUID> dus;
	private SimpleCharStream stream;
	private int priority;
	
	public Verilog() {
		this (new SimpleCharStream(new StringReader("")));
	}
	
    private long getLocation(Token token_) {
    	
    	return token_ == null ? 0 : (long) token_.beginLine | ((long) token_.beginColumn) << 32;
    }
    
    private long getLocation () {
    	Token t = getToken(0);
    	if (t.next != null)
    		t = t.next;
    	return getLocation (t);
    }
    
    
    public HashSetArray<DUUID> parse(Reader reader_, String lib_, SourceFile sf_, int priority_, ZamiaProject zprj_) throws IOException{

			logger.debug("Verilog: parsing %s, target lib : %s", sf_, lib_);
    
    		dus = new HashSetArray<DUUID>();

			zprj = zprj_;
			dum = zprj.getDUManager();    
            lib = lib_;
	    	stream = new SimpleCharStream(reader_);
	    	priority = priority_;
	    	sf = sf_;
            
            try {
		            ReInit (stream);
                    design_file ();
            } catch (ZamiaException e2) {
              dum.addError (new CompilerMsg (e2.getLocation(), e2.toString()));
            } catch (ParseException e3) {
              dum.addError (new CompilerMsg (new SourceLocation(sf, getLocation(e3.currentToken.next)), e3.getMessage()));
            } catch (TokenMgrError e4) {
              dum.addError (new CompilerMsg (new SourceLocation(sf_,e4.line,e4.col), e4.getMessage()));
            }
            //cr.setNumLines(stream.getEndLine());
            //cr.setNumChars(stream.getNumChars());
            return dus;
    }
}

PARSER_END(Verilog)

SKIP :
{
    " "
  | "\n"
  | "\r"
  | "\t"
  | "\u00a0"
  |  "//" : IN_LINE_COMMENT
  |  "/*" : IN_COMMENT
}

<IN_LINE_COMMENT> SKIP:
{
   "\n" : DEFAULT
}

<IN_LINE_COMMENT> MORE:
{
  < ~[] >
}

<IN_COMMENT> SKIP:
{
   "*/" : DEFAULT
}

<IN_COMMENT> MORE:
{
  < ~[] >
}

TOKEN [IGNORE_CASE] :
{
    <ALWAYS:            "always">
  | <AND:               "ans">
  | <ASSIGN:            "assign">
  | <BEGIN:             "begin">
  | <BUF:               "buf">
  | <BUFIF0:            "bufif0">
  | <BUFIF1:            "bufif1">
  | <CASE:              "case">
  | <CASEX:             "casex">
  | <CASEZ:             "casez">
  | <CMOS:              "cmos">
  | <DEASSIGN:          "deassign">
  | <DEFAULT:           "default">
  | <DEFPARAM:          "defparam">
  | <DISABLE:           "disable">
  | <EDGE:              "edge">
  | <ELSE:              "else">
  | <END:               "end">
  | <ENDCASE:           "endcase">
  | <ENDFUNCTION:       "endfunction">
  | <ENDMODULE:         "endmodule">
  | <ENDPRIMITIVE:      "endprimitive">
  | <ENDSPECIFY:        "endspecify">
  | <ENDTABLE:          "endtable">
  | <ENDTASK:           "endtask">
  | <EVENT:             "event">
  | <FOR:               "for">
  | <FORCE:             "force">
  | <FOREVER:           "forever">
  | <FORK:              "fork">
  | <FUNCTION:          "function">
  | <HIGHZ0:            "highz0">
  | <HIGHZ1:            "highz1">
  | <IF:                "if">
  | <INITIAL:           "initial">
  | <INOUT:             "inout">
  | <INPUT:             "input">
  | <INTEGER:           "integer">
  | <JOIN:              "join">
  | <LARGE:             "large">
  | <MACROMODULE:       "macromodule">
  | <MEDIUM:            "medium">
  | <NAND:              "nand">
  | <NEGEDGE:           "negdge">
  | <NMOS:              "nmos">
  | <NOR:               "nor">
  | <NOT:               "not">
  | <NOTIF0:            "notif0">
  | <NOTIF1:            "notif1">
  | <OR:                "or">
  | <OUTPUT:            "output">
  | <PMOS:              "pmos">
  | <POSEDGE:           "posedge">
  | <PRIMITIVE:         "primitive">
  | <PULL0:             "pull0">
  | <PULL1:             "pull1">
  | <PULLDOWN:          "pulldown">
  | <PULLUP:            "pullup">
  | <RCMOS:             "rcmos">
  | <REG:               "reg">
  | <RELEASE:           "release">
  | <REPEAT:            "repeat">
  | <RNMOS:             "rnmos">
  | <RPMOS:             "rpmos">
  | <RTRAN:             "rtran">
  | <RTRANIF0:          "rtranif0">
  | <RTRANIF1:          "rtranif1">
  | <SCALERED:          "scalered">
  | <SMALL:             "small">
  | <SPECIFY:           "specify">
  | <SPECPARAM:         "specparam">
  | <STRONG0:           "strong0">
  | <STRONG1:           "strong1">
  | <SUPPLY0:           "supply0">
  | <SUPPLY1:           "supply1">
  | <TABLE:             "table">
  | <TASK:              "task">
  | <TIME:              "time">
  | <TRAN:              "tran">
  | <TRANIF0:           "transif0">
  | <TRANIF1:           "tranif1">
  | <TRI:               "tri">
  | <TRI0:              "tri0">
  | <TRI1:              "tri1">
  | <TRIAND:            "triand">
  | <TRIOR:             "trior">
  | <VECTORED:          "vectored">
  | <WAIT:              "wait">
  | <WAND:              "wand">
  | <WEAK0:             "weak0">
  | <WEAK1:             "weak1">
  | <WHILE:             "while">
  | <WIRE:              "wire">
  | <WOR:               "wor">
  | <XNOR:              "xnor">
  | <XOR:               "xor">
}

TOKEN :
{
    <#upper_case_letter:               ["A"-"Z"]>
  | <#lower_case_letter:               ["a"-"z"]>
  | <#digit:                           ["0"-"9"]>
  | <#extended_digit:                  ["0"-"9","A"-"F"]>
  | <#special_character:               ["#","&","'","(",")","*","+",",","-",
                                        ".","/",":",";","<","=",">","[","]",
                                        "_","|"]>
  | <#other_special_character:         ["!","$","%","@","?","^","`","{","}","~"]>
  | <#graphic_character: (<upper_case_letter>
                          | <lower_case_letter>
                          | <digit>
                          | <special_character>
                          | " "
                          | "\u00a0"
                          | <basic_graphic_character>
                          | <other_special_character>)>

  | <string_literal: "\"" (<graphic_character> | "\\\"" | "\\n" | "\\t" | "\\\\" | "\\" <digit><digit><digit> )* "\"">

  | <basic_identifier: <letter> ( ("_")? <letter_or_digit> )*>
  | <extended_identifier: "\\" (<graphic_character>)*>

  | <#sized_digit : ["0"-"9", "a", "b", "c", "d", "e", "f", "x", "X", "z", "Z", "?"] >

  | <#base_specifier: ["d","h","o","b"]>
  | <base: "'" <base_specifier> >
  | <based_number: <base> <sized_digit> ("_" | <sized_digit>)* >
  | <number: <digit> ("_" | <digit>)* >
  | <sized_number:  <digit> (<digit>)* <base> <sized_digit> ("_" | <sized_digit>)* >

}

/**************************************************************
 * A.1.2 Verilog source text
 **************************************************************/

void source_text() throws ZamiaException :
{
}
{
	{
		if (dump) logger.debug ("Verilog: Compiling %s", sf.toString());
	}
	
    ( description () )* <EOF>
}

void description() :
{
}
{
	( module_declaration () | udp_declaration() | config_declaration() )
}
 
void module_declaration ():
{
}
{
	( attribute_instance() ) *
	
	( "module" | "macromodule" )
	
	identifier()
	
	[ module_parameter_port_list() ]
		
    (
		list_of_ports () ";"
		( module_item () ) *
	  
	|
	
		[ list_of_port_declarations() ] ";"
		( non_port_module_item() )*
	)
	
	"endmodule"
}

/**************************************************************
 * A.1.3 Module parameters and ports
 **************************************************************/

void module_parameter_port_list():
{
}
{
	"#" "(" parameter_declaration() ("," parameter_declaration())* ")"
}

void list_of_ports():
{
}
{
	"(" port() ("," port())* ")"
}

void list_of_port_declarations():
{
}
{
	"(" [ port_declaration() ("," port_declaration() )* ] ")"
}

void port():
{
}
{
	(
		[port_expression()]
	|
		"." identifier() "(" [ port_expression() ] ")"
	)
}
 
void port_expression():
{
}
{
	(
		port_reference()
	|
		"(" port_reference() ( "," port_reference() )* ")"
	)
}
 
void port_reference():
{
}
{
	identifier() [ "[" constant_range_expression() "]" ] 
}

void port_declaration():
{
}
{
	(attribute_instance())*
	
	(
		inout_declaration()
	| 
		input_declaration()
    | 
     	output_declaration()
	)
}

/**************************************************************
 * A.1.4 Module items
 **************************************************************/

void module_item ():
{
}
{
	(
      port_declaration() ";"
    | non_port_module_item()
    )
}

void module_or_generate_item ():
{
}
{
	( attribute_instance() )*
	
    ( module_or_generate_item_declaration()
    | local_parameter_declaration() ";"
    | parameter_override()
    | continuous_assign()
    | gate_instantiation()
    | udp_instantiation()
    | module_instantiation()
    | initial_construct()
    | always_construct()
    | loop_generate_construct()
    | conditional_generate_construct()
    )
}

void module_or_generate_item_declaration ():
{
}
{
	( net_declaration()
    | reg_declaration()
    | integer_declaration()
    | real_declaration()
    | time_declaration()
    | realtime_declaration()
    | event_declaration()
    | genvar_declaration()
    | task_declaration()
    | function_declaration()
    )
}

void non_port_module_item ():
{
}
{
	(
      module_or_generate_item()
    | generate_region()
    | specify_block()
    | ( attribute_instance() )* parameter_declaration() ";"
    | ( attribute_instance() )* specparam_declaration()
    )
}

void parameter_override (): 
{
}
{
	"defparam" list_of_defparam_assignments() ";"
}

/**************************************************************
 * A.1.5 Configuration source text
 **************************************************************/

void config_declaration ():
{
}
{
        "config" config_identifier() ";"
        design_statement()
        (config_rule_statement())*
        "endconfig"
}

void design_statement (): 
{
}
{
	"design" ( [ library_identifier() "." ] cell_identifier() )* ";"
}

void config_rule_statement ():
{
}
{
	(
        "default" liblist_clause() ";"
      | inst_clause() liblist_clause() ";"
      | inst_clause() use_clause() ";"
      | cell_clause() liblist_clause() ";"
      | cell_clause() use_clause() ";"
    )
}

void inst_clause (): 
{
}
{
	"instance" inst_name()
}

void inst_name (): 
{
}
{
	topmodule_identifier() ("." instance_identifier())*
}

void cell_clause (): 
{
}
{
	"cell" [ library_identifier() "." ] cell_identifier()
}

void liblist_clause (): 
{
}
{
	"liblist" ( library_identifier())*
}

void use_clause (): 
{
}
{
	"use" [ library_identifier() "." ] cell_identifier() [ ":" "config"] 
}

/**************************************************************
 * A.2.1.1 Module parameter declarations
 **************************************************************/
 
void local_parameter_declaration():
{
}
{
	(
		"localparam" [ "signed" ] [ range() ] list_of_param_assignments()
     | 
     	"localparam" parameter_type() list_of_param_assignments()
	)
}

void parameter_declaration():
{
}
{
	(
		"parameter" [ "signed" ] [ range() ] list_of_param_assignments()
    | 
     	"parameter" parameter_type() list_of_param_assignments()
    )
}

void specparam_declaration():
{
}
{
	"specparam" [ range() ] list_of_specparam_assignments() ";"
}

void parameter_type():
{
}
{
	(
		"integer" | "real" | "realtime" | "time"
	)
}

/**************************************************************
 * A.2.1.2 Port declarations
 **************************************************************/
 
void inout_declaration():
{
}
{
	"inout" [ net_type() ] [ "signed" ] [ range() ]
           list_of_port_identifiers()
}

void input_declaration():
{
}
{
	"input" [ net_type() ] [ "signed" ] [ range() ]
           list_of_port_identifiers()
}

void output_declaration():
{
}
{
	(
		"output" [ net_type() ] [ "signed" ] [ range() ]
           list_of_port_identifiers()
     | 
     	"output" "reg" [ "signed" ] [ range() ]
           list_of_variable_port_identifiers()
     | 
     	"output" output_variable_type()
           list_of_variable_port_identifiers()
	)
}

/**************************************************************
 * A.2.1.3 Type declarations
 **************************************************************/

void event_declaration():
{
}
{
	"event" list_of_event_identifiers() ";"
}

void integer_declaration():
{
}
{
	"integer" list_of_variable_identifiers() ";"
}

void net_declaration():
{
}
{
	(
        net_type() [ "signed" ]
             [ delay3() ] list_of_net_identifiers() ";"
      | net_type() [ drive_strength() ] [ "signed" ]
             [ delay3() ] list_of_net_decl_assignments() ";"
      | net_type() [ "vectored" | "scalared" ] [ "signed" ]
             range() [ delay3() ] list_of_net_identifiers() ";"
      | net_type() [ drive_strength() ] [ "vectored" | "scalared" ] [ "signed" ]
             range() [ delay3() ] list_of_net_decl_assignments() ";"
      | "trireg" [ charge_strength() ] [ "signed" ]
             [ delay3() ] list_of_net_identifiers() ";"
      | "trireg" [ drive_strength() ] [ "signed" ]
             [ delay3() ] list_of_net_decl_assignments() ";"
      | "trireg" [ charge_strength() ] [ "vectored" | "scalared" ] [ "signed" ]
             range() [ delay3() ] list_of_net_identifiers() ";"
      | "trireg" [ drive_strength() ] [ "vectored" | "scalared" ] [ "signed" ]
             range() [ delay3() ] list_of_net_decl_assignments() ";"
	)
}

void real_declaration():
{
}
{
	"real" list_of_real_identifiers() ";"
}

void realtime_declaration():
{
}
{
	"realtime" list_of_real_identifiers() ";"
}
void reg_declaration():
{
}
{
	"reg" [ "signed" ] [ range() ]
             list_of_variable_identifiers() ";"
}

void time_declaration():
{
}
{
	"time" list_of_variable_identifiers() ";"
}

/**************************************************************
 * A.2.2.1 Net and variable types
 **************************************************************/

void net_type():
{
}
{
	( "supply0" | "supply1" | "tri" | "triand" | "trior" | "tri0" | "tri1" | "uwire" | "wire" | "wand" | "wor" )
}

void output_variable_type():
{
}
{
	( "integer" | "time" )
}

void real_type():
{
}
{
	real_identifier()
	(
		( dimension() ) *
	| 
		"=" constant_expression()
	)
}
     
void variable_type():
{
}
{
	variable_identifier() 
	(
		( dimension() )*
	| 
		"=" constant_expression()
	)
}

/**************************************************************
 * A.2.2.2 Strengths
 **************************************************************/

void drive_strength():
{
}
{
	(
       "(" strength0() "," strength1() ")"
     | "(" strength1() "," strength0() ")"
     | "(" strength0() "," "highz1" ")"
     | "(" strength1() "," "highz0" ")"
     | "(" "highz0" "," strength1() ")"
     | "(" "highz1" "," strength0() ")"
    )
}

void strength0():
{	
}
{
	( "supply0" | "strong0" | "pull0" | "weak0" )
}

void strength1():
{
}
{
	( "supply1" | "strong1" | "pull1" | "weak1" )
}

void charge_strength():
{
}
{
	( "(" "small" ")" | "(" "medium" ")" | "(" "large" ")" )
}

/**************************************************************
 * A.2.2.3 Delays
 **************************************************************/

void delay3():
{
}
{
	 (
	 	"#" delay_value()
     | 
     	"#" "(" mintypmax_expression() [ "," mintypmax_expression() [ "," mintypmax_expression() ] ] ")"
	)
}

void delay2():
{
}
{
	(
       "#" delay_value()
     | 
     	"#" "(" mintypmax_expression() [ "," mintypmax_expression() ] ")"
    )
}

void delay_value():
{
}
{
	(
       unsigned_number()
     | real_number()
     | identifier()
     )
}

/**************************************************************
 * A.2.3 Declaration lists
 **************************************************************/

void list_of_defparam_assignments():
{
}
{
	defparam_assignment() ( "," defparam_assignment() )*
}

void list_of_event_identifiers():
{
}
{
	event_identifier() ( dimension() )*
          ( "," event_identifier() ( dimension() )* )*
}

void list_of_net_decl_assignments():
{
}
{
	net_decl_assignment() ( "," net_decl_assignment() )*
}

void list_of_net_identifiers():
{
}
{
	net_identifier() ( dimension() )*
          ( "," net_identifier() ( dimension() )* )*
}

void list_of_param_assignments():
{
}
{
	param_assignment() ( "," param_assignment() )*
}

void list_of_port_identifiers():
{
}
{
	port_identifier() ( "," port_identifier() )*
}

void list_of_real_identifiers():
{
}
{
	real_type() ( "," real_type() )*
}

void list_of_specparam_assignments():
{
}
{
	specparam_assignment() ( "," specparam_assignment() )*
}

void list_of_variable_identifiers():
{
}
{
	variable_type() ( "," variable_type() )*
}

void list_of_variable_port_identifiers():
{
}
{
	port_identifier() [ "=" constant_expression() ]
                   ( "," port_identifier() [ "=" constant_expression() ] )*
}


/**************************************************************
 * A.2.4 Declaration assignments
 **************************************************************/

void defparam_assignment():
{
}
{
	hierarchical_parameter_identifier() "=" constant_mintypmax_expression()
}

void net_decl_assignment():
{
}
{
	net_identifier() "=" expression()
}

void param_assignment():
{
}
{
	parameter_identifier() "=" constant_mintypmax_expression()
}

void specparam_assignment():
{
}
{
	(
		specparam_identifier() "=" constant_mintypmax_expression()
    | 
    	pulse_control_specparam()
    )
}

void pulse_control_specparam():
{
}
{
	(
       "PATHPULSE$" "=" "(" reject_limit_value() [ "," error_limit_value() ] ")"
     | "PATHPULSE$" specify_input_terminal_descriptor() "$" specify_output_terminal_descriptor()
                     "=" "(" reject_limit_value() [ "," error_limit_value() ] ")"
    )
}

void error_limit_value():
{
}
{
	limit_value()
}

void reject_limit_value():
{
}
{
	limit_value()
}

void limit_value():
{
}
{
	constant_mintypmax_expression()
}

/**************************************************************
 * A.2.5 Declaration ranges
 **************************************************************/

void dimension():
{
}
{
	"[" dimension_constant_expression() ":" dimension_constant_expression() "]"
}

void range():
{
}
{
	"[" msb_constant_expression() ":" lsb_constant_expression() "]"
}

/**************************************************************
 * A.2.6 Function declarations
 **************************************************************/
 
void function_declaration():
{
}
{
	(
         "function" [ "automatic" ] [ function_range_or_type() ] function_identifier() ";"
         function_item_declaration() ( function_item_declaration() )*
         function_statement()
         "endfunction"
     |
         "function" [ "automatic" ] [ function_range_or_type() ] function_identifier() "(" function_port_list() ")" ";"
         ( block_item_declaration() )*
         function_statement()
         "endfunction"
     )
}

void function_item_declaration():
{
}
{	
	(
        block_item_declaration()
    | 
     	( attribute_instance() )* tf_input_declaration() ";"
	)
}

void function_port_list():
{
}
{
	( attribute_instance() )* tf_input_declaration() ( "," ( attribute_instance() )*
                 tf_input_declaration() )*
}

void function_range_or_type():
{
}
{
	(
       [ "signed" ] [ range() ]
     | "integer"
     | "real"
     | "realtime"
     | "time"
    )
}
 
/**************************************************************
 * A.2.7 Task declarations
 **************************************************************/

void task_declaration():
{
}
{
	(
         "task" [ "automatic" ] task_identifier() ";"
         ( task_item_declaration() )*
         statement_or_null()
         "endtask"
       | "task" [ "automatic" ] task_identifier() "(" [ task_port_list() ] ")" ";"
         ( block_item_declaration() )*
         statement_or_null()
         "endtask"
    )
}

void task_item_declaration():
{
}
{
	(
       block_item_declaration()
     | ( attribute_instance() )* tf_input_declaration() ";"
     | ( attribute_instance() )* tf_output_declaration() ";"
     | ( attribute_instance() )* tf_inout_declaration() ";"
    )
}

void task_port_list():
{
}
{
	task_port_item() ( "," task_port_item() )*
}

void task_port_item():
{
}
{
	(
       ( attribute_instance() )* tf_input_declaration()
     | ( attribute_instance() )* tf_output_declaration()
     | ( attribute_instance() )* tf_inout_declaration()
    )
}
void tf_input_declaration():
{
}
{
	(	
    	"input" [ "reg" ] [ "signed" ] [ range() ] list_of_port_identifiers()
    | 
     	"input" task_port_type() list_of_port_identifiers()
    )
}

void tf_output_declaration():
{
}
{
	(
       "output" [ "reg" ] [ "signed" ] [ range() ] list_of_port_identifiers()
     | "output" task_port_type() list_of_port_identifiers()
    )
}

void tf_inout_declaration():
{
}
{
	(
       "inout" [ "reg" ] [ "signed" ] [ range() ] list_of_port_identifiers()
     | "inout" task_port_type() list_of_port_identifiers()
	)
}

void task_port_type():
{
}
{
       ( "integer" | "real" | "realtime" | "time" )
}
 
/**************************************************************
 * A.2.8 Block item declarations
 **************************************************************/

void block_item_declaration(): 
{
}
{
	(
	  ( attribute_instance() )* "reg" [ "signed" ] [ range() ] list_of_block_variable_identifiers() ";"
      | ( attribute_instance() )* "integer" list_of_block_variable_identifiers() ";"
      | ( attribute_instance() )* "time" list_of_block_variable_identifiers() ";"
      | ( attribute_instance() )* "real" list_of_block_real_identifiers() ";"
      | ( attribute_instance() )* "realtime" list_of_block_real_identifiers() ";"
      | ( attribute_instance() )* event_declaration()
      | ( attribute_instance() )* local_parameter_declaration() ";"
      | ( attribute_instance() )* parameter_declaration() ";"
    )
}

void list_of_block_variable_identifiers():
{
}
{
	block_variable_type() ( "," block_variable_type() )*
}

void list_of_block_real_identifiers():
{
}
{
	block_real_type() ( "," block_real_type() )*
}

void block_variable_type():
{
}
{
	variable_identifier() ( dimension() )*
}

void block_real_type():
{
}
{
	real_identifier() ( dimension() )*
}

/**************************************************************
 * A.3.1 Primitive instantiation and instances
 **************************************************************/

void gate_instantiation():
{
}
{
	(
	 cmos_switchtype() [delay3()]
            cmos_switch_instance() ( "," cmos_switch_instance() )* ";"
     | enable_gatetype() [drive_strength()] [delay3()]
            enable_gate_instance() ( "," enable_gate_instance() )* ";"
     | mos_switchtype() [delay3()]
            mos_switch_instance() ( "," mos_switch_instance() )* ";"
     | n_input_gatetype() [drive_strength()] [delay2()]
            n_input_gate_instance() ( "," n_input_gate_instance() )* ";"
     | n_output_gatetype() [drive_strength()] [delay2()]
            n_output_gate_instance() ( "," n_output_gate_instance() )* ";"
     | pass_en_switchtype() [delay2()]
            pass_enable_switch_instance() ( "," pass_enable_switch_instance() )* ";"
     | pass_switchtype()
            pass_switch_instance() ( "," pass_switch_instance() )* ";"
     | "pulldown" [pulldown_strength()]
             pull_gate_instance() ( "," pull_gate_instance() )* ";"
     | "pullup" [pullup_strength()]
            pull_gate_instance() ( "," pull_gate_instance() )* ";"
    )
}
void cmos_switch_instance():
{
}
{
	[ name_of_gate_instance() ] "(" output_terminal() "," input_terminal() ","
           ncontrol_terminal() "," pcontrol_terminal() ")"
}

void enable_gate_instance():
{
}
{
	[ name_of_gate_instance() ] "(" output_terminal() "," input_terminal() "," enable_terminal() ")"
}

void mos_switch_instance():
{
}
{
	[ name_of_gate_instance() ] "(" output_terminal() "," input_terminal() "," enable_terminal() ")"
}

void n_input_gate_instance():
{
}
{
	[ name_of_gate_instance() ] "(" output_terminal() "," input_terminal() ( "," input_terminal() )* ")"
}

void n_output_gate_instance():
{
}
{
	[ name_of_gate_instance() ] "(" output_terminal() ( "," output_terminal() )* ","
                input_terminal() ")"
}

void pass_switch_instance():
{
}
{
	[ name_of_gate_instance() ] "(" inout_terminal() "," inout_terminal() ")"
}

void pass_enable_switch_instance():
{
}
{ 
	[ name_of_gate_instance() ] "(" inout_terminal() "," inout_terminal() ","
                enable_terminal() ")"
}
                
void pull_gate_instance():
{
}
{
	[ name_of_gate_instance() ] "(" output_terminal() ")"
}

void name_of_gate_instance():
{
}
{
	gate_instance_identifier() [ range() ]
}

/**************************************************************
 * A.3.2 Primitive strengths
 **************************************************************/
void pulldown_strength():
{
}
{
	(
		"(" strength0() "," strength1() ")"
     | "(" strength1() "," strength0() ")"
     | "(" strength0() ")"
    )
}

void pullup_strength():
{
}
{
	(
       "(" strength0() "," strength1() ")"
     | "(" strength1() "," strength0() ")"
     | "(" strength1() ")"
    )
}

/**************************************************************
 * A.3.3 Primitive terminals
 **************************************************************/

void enable_terminal():
{
}
{
	expression()
}

void inout_terminal():
{
}
{
	net_lvalue()
}
void input_terminal():
{
}
{
	expression()
}
void ncontrol_terminal():
{
}
{
	expression()
}

void output_terminal():
{
}
{
	net_lvalue()
}
void pcontrol_terminal():
{
}
{
	expression()
}

/**************************************************************
 * A.3.4 Primitive gate and switch types
 **************************************************************/
void cmos_switchtype():
{
}
{
	("cmos" | "rcmos" )
}

void enable_gatetype():
{
}
{
	( "bufif0" | "bufif1" | "notif0" | "notif1" )
}

void mos_switchtype():
{
}
{
	( "nmos" | "pmos" | "rnmos" | "rpmos" )
}

void n_input_gatetype():
{
}
{
	( "and" | "nand" | "or" | "nor" | "xor" | "xnor" )
}

void n_output_gatetype():
{
}
{
	( "buf" | "not" )
}

void pass_en_switchtype():
{
}
{
	( "tranif0" | "tranif1" | "rtranif1" | "rtranif0" )
}

void pass_switchtype():
{
}
{
	( "tran" | "rtran" )
}

/**************************************************************
 * A.4.1 Module instantiation
 **************************************************************/

void module_instantiation ():
{
}
{
	module_identifier() [ parameter_value_assignment() ]
          module_instance() ( "," module_instance() )* ";"
}

void parameter_value_assignment ():
{
}
{
	"#" "(" list_of_parameter_assignments() ")"
}

void list_of_parameter_assignments ():
{
}
{
	(	
      ordered_parameter_assignment() ( "," ordered_parameter_assignment() )* |
      named_parameter_assignment() ( "," named_parameter_assignment() )*
    )
}

void ordered_parameter_assignment ():
{
}
{
	 expression()
}

void named_parameter_assignment ():
{
}
{
	"." parameter_identifier() "(" [ mintypmax_expression() ] ")"
}

void module_instance (): 
{
}
{
	name_of_module_instance() "(" [ list_of_port_connections() ] ")"
}

void name_of_module_instance (): 
{
}
{
	module_instance_identifier() [ range() ]
}

void list_of_port_connections ():
{
}
{
	(
	  ordered_port_connection() ( "," ordered_port_connection() )*
      | named_port_connection() ( "," named_port_connection() )*
    )
}
void ordered_port_connection (): 
{
}
{
	( attribute_instance() )* [ expression() ]
}

void named_port_connection ():
{
} 
{
	( attribute_instance() )* "." port_identifier() "(" [ expression() ] ")"
}

/**************************************************************
 * A.4.2 Generate construct
 **************************************************************/
 
void generate_region ():
{
}
{
      "generate" ( module_or_generate_item() )* "endgenerate"
}

void genvar_declaration ():
{
}
{
      "genvar" list_of_genvar_identifiers() ";"
}

void list_of_genvar_identifiers ():
{
}
{
      genvar_identifier() ( "," genvar_identifier() )*
}

void loop_generate_construct ():
{
}
{
      "for" "(" genvar_initialization() ";" genvar_expression() ";" genvar_iteration() ")"
          generate_block()
}

void genvar_initialization ():
{
}
{
	genvar_identifier() "=" constant_expression()
}

void genvar_expression ():
{
}
{
	(
        genvar_primary()
      | unary_operator() ( attribute_instance() )* genvar_primary()
      | genvar_expression() binary_operator() ( attribute_instance() )* genvar_expression()
      | genvar_expression() "?" ( attribute_instance() )* genvar_expression() ":" genvar_expression()
    )
}

void genvar_iteration (): 
{
}
{
      genvar_identifier() "=" genvar_expression()
}

void genvar_primary ():
{
}
{
	(
        constant_primary()
      | genvar_identifier()
    )
}

void conditional_generate_construct ():
{
}
{
	(
        if_generate_construct()
      | case_generate_construct()
    )
}

void if_generate_construct ():
{
}
{
      "if" "(" constant_expression() ")" generate_block_or_null()
         [ "else" generate_block_or_null() ]
}

void case_generate_construct ():
{
}
{
     "case" "(" constant_expression() ")"
        case_generate_item() ( case_generate_item() )* "endcase"
}

void case_generate_item ():
{
}
{
	(
       constant_expression() ( "," constant_expression() )* ":" generate_block_or_null()
     | "default" [ ":" ] generate_block_or_null()
    )
}

void generate_block ():
{
}
{
	(
       module_or_generate_item()
     | "begin" [ ":" generate_block_identifier() ] ( module_or_generate_item() )* "end"
    )
}

void generate_block_or_null ():
{
}
{
	(
       generate_block()
     | ";"
    )
}
 
/**************************************************************
 * A.5 UDP declaration and instantiation
 **************************************************************/
 
// FIXME: TODO

/**************************************************************
 * A.6 Behavioral statements
 **************************************************************/

/**************************************************************
 * A.6.1 Continuous assignment statements
 **************************************************************/
 
void continuous_assign():
{
}
{
	"assign" [ drive_strength() ] [ delay3() ] list_of_net_assignments() ";"
}

void list_of_net_assignments():
{
}
{
	net_assignment() ( "," net_assignment() )*
}

void net_assignment():
{
}
{
	net_lvalue() "=" expression()
}

/**************************************************************
 * A.6.2 Procedural blocks and assignments
 **************************************************************/

void initial_construct():
{
}
{
	"initial" statement()
}

void always_construct():
{
}
{
	"always" statement()
}

void blocking_assignment():
{
}
{
	variable_lvalue() "=" [ delay_or_event_control() ] expression()
}

void nonblocking_assignment():
{
}
{
	variable_lvalue() "<=" [ delay_or_event_control() ] expression()
}

void procedural_continuous_assignments():
{
}
{
	(
        "assign" variable_assignment()
      | "deassign" variable_lvalue()
      | "force" variable_assignment()
      | "force" net_assignment()
      | "release" variable_lvalue()
      | "release" net_lvalue()
    )
}

void variable_assignment():
{
}
{
	variable_lvalue() "=" expression()
}
 
/**************************************************************
 * A.6.3 Parallel and sequential blocks
 **************************************************************/

void par_block():
{
}
{
	"fork" [ ":" block_identifier()
           ( block_item_declaration() )* ] ( statement() )* "join"
}

void seq_block():
{
}
{
	 "begin" [ ":" block_identifier()
         ( block_item_declaration() )* ] ( statement() )* "end"
}
 
/**************************************************************
 * A.6.4 Statements
 **************************************************************/

void statement():
{
}
{
	(
       ( attribute_instance() )* blocking_assignment() ";"
     | ( attribute_instance() )* case_statement()
     | ( attribute_instance() )* conditional_statement()
     | ( attribute_instance() )* disable_statement()
     | ( attribute_instance() )* event_trigger()
     | ( attribute_instance() )* loop_statement()
     | ( attribute_instance() )* nonblocking_assignment() ";"
     | ( attribute_instance() )* par_block()
     | ( attribute_instance() )* procedural_continuous_assignments() ";"
     | ( attribute_instance() )* procedural_timing_control_statement()
     | ( attribute_instance() )* seq_block()
     | ( attribute_instance() )* system_task_enable()
     | ( attribute_instance() )* task_enable()
     | ( attribute_instance() )* wait_statement()
   )
}

void statement_or_null():
{
}
{
	(
       statement()
     | ( attribute_instance() )* ";"
    )
}

void function_statement():
{
}
{
	statement()
}
 
/**************************************************************
 * A.6.5 Timing control statements
 **************************************************************/
void delay_control():
{
}
{
	(
       "#" delay_value()
     | "#" "(" mintypmax_expression() ")"
    )
}

void delay_or_event_control():
{
}
{
	(
       delay_control()
     | event_control()
     | "repeat" "(" expression() ")" event_control()
    )
}

void disable_statement():
{
}
{
	(
       "disable" hierarchical_task_identifier() ";"
     | "disable" hierarchical_block_identifier() ";"
    )
}

void event_control():
{
}
{
	(
       "@" hierarchical_event_identifier()
     | "@" "(" event_expression() ")"
     | "@" "*"
     | "@" "(" "*" ")"
    )
}

void event_trigger():
{
}
{
	"->" hierarchical_event_identifier() ( "[" expression() "]" )* ";"
}

void event_expression():
{
}
{
	(
	   expression()
     | "posedge" expression()
     | "negedge" expression()
     | event_expression() "or" event_expression()
     | event_expression() "," event_expression()
    )
}

void procedural_timing_control():
{
}
{
	(
       delay_control()
     | event_control()
    )
}

void procedural_timing_control_statement():
{
}
{
	procedural_timing_control() statement_or_null()
}

void wait_statement():
{
}
{
	"wait" "(" expression() ")" statement_or_null()
}
       
/**************************************************************
 * A.6.6 Conditional statements
 **************************************************************/

void conditional_statement():
{
}
{
	(
	  "if" "(" expression() ")"
             statement_or_null() [ "else" statement_or_null() ]
    | if_else_if_statement()
    )
}

void if_else_if_statement():
{
}
{
	"if" "(" expression() ")" statement_or_null()
      ( "else" "if" "(" expression() ")" statement_or_null() )*
      [ "else" statement_or_null() ]
}

/**************************************************************
 * A.6.7 Case statements
 **************************************************************/
void case_statement():
{
}
{
	(
       "case" "(" expression() ")"
             case_item() ( case_item() )* "endcase"
     | "casez" "(" expression() ")"
             case_item() ( case_item() )* "endcase"
     | "casex" "(" expression() ")"
             case_item() ( case_item() )* "endcase"
    )
}

void case_item ():
{
}
{
	(
       expression() ( "," expression() )* ":" statement_or_null()
     | "default" [ ":" ] statement_or_null()
    )
}

/**************************************************************
 * A.6.8 Looping statements
 **************************************************************/

void loop_statement():
{
}
{
	(
       "forever" statement()
     | "repeat" "(" expression() ")" statement()
     | "while" "(" expression() ")" statement()
     | "for" "(" variable_assignment() ";" expression() ";" variable_assignment() ")"
             statement()
    )
}

/**************************************************************
 * A.6.9 Task enable statements
 **************************************************************/

void system_task_enable():
{
}
{
	system_task_identifier() [ "(" [ expression() ] ( "," [ expression() ] )* ")" ] ";"
}

void task_enable():
{
}
{
	hierarchical_task_identifier() [ "(" expression() ( "," expression() )* ")" ] ";"
}
 
/**************************************************************
 * A.7 Specify section
 **************************************************************/

/**************************************************************
 * A.7.1 Specify block declaration
 **************************************************************/
void specify_block (): 
{
}
{
	"specify" ( specify_item() )* "endspecify"
}

void specify_item ():
{
}
{
	(
        specparam_declaration()
      | pulsestyle_declaration()
      | showcancelled_declaration()
      | path_declaration()
      | system_timing_check()
    )
}

void pulsestyle_declaration ():
{
}
{
	(
        "pulsestyle_onevent" list_of_path_outputs() ";"
     |  "pulsestyle_ondetect" list_of_path_outputs() ";"
    )
}

void showcancelled_declaration ():
{
}
{
	(
        "showcancelled" list_of_path_outputs() ";"
      | "noshowcancelled" list_of_path_outputs() ";"
    )
}

/**************************************************************
 * A.7.2 Specify path declarations
 **************************************************************/

void path_declaration ():
{
}
{
	(
        simple_path_declaration() ";"
      | edge_sensitive_path_declaration() ";"
      | state_dependent_path_declaration() ";"
    )
}

void simple_path_declaration ():
{
}
{
	(
        parallel_path_description() "=" path_delay_value()
      | full_path_description() "=" path_delay_value()
    )
}

void parallel_path_description ():
{
}
{
      "(" specify_input_terminal_descriptor() [ polarity_operator() ] "=>" specify_output_terminal_descriptor() ")"
}

void full_path_description ():
{
}
{
      "(" list_of_path_inputs() [ polarity_operator() ] "*>" list_of_path_outputs() ")"
}

void list_of_path_inputs ():
{
}
{
        specify_input_terminal_descriptor() ( "," specify_input_terminal_descriptor() )*
}

void list_of_path_outputs ():
{
}
{
        specify_output_terminal_descriptor() ( "," specify_output_terminal_descriptor() )*
}

/**************************************************************
 * A.7.3 Specify block terminals
 **************************************************************/
void specify_input_terminal_descriptor ():
{
}
{
      input_identifier() [ "[" constant_range_expression() "]" ]
}

void specify_output_terminal_descriptor ():
{
}
{
      output_identifier() [ "[" constant_range_expression() "]" ]
}

void input_identifier (): 
{
}
{
	( input_port_identifier() | inout_port_identifier() )
}

void output_identifier (): 
{
}
{
	( output_port_identifier() | inout_port_identifier() )
}

/**************************************************************
 * A.7.4 Specify path delays
 **************************************************************/

void path_delay_value ():
{
}
{
	(
      list_of_path_delay_expressions()
      | "(" list_of_path_delay_expressions() ")"
    )
}

void list_of_path_delay_expressions ():
{
}
{
	(
        t_path_delay_expression()
      | trise_path_delay_expression() "," tfall_path_delay_expression()
      | trise_path_delay_expression() "," tfall_path_delay_expression() "," tz_path_delay_expression()
      | t01_path_delay_expression() "," t10_path_delay_expression() "," t0z_path_delay_expression() ","
        tz1_path_delay_expression() "," t1z_path_delay_expression() "," tz0_path_delay_expression()
      | t01_path_delay_expression() "," t10_path_delay_expression() "," t0z_path_delay_expression() ","
        tz1_path_delay_expression() "," t1z_path_delay_expression() "," tz0_path_delay_expression() ","
        t0x_path_delay_expression() "," tx1_path_delay_expression() "," t1x_path_delay_expression() ","
        tx0_path_delay_expression() "," txz_path_delay_expression() "," tzx_path_delay_expression()
    )
}

void t_path_delay_expression (): 
{
}
{
	path_delay_expression()
}

void trise_path_delay_expression (): 
{
}
{
	path_delay_expression()
}

void tfall_path_delay_expression (): 
{
}
{
	path_delay_expression()
}

void tz_path_delay_expression (): 
{
}
{
	path_delay_expression()
}
void t01_path_delay_expression (): 
{
}
{
	path_delay_expression()
}
void t10_path_delay_expression (): 
{
}
{
	path_delay_expression()
}
void t0z_path_delay_expression (): 
{
}
{
	path_delay_expression()
}
void tz1_path_delay_expression (): 
{
}
{
	path_delay_expression()
}
void t1z_path_delay_expression (): 
{
}
{
	path_delay_expression()
}
void tz0_path_delay_expression (): 
{
}
{
	path_delay_expression()
}
void t0x_path_delay_expression (): 
{
}
{
	path_delay_expression()
}
void tx1_path_delay_expression (): 
{
}
{
	path_delay_expression()
}
void t1x_path_delay_expression (): 
{
}
{
	path_delay_expression()
}
void tx0_path_delay_expression (): 
{
}
{
	path_delay_expression()
}
void txz_path_delay_expression (): 
{
}
{
	path_delay_expression()
}
void tzx_path_delay_expression (): 
{
}
{
	path_delay_expression()
}
void path_delay_expression (): 
{
}
{
	constant_mintypmax_expression()
}
void edge_sensitive_path_declaration ():
{
}
{
	(
        parallel_edge_sensitive_path_description() "=" path_delay_value()
      | full_edge_sensitive_path_description() "=" path_delay_value()
    )
}
void parallel_edge_sensitive_path_description ():
{
}
{
        "(" [ edge_identifier() ] specify_input_terminal_descriptor() "=>"
             "(" specify_output_terminal_descriptor() [ polarity_operator() ] ":" data_source_expression() ")" ")"
}
void full_edge_sensitive_path_description ():
{
}
{
        "(" [ edge_identifier() ] list_of_path_inputs() "*>"
             "(" list_of_path_outputs() [ polarity_operator() ] ":" data_source_expression() ")" ")"
}
void data_source_expression (): 
{
}
{
	expression()
}
void edge_identifier (): 
{
}
{
	( "posedge" | "negedge" )
}
void state_dependent_path_declaration ():
{
}
{
	(
        "if" "(" module_path_expression() ")" simple_path_declaration()
      | "if" "(" module_path_expression() ")" edge_sensitive_path_declaration()
      | "ifnone" simple_path_declaration()
    )
}

void polarity_operator (): 
{
}
{
	( "+" | "-" )
}

/**************************************************************
 * A.7.5 System timing checks
 **************************************************************/
  
/**************************************************************
 * A.7.5.1 System timing check commands
 **************************************************************/
void system_timing_check ():
{
}
{
	(
       Dsetup_timing_check()
     | Dhold_timing_check()
     | Dsetuphold_timing_check()
     | Drecovery_timing_check()
     | Dremoval_timing_check()
     | Drecrem_timing_check()
     | Dskew_timing_check()
     | Dtimeskew_timing_check()
     | Dfullskew_timing_check()
     | Dperiod_timing_check()
     | Dwidth_timing_check()
     | Dnochange_timing_check()
   )
}

void Dsetup_timing_check ():
{
}
{
	"$setup" "(" data_event() "," reference_event() "," timing_check_limit() [ "," [ notifier() ] ] ")" ";"
}

void Dhold_timing_check ():
{
}
{
	"$hold" "(" reference_event() "," data_event() "," timing_check_limit() [ "," [ notifier() ] ] ")" ";"
}

void Dsetuphold_timing_check ():
{
}
{
       "$setuphold" "(" reference_event() "," data_event() "," timing_check_limit() "," timing_check_limit()
                          [ "," [ notifier() ] [ "," [ stamptime_condition() ] [ "," [ checktime_condition() ]
                          [ "," [ delayed_reference() ] [ "," [ delayed_data() ] ] ] ] ] ] ")" ";"
}

void Drecovery_timing_check ():
{
}
{
       "$recovery" "(" reference_event() "," data_event() "," timing_check_limit() [ "," [ notifier() ] ] ")" ";"
}
void Dremoval_timing_check ():
{
}
{
       "$removal" "(" reference_event() "," data_event() "," timing_check_limit() [ "," [ notifier() ] ] ")" ";"
}
void Drecrem_timing_check ():
{
}
{
       "$recrem" "(" reference_event() "," data_event() "," timing_check_limit() "," timing_check_limit()
                          [ "," [ notifier() ] [ "," [ stamptime_condition() ] [ "," [ checktime_condition() ]
                          [ "," [ delayed_reference() ] [ "," [ delayed_data() ] ] ] ] ] ] ")" ";"
}
void Dskew_timing_check ():
{
}
{
       "$skew" "(" reference_event() "," data_event() "," timing_check_limit() [ "," [ notifier() ] ] ")" ";"
}
void Dtimeskew_timing_check ():
{
}
{
       "$timeskew" "(" reference_event() "," data_event() "," timing_check_limit()
                          [ "," [ notifier() ] [ "," [ event_based_flag() ] [ "," [ remain_active_flag() ] ] ] ] ")" ";"
}

void Dfullskew_timing_check ():
{
}
{
       "$fullskew" "(" reference_event() "," data_event() "," timing_check_limit() "," timing_check_limit()
                          [ "," [ notifier() ] [ "," [ event_based_flag() ] [ "," [ remain_active_flag() ] ] ] ] ")" ";"
}

void Dperiod_timing_check ():
{
}
{
       "$period" "(" controlled_reference_event() "," timing_check_limit() [ "," [ notifier() ] ] ")" ";"
}
void Dwidth_timing_check ():
{
}
{
       "$width" "(" controlled_reference_event() "," timing_check_limit()
                          [ "," threshold() [ "," notifier() ] ] ")" ";"
}
void Dnochange_timing_check ():
{
}
{
       "$nochange" "(" reference_event() "," data_event() "," start_edge_offset() ","
                          end_edge_offset() [ "," [ notifier() ] ] ")" ";"
}

/**************************************************************
 * A.7.5.2 System timing check command arguments
 **************************************************************/

void checktime_condition (): 
{
}
{
	mintypmax_expression()
}
void controlled_reference_event (): 
{
}
{
	controlled_timing_check_event()
}
void data_event (): 
{
}
{
	timing_check_event()
}
void delayed_data ():
{
}
{
	(
        terminal_identifier()
      | terminal_identifier() [ constant_mintypmax_expression() ]
    )
}
void delayed_reference ():
{
}
{
	(
        terminal_identifier()
      | terminal_identifier() [ constant_mintypmax_expression() ]
    )
}
void end_edge_offset (): 
{
}
{
	mintypmax_expression()
}
void event_based_flag (): 
{
}
{
	constant_expression()
}
void notifier (): 
{
}
{
	variable_identifier()
}
void reference_event (): 
{
}
{
	timing_check_event()
}
void remain_active_flag (): 
{
}
{
	constant_expression()
}
void stamptime_condition (): 
{
}
{
	mintypmax_expression()
}
void start_edge_offset (): 
{
}
{
	mintypmax_expression()
}
void threshold (): 
{
}
{
	constant_expression()
}
void timing_check_limit (): 
{
}
{
	expression()
}

/**************************************************************
 * A.7.5.3 System timing check event definitions
 **************************************************************/
void timing_check_event ():
{
}
{
        [timing_check_event_control()] specify_terminal_descriptor() [ "&&&" timing_check_condition() ]
}

void controlled_timing_check_event ():
{
}
{
        timing_check_event_control() specify_terminal_descriptor() [ "&&&" timing_check_condition()]
}

void timing_check_event_control ():
{
}
{
	(
        "posedge"
      | "negedge"
      | edge_control_specifier()
    )
}
void specify_terminal_descriptor ():
{
}
{
	(
        specify_input_terminal_descriptor()
      | specify_output_terminal_descriptor()
    )
}
void edge_control_specifier (): 
{
}
{
	"edge" "[" edge_descriptor() ( "," edge_descriptor() )* "]"
}
void edge_descriptor2 ():
{
}
{
	(
        "01"
      | "10"
      | z_or_x() zero_or_one()
      | zero_or_one() z_or_x()
    )
}
void zero_or_one (): 
{
}
{
	("0" | "1")
}
void z_or_x (): 
{
}
{
	( "x" | "X" | "z" | "Z" )
}

void timing_check_condition ():
{
}
{
	(
        scalar_timing_check_condition()
      | "(" scalar_timing_check_condition() ")"
    )
}
void scalar_timing_check_condition ():
{
}
{
	(	
       expression()
     | "~" expression()
     | expression() "==" scalar_constant()
     | expression() "===" scalar_constant()
     | expression() "!=" scalar_constant()
     | expression() "!==" scalar_constant()
    )
}
void scalar_constant ():
{
}
{
       ( "1'b0" | "1'b1" | "1'B0" | "1'B1" | "'b0" | "'b1" | "'B0" | "'B1" | "1" | "0" )
}


/**************************************************************
 * A.8 Expressions
 **************************************************************/

/**************************************************************
 * A.8.1 Concatenations
 **************************************************************/
void concatenation (): 
{
}
{
	( expression() ( "," expression() )* )*
}
void constant_concatenation (): 
{
}
{
	( constant_expression() ( "," constant_expression() )* )*
}
void constant_multiple_concatenation (): 
{
}
{
	( constant_expression() constant_concatenation() )*
}
void module_path_concatenation (): 
{
}
{
	( module_path_expression() ( "," module_path_expression() )* )*
}
void module_path_multiple_concatenation (): 
{
}
{
	( constant_expression() module_path_concatenation() )*
}
void multiple_concatenation (): 
{
}
{
	( constant_expression() concatenation() )*
}

/**************************************************************
 * A.8.2 Function calls
 **************************************************************/
void constant_function_call (): 
{
}
{
	function_identifier() ( attribute_instance() )*
            "(" constant_expression() ( "," constant_expression() )* ")"
}
void constant_system_function_call (): 
{
}
{
	system_function_identifier()
            "(" constant_expression() ( "," constant_expression() )* ")"
}
void function_call (): 
{
}
{
	hierarchical_function_identifier() ( attribute_instance() )*
            "(" expression() ( "," expression() )* ")"
}
void system_function_call (): 
{
}
{
	system_function_identifier()
            [ "(" expression() ( "," expression() )* ")" ]
}

/**************************************************************
 * A.8.3 Expressions
 **************************************************************/
void base_expression ():
{
}
{
	 expression()
}
void conditional_expression (): 
{
}
{
	expression() "?" ( attribute_instance() )* expression() ":" expression()
}

void constant_base_expression (): 
{
}
{
	constant_expression()
}
void constant_expression ():
{
}
{
	(
       constant_primary()
     | unary_operator() ( attribute_instance() )* constant_primary()
     | constant_expression() binary_operator() ( attribute_instance() )* constant_expression()
     | constant_expression() "?" ( attribute_instance() )* constant_expression() ":" constant_expression()
    )
}
void constant_mintypmax_expression ():
{
}
{
	(
       constant_expression()
     | constant_expression() ":" constant_expression() ":" constant_expression()
    )
} 
void constant_range_expression ():
{
}
{
	(
       constant_expression()
     | msb_constant_expression() ":" lsb_constant_expression()
     | constant_base_expression() "+:" width_constant_expression()
     | constant_base_expression() "-:" width_constant_expression()
    )
}
void dimension_constant_expression (): 
{
}
{
	constant_expression()
}
void expression ():
{
}
{
	(
       primary()
     | unary_operator() ( attribute_instance() )* primary()
     | expression() binary_operator() ( attribute_instance() )* expression()
     | conditional_expression()
    )
}
void lsb_constant_expression (): 
{
}
{
	constant_expression()
}
void mintypmax_expression ():
{
}
{
	(
       expression()
     | expression() ":" expression() ":" expression()
    )
}
void module_path_conditional_expression (): 
{
}
{
	module_path_expression() "?" ( attribute_instance() )*
             module_path_expression() ":" module_path_expression()
}
void module_path_expression ():
{
}
{
	(
       module_path_primary()
     | unary_module_path_operator() ( attribute_instance() )* module_path_primary()
     | module_path_expression() binary_module_path_operator() ( attribute_instance() )*
             module_path_expression()
     | module_path_conditional_expression()
    )
}
void module_path_mintypmax_expression ():
{
}
{
	(
       module_path_expression()
     | module_path_expression() ":" module_path_expression() ":" module_path_expression()
    )
}
void msb_constant_expression (): 
{
}
{
	constant_expression()
}
void range_expression ():
{
}
{
	(
       expression()
     | msb_constant_expression() ":" lsb_constant_expression()
     | base_expression() "+:" width_constant_expression()
     | base_expression() "-:" width_constant_expression()
    )
}
void width_constant_expression (): 
{
}
{
	constant_expression()
}

/**************************************************************
 * A.8.4 Primaries
 **************************************************************/
void constant_primary ():
{
}
{
	(
       number()
     | parameter_identifier() [ "[" constant_range_expression() "]" ]
     | specparam_identifier() [ "[" constant_range_expression() "]" ]
     | constant_concatenation()
     | constant_multiple_concatenation()
     | constant_function_call()
     | constant_system_function_call()
     | "(" constant_mintypmax_expression() ")"
     | string()
    )
}
void module_path_primary ():
{
}
{
	(
       number()
     | identifier()
     | module_path_concatenation()
     | module_path_multiple_concatenation()
     | function_call()
     | system_function_call()
     | "(" module_path_mintypmax_expression() ")"
    )
}
void primary ():
{
}
{
	(
       number()
     | hierarchical_identifier() [ ( "[" expression() "]" )* [ range_expression() ] ]
     | concatenation()
     | multiple_concatenation()
     | function_call()
     | system_function_call()
     | "(" mintypmax_expression() ")"
     | string()
     )
}
/**************************************************************
 * A.8.5 Expression left-side values
 **************************************************************/
void net_lvalue ():
{
}
{
	(
       hierarchical_net_identifier() [ ( "[" constant_expression() "]" )* [ constant_range_expression() ] ]
     | ( net_lvalue() ( "," net_lvalue() )* )*
    )
}

void variable_lvalue ():
{
}
{
	(
       hierarchical_variable_identifier() [ ( "[" expression() "]" )* [ range_expression() ] ]
     | ( variable_lvalue() ( "," variable_lvalue() )* )*
    )
}

/**************************************************************
 * A.8.6 Operators
 **************************************************************/
void unary_operator ():
{
}
{
	(
       "+" | "-" | "!" | "~" | "&" | "~&" | "|" | "~|" | "^" | "~^" | "^~"
    )
}
void binary_operator ():
{
}
{
	(
       "+" | "-" | "*" | "/" | "%" | "==" | "!=" | "===" | "!==" | "&&" | "||" | "**"
     | "<" | "<=" | ">" | ">=" | "&" | "|" | "^" | "^~" | "~^" | ">>" | "<<" | ">>>" | "<<<"
    )
}
void unary_module_path_operator ():
{
}
{
	(
       "!" | "~" | "&" | "~&" | "|" | "~|" | "^" | "~^" | "^~"
    )
}
void binary_module_path_operator ():
{
}
{
	(
       "==" | "!=" | "&&" | "||" | "&" | "|" | "^" | "^~" | "~^"
    )
}

/**************************************************************
 * A.8.7 Numbers
 **************************************************************/
void number ():
{
}
{
	(
       decimal_number()
     | octal_number()
     | binary_number()
     | hex_number()
     | real_number()
    )
}
void real_number2 ():
{
}
{
	(
       unsigned_number() "." unsigned_number()
      | unsigned_number() [ "." unsigned_number() ] exp() [ sign() ] unsigned_number()
    )
}
void exp (): 
{
}
{
	( "e" | "E" )
}

void decimal_number ():
{
}
{
	(
        unsigned_number()
      | [ size() ] decimal_base() unsigned_number()
      | [ size() ] decimal_base() x_digit() ( "_" )*
      | [ size() ] decimal_base() z_digit() ( "_" )*
    )
}
void binary_number (): 
{
}
{
	[ size() ] binary_base() binary_value() 
}
void octal_number (): 
{
}
{
	[ size() ] octal_base() octal_value()
}
void hex_number (): 
{
}
{
	[ size() ] hex_base() hex_value()
}
void sign (): 
{
}
{
	( "+" | "-" )
}
void size (): 
{
}
{
	non_zero_unsigned_number()
}
void non_zero_unsigned_number (): 
{
}
{
	non_zero_decimal_digit() ( "_" | decimal_digit() )*
}
void unsigned_number (): 
{
}
{
	decimal_digit() ( "_" | decimal_digit() )*
}
void binary_value (): 
{
}
{
	binary_digit() ( "_" | binary_digit() )*
}
void octal_value (): 
{
}
{
	octal_digit() ( "_" | octal_digit() )*
}
void hex_value (): 
{
}
{
	hex_digit() ( "_" | hex_digit() )*
}
void decimal_base (): 
{
}
{
	("'" ["s"|"S"]"d" | "'"["s"|"S"]"D" )
}
void binary_base (): 
{
}
{
	("'" ["s"|"S"]"b" | "'"["s"|"S"]"B" )
}
void octal_base (): 
{
}
{
	("'" ["s"|"S"]"o" | "'"["s"|"S"]"O" )
}
void hex_base (): 
{
}
{
	("'" ["s"|"S"]"h" | "'"["s"|"S"]"H" )
}
void non_zero_decimal_digit (): 
{
}
{
	( "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" )
}
void decimal_digit (): 
{
}
{
	( "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" )
}
void binary_digit (): 
{
}
{
	( x_digit() | z_digit() | "0" | "1" ) 
}
void octal_digit (): 
{
}
{
	( x_digit() | z_digit() | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" )
}
void hex_digit ():
{
}
{
        ( x_digit() | z_digit() | "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9"
      |"a"|"b"|"c"|"d"|"e"|"f"|"A"|"B"|"C"|"D"|"E"|"F" )
}
void x_digit (): 
{
}
{
	("x" | "X" )
}
void z_digit (): 
{
}
{
	( "z" | "Z" | "?" )
}



/**************************************************************
 * Misc
 **************************************************************/

void identifier() :
{
}
{
	(  t=<basic_identifier> 
	|  LOOKAHEAD ("\\") extendedIdentifier()
	)
}
 


 
/**
 *
 * for error recovery:
 *
 */
JAVACODE void error_skipto(int kind, String message, ParseException e)
{
  dum.addError (new CompilerMsg (sf, getLocation(e.currentToken.next), message+"\n"+e));
  Token t;
  do
  {
    t = getNextToken();
  } while ((t.kind != kind));
}
