/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.zamia.verilog.analysis;

import org.zamia.verilog.node.*;

public interface Analysis extends Switch
{
    Object getIn(Node node);
    void setIn(Node node, Object o);
    Object getOut(Node node);
    void setOut(Node node, Object o);

    void caseStart(Start node);
    void caseAMain(AMain node);
    void caseASourceText(ASourceText node);
    void caseAModuleDescription(AModuleDescription node);
    void caseAModuleDeclaration(AModuleDeclaration node);
    void caseAModuleModuleKeyword(AModuleModuleKeyword node);
    void caseAMacroModuleKeyword(AMacroModuleKeyword node);
    void caseAModuleParameterPortList(AModuleParameterPortList node);
    void caseAP0ParameterDeclarations(AP0ParameterDeclarations node);
    void caseAP1ParameterDeclarations(AP1ParameterDeclarations node);
    void caseAListOfPortDeclarations(AListOfPortDeclarations node);
    void caseAP0PortDeclarations(AP0PortDeclarations node);
    void caseAP1PortDeclarations(AP1PortDeclarations node);
    void caseAP0PortDeclarationFoo(AP0PortDeclarationFoo node);
    void caseAP2PortDeclarationFoo(AP2PortDeclarationFoo node);
    void caseAP3PortDeclarationFoo(AP3PortDeclarationFoo node);
    void caseAP4PortDeclarationFoo(AP4PortDeclarationFoo node);
    void caseAP5PortDeclarationFoo(AP5PortDeclarationFoo node);
    void caseAP6PortDeclarationFoo(AP6PortDeclarationFoo node);
    void caseAP0PortExpression(AP0PortExpression node);
    void caseAP1PortExpression(AP1PortExpression node);
    void caseAPortExpressionRep(APortExpressionRep node);
    void caseAP0PortReference(AP0PortReference node);
    void caseAP1PortReference(AP1PortReference node);
    void caseAP0PortDeclarationS(AP0PortDeclarationS node);
    void caseAP1PortDeclarationS(AP1PortDeclarationS node);
    void caseAP2PortDeclarationS(AP2PortDeclarationS node);
    void caseAP0PortDeclaration(AP0PortDeclaration node);
    void caseAP1PortDeclaration(AP1PortDeclaration node);
    void caseAP2PortDeclaration(AP2PortDeclaration node);
    void caseAP0ModuleItem(AP0ModuleItem node);
    void caseAP1ModuleItem(AP1ModuleItem node);
    void caseAP4ModuleItem(AP4ModuleItem node);
    void caseAP5ModuleItem(AP5ModuleItem node);
    void caseAP7ModuleItem(AP7ModuleItem node);
    void caseAP8ModuleItem(AP8ModuleItem node);
    void caseAP9ModuleItem(AP9ModuleItem node);
    void caseAP13ModuleItem(AP13ModuleItem node);
    void caseAP14ModuleItem(AP14ModuleItem node);
    void caseAP15ModuleItem(AP15ModuleItem node);
    void caseAP0ModuleOrGenerateItemDeclaration(AP0ModuleOrGenerateItemDeclaration node);
    void caseAP1ModuleOrGenerateItemDeclaration(AP1ModuleOrGenerateItemDeclaration node);
    void caseAP2ModuleOrGenerateItemDeclaration(AP2ModuleOrGenerateItemDeclaration node);
    void caseAP3ModuleOrGenerateItemDeclaration(AP3ModuleOrGenerateItemDeclaration node);
    void caseAP4ModuleOrGenerateItemDeclaration(AP4ModuleOrGenerateItemDeclaration node);
    void caseAP5ModuleOrGenerateItemDeclaration(AP5ModuleOrGenerateItemDeclaration node);
    void caseAP6ModuleOrGenerateItemDeclaration(AP6ModuleOrGenerateItemDeclaration node);
    void caseAP8ModuleOrGenerateItemDeclaration(AP8ModuleOrGenerateItemDeclaration node);
    void caseAP9ModuleOrGenerateItemDeclaration(AP9ModuleOrGenerateItemDeclaration node);
    void caseAP0LocalParameterDeclaration(AP0LocalParameterDeclaration node);
    void caseAP1LocalParameterDeclaration(AP1LocalParameterDeclaration node);
    void caseAP0ParameterDeclaration(AP0ParameterDeclaration node);
    void caseAP1ParameterDeclaration(AP1ParameterDeclaration node);
    void caseASpecparamDeclaration(ASpecparamDeclaration node);
    void caseAIntParameterType(AIntParameterType node);
    void caseARealParameterType(ARealParameterType node);
    void caseARealtimeParameterType(ARealtimeParameterType node);
    void caseATimeParameterType(ATimeParameterType node);
    void caseAInoutDeclarationS(AInoutDeclarationS node);
    void caseAInoutDeclaration(AInoutDeclaration node);
    void caseAInputDeclarationS(AInputDeclarationS node);
    void caseAInputDeclaration(AInputDeclaration node);
    void caseAP0OutputDeclarationS(AP0OutputDeclarationS node);
    void caseAP1OutputDeclarationS(AP1OutputDeclarationS node);
    void caseAP2OutputDeclarationS(AP2OutputDeclarationS node);
    void caseAP3OutputDeclarationS(AP3OutputDeclarationS node);
    void caseAP0OutputDeclaration(AP0OutputDeclaration node);
    void caseAP1OutputDeclaration(AP1OutputDeclaration node);
    void caseAP2OutputDeclaration(AP2OutputDeclaration node);
    void caseAEventDeclaration(AEventDeclaration node);
    void caseAIntegerDeclaration(AIntegerDeclaration node);
    void caseAP0NetDeclaration(AP0NetDeclaration node);
    void caseAP1NetDeclaration(AP1NetDeclaration node);
    void caseAP2NetDeclaration(AP2NetDeclaration node);
    void caseAP3NetDeclaration(AP3NetDeclaration node);
    void caseAP4NetDeclaration(AP4NetDeclaration node);
    void caseAP5NetDeclaration(AP5NetDeclaration node);
    void caseAP6NetDeclaration(AP6NetDeclaration node);
    void caseAP7NetDeclaration(AP7NetDeclaration node);
    void caseAVecVectoredOrScalared(AVecVectoredOrScalared node);
    void caseAScalarVectoredOrScalared(AScalarVectoredOrScalared node);
    void caseARealDeclaration(ARealDeclaration node);
    void caseARealtimeDeclaration(ARealtimeDeclaration node);
    void caseARegDeclaration(ARegDeclaration node);
    void caseATimeDeclaration(ATimeDeclaration node);
    void caseAP0NetType(AP0NetType node);
    void caseAP1NetType(AP1NetType node);
    void caseAP2NetType(AP2NetType node);
    void caseAP3NetType(AP3NetType node);
    void caseAP4NetType(AP4NetType node);
    void caseAP5NetType(AP5NetType node);
    void caseAP6NetType(AP6NetType node);
    void caseAP7NetType(AP7NetType node);
    void caseAP8NetType(AP8NetType node);
    void caseAP9NetType(AP9NetType node);
    void caseAP10NetType(AP10NetType node);
    void caseAP0OutputVariableType(AP0OutputVariableType node);
    void caseAP1OutputVariableType(AP1OutputVariableType node);
    void caseAP0Type(AP0Type node);
    void caseAP1Type(AP1Type node);
    void caseAP0DriveStrength(AP0DriveStrength node);
    void caseAP1DriveStrength(AP1DriveStrength node);
    void caseAP2DriveStrength(AP2DriveStrength node);
    void caseAP3DriveStrength(AP3DriveStrength node);
    void caseAP4DriveStrength(AP4DriveStrength node);
    void caseAP5DriveStrength(AP5DriveStrength node);
    void caseAP0Strength0(AP0Strength0 node);
    void caseAP1Strength0(AP1Strength0 node);
    void caseAP2Strength0(AP2Strength0 node);
    void caseAP3Strength0(AP3Strength0 node);
    void caseAP0Strength1(AP0Strength1 node);
    void caseAP1Strength1(AP1Strength1 node);
    void caseAP2Strength1(AP2Strength1 node);
    void caseAP3Strength1(AP3Strength1 node);
    void caseAP0ChargeStrength(AP0ChargeStrength node);
    void caseAP1ChargeStrength(AP1ChargeStrength node);
    void caseAP2ChargeStrength(AP2ChargeStrength node);
    void caseAP0Delay3(AP0Delay3 node);
    void caseAP1Delay3(AP1Delay3 node);
    void caseAP2Delay3(AP2Delay3 node);
    void caseAP3Delay3(AP3Delay3 node);
    void caseAP0Delay2(AP0Delay2 node);
    void caseAP2Delay2(AP2Delay2 node);
    void caseAP3Delay2(AP3Delay2 node);
    void caseAP0DelayValue(AP0DelayValue node);
    void caseAP1DelayValue(AP1DelayValue node);
    void caseAP2DelayValue(AP2DelayValue node);
    void caseAP0ListOfNetDeclAssignments(AP0ListOfNetDeclAssignments node);
    void caseAP1ListOfNetDeclAssignments(AP1ListOfNetDeclAssignments node);
    void caseAP0ListOfPortIdentifiers(AP0ListOfPortIdentifiers node);
    void caseAP1ListOfPortIdentifiers(AP1ListOfPortIdentifiers node);
    void caseAP0ListOfEventIdentifiers(AP0ListOfEventIdentifiers node);
    void caseAP1ListOfEventIdentifiers(AP1ListOfEventIdentifiers node);
    void caseAP0ListOfNetIdentifiers(AP0ListOfNetIdentifiers node);
    void caseAP1ListOfNetIdentifiers(AP1ListOfNetIdentifiers node);
    void caseAP0ListOfParamAssignments(AP0ListOfParamAssignments node);
    void caseAP1ListOfParamAssignments(AP1ListOfParamAssignments node);
    void caseAP0ListOfSpecparamAssignments(AP0ListOfSpecparamAssignments node);
    void caseAP1ListOfSpecparamAssignments(AP1ListOfSpecparamAssignments node);
    void caseAP0ListOfVariablePortIdentifiers(AP0ListOfVariablePortIdentifiers node);
    void caseAP1ListOfVariablePortIdentifiers(AP1ListOfVariablePortIdentifiers node);
    void caseAP2ListOfVariablePortIdentifiers(AP2ListOfVariablePortIdentifiers node);
    void caseAP3ListOfVariablePortIdentifiers(AP3ListOfVariablePortIdentifiers node);
    void caseAP0ListOfVariableIdentifiers(AP0ListOfVariableIdentifiers node);
    void caseAP1ListOfVariableIdentifiers(AP1ListOfVariableIdentifiers node);
    void caseAP0ListOfRealIdentifiers(AP0ListOfRealIdentifiers node);
    void caseAP1ListOfRealIdentifiers(AP1ListOfRealIdentifiers node);
    void caseANetDeclAssignment(ANetDeclAssignment node);
    void caseAParamAssignment(AParamAssignment node);
    void caseAP0SpecparamAssignment(AP0SpecparamAssignment node);
    void caseADimension(ADimension node);
    void caseARange(ARange node);
    void caseAFunctionDeclaration(AFunctionDeclaration node);
    void caseAFunctionDeclarationL(AFunctionDeclarationL node);
    void caseAP0FunctionItemDeclaration(AP0FunctionItemDeclaration node);
    void caseAP1FunctionItemDeclaration(AP1FunctionItemDeclaration node);
    void caseAP0FunctionPortList(AP0FunctionPortList node);
    void caseAP1FunctionPortList(AP1FunctionPortList node);
    void caseAP0FunctionPortListItem(AP0FunctionPortListItem node);
    void caseAP1FunctionPortListItem(AP1FunctionPortListItem node);
    void caseAP2FunctionPortListItem(AP2FunctionPortListItem node);
    void caseAP0FunctionRangeOrType(AP0FunctionRangeOrType node);
    void caseAP1FunctionRangeOrType(AP1FunctionRangeOrType node);
    void caseAP2FunctionRangeOrType(AP2FunctionRangeOrType node);
    void caseAP3FunctionRangeOrType(AP3FunctionRangeOrType node);
    void caseAP4FunctionRangeOrType(AP4FunctionRangeOrType node);
    void caseAP0TaskDeclaration(AP0TaskDeclaration node);
    void caseAP1TaskDeclaration(AP1TaskDeclaration node);
    void caseAP0TaskItemDeclaration(AP0TaskItemDeclaration node);
    void caseAP1TaskItemDeclaration(AP1TaskItemDeclaration node);
    void caseAP2TaskItemDeclaration(AP2TaskItemDeclaration node);
    void caseAP3TaskItemDeclaration(AP3TaskItemDeclaration node);
    void caseAP0TaskPortList(AP0TaskPortList node);
    void caseAP1TaskPortList(AP1TaskPortList node);
    void caseAP0TaskPortItem(AP0TaskPortItem node);
    void caseAP1TaskPortItem(AP1TaskPortItem node);
    void caseAP2TaskPortItem(AP2TaskPortItem node);
    void caseAP3TaskPortItem(AP3TaskPortItem node);
    void caseAP4TaskPortItem(AP4TaskPortItem node);
    void caseAP5TaskPortItem(AP5TaskPortItem node);
    void caseAP6TaskPortItem(AP6TaskPortItem node);
    void caseAP0TfInputDeclaration(AP0TfInputDeclaration node);
    void caseAP1TfInputDeclaration(AP1TfInputDeclaration node);
    void caseAP0TfOutputDeclaration(AP0TfOutputDeclaration node);
    void caseAP1TfOutputDeclaration(AP1TfOutputDeclaration node);
    void caseAP0TfInoutDeclaration(AP0TfInoutDeclaration node);
    void caseAP1TfInoutDeclaration(AP1TfInoutDeclaration node);
    void caseAP0TaskPortType(AP0TaskPortType node);
    void caseAP1TaskPortType(AP1TaskPortType node);
    void caseAP2TaskPortType(AP2TaskPortType node);
    void caseAP3TaskPortType(AP3TaskPortType node);
    void caseAP0BlockItemDeclaration(AP0BlockItemDeclaration node);
    void caseAP1BlockItemDeclaration(AP1BlockItemDeclaration node);
    void caseAP2BlockItemDeclaration(AP2BlockItemDeclaration node);
    void caseAP3BlockItemDeclaration(AP3BlockItemDeclaration node);
    void caseAP4BlockItemDeclaration(AP4BlockItemDeclaration node);
    void caseAP5BlockItemDeclaration(AP5BlockItemDeclaration node);
    void caseAP6BlockItemDeclaration(AP6BlockItemDeclaration node);
    void caseAP7BlockItemDeclaration(AP7BlockItemDeclaration node);
    void caseAP0ListOfBlockVariableIdentifiers(AP0ListOfBlockVariableIdentifiers node);
    void caseAP1ListOfBlockVariableIdentifiers(AP1ListOfBlockVariableIdentifiers node);
    void caseAP0ListOfBlockRealIdentifiers(AP0ListOfBlockRealIdentifiers node);
    void caseAP1ListOfBlockRealIdentifiers(AP1ListOfBlockRealIdentifiers node);
    void caseABlockVariableType(ABlockVariableType node);
    void caseABlockRealType(ABlockRealType node);
    void caseACmosGateInstantiation(ACmosGateInstantiation node);
    void caseAEnableGateInstantiation(AEnableGateInstantiation node);
    void caseAMosGateInstantiation(AMosGateInstantiation node);
    void caseANinputGateInstantiation(ANinputGateInstantiation node);
    void caseANoutputGateInstantiation(ANoutputGateInstantiation node);
    void caseAPassenGateInstantiation(APassenGateInstantiation node);
    void caseAPassGateInstantiation(APassGateInstantiation node);
    void caseAPulldownGateInstantiation(APulldownGateInstantiation node);
    void caseAPullupGateInstantiation(APullupGateInstantiation node);
    void caseAP0CmosSwitchInstances(AP0CmosSwitchInstances node);
    void caseAP1CmosSwitchInstances(AP1CmosSwitchInstances node);
    void caseAP0EnableGateInstances(AP0EnableGateInstances node);
    void caseAP1EnableGateInstances(AP1EnableGateInstances node);
    void caseAP0MosSwitchInstances(AP0MosSwitchInstances node);
    void caseAP1MosSwitchInstances(AP1MosSwitchInstances node);
    void caseAP0NInputGateInstances(AP0NInputGateInstances node);
    void caseAP1NInputGateInstances(AP1NInputGateInstances node);
    void caseAP0NOutputGateInstances(AP0NOutputGateInstances node);
    void caseAP1NOutputGateInstances(AP1NOutputGateInstances node);
    void caseAP0PassEnableSwitchInstances(AP0PassEnableSwitchInstances node);
    void caseAP1PassEnableSwitchInstances(AP1PassEnableSwitchInstances node);
    void caseAP0PassSwitchInstances(AP0PassSwitchInstances node);
    void caseAP1PassSwitchInstances(AP1PassSwitchInstances node);
    void caseAP0PullGateInstances(AP0PullGateInstances node);
    void caseAP1PullGateInstances(AP1PullGateInstances node);
    void caseACmosSwitchInstance(ACmosSwitchInstance node);
    void caseAEnableGateInstance(AEnableGateInstance node);
    void caseAMosSwitchInstance(AMosSwitchInstance node);
    void caseANInputGateInstance(ANInputGateInstance node);
    void caseANOutputGateInstance(ANOutputGateInstance node);
    void caseAPassSwitchInstance(APassSwitchInstance node);
    void caseAPassEnableSwitchInstance(APassEnableSwitchInstance node);
    void caseAPullGateInstance(APullGateInstance node);
    void caseANameOfGateInstance(ANameOfGateInstance node);
    void caseAP0Terminals(AP0Terminals node);
    void caseAP1Terminals(AP1Terminals node);
    void caseAP0PulldownStrength(AP0PulldownStrength node);
    void caseAP1PulldownStrength(AP1PulldownStrength node);
    void caseAP2PulldownStrength(AP2PulldownStrength node);
    void caseAP0PullupStrength(AP0PullupStrength node);
    void caseAP1PullupStrength(AP1PullupStrength node);
    void caseAP2PullupStrength(AP2PullupStrength node);
    void caseAP0Terminal(AP0Terminal node);
    void caseAEnableTerminal(AEnableTerminal node);
    void caseANcontrolTerminal(ANcontrolTerminal node);
    void caseAPcontrolTerminal(APcontrolTerminal node);
    void caseACmosCmosSwitchtype(ACmosCmosSwitchtype node);
    void caseARcmosCmosSwitchtype(ARcmosCmosSwitchtype node);
    void caseAP0EnableGatetype(AP0EnableGatetype node);
    void caseAP1EnableGatetype(AP1EnableGatetype node);
    void caseAP2EnableGatetype(AP2EnableGatetype node);
    void caseAP3EnableGatetype(AP3EnableGatetype node);
    void caseAP0MosSwitchtype(AP0MosSwitchtype node);
    void caseAP1MosSwitchtype(AP1MosSwitchtype node);
    void caseAP2MosSwitchtype(AP2MosSwitchtype node);
    void caseAP3MosSwitchtype(AP3MosSwitchtype node);
    void caseAP0NInputGatetype(AP0NInputGatetype node);
    void caseAP1NInputGatetype(AP1NInputGatetype node);
    void caseAP2NInputGatetype(AP2NInputGatetype node);
    void caseAP3NInputGatetype(AP3NInputGatetype node);
    void caseAP4NInputGatetype(AP4NInputGatetype node);
    void caseAP5NInputGatetype(AP5NInputGatetype node);
    void caseAP0NOutputGatetype(AP0NOutputGatetype node);
    void caseAP1NOutputGatetype(AP1NOutputGatetype node);
    void caseAP0PassEnSwitchtype(AP0PassEnSwitchtype node);
    void caseAP1PassEnSwitchtype(AP1PassEnSwitchtype node);
    void caseAP2PassEnSwitchtype(AP2PassEnSwitchtype node);
    void caseAP3PassEnSwitchtype(AP3PassEnSwitchtype node);
    void caseAP0PassSwitchtype(AP0PassSwitchtype node);
    void caseAP1PassSwitchtype(AP1PassSwitchtype node);
    void caseAModuleInstantiation(AModuleInstantiation node);
    void caseAP0ModuleInstances(AP0ModuleInstances node);
    void caseAP1ModuleInstances(AP1ModuleInstances node);
    void caseAParameterValueAssignment(AParameterValueAssignment node);
    void caseAP0ListOfParameterAssignments(AP0ListOfParameterAssignments node);
    void caseAP1ListOfParameterAssignments(AP1ListOfParameterAssignments node);
    void caseAP0OrderedParameterAssignments(AP0OrderedParameterAssignments node);
    void caseAP1OrderedParameterAssignments(AP1OrderedParameterAssignments node);
    void caseAP0NamedParameterAssignments(AP0NamedParameterAssignments node);
    void caseAP1NamedParameterAssignments(AP1NamedParameterAssignments node);
    void caseANamedParameterAssignment(ANamedParameterAssignment node);
    void caseAModuleInstance(AModuleInstance node);
    void caseANameOfModuleInstance(ANameOfModuleInstance node);
    void caseAP0PortConnections(AP0PortConnections node);
    void caseAP1PortConnections(AP1PortConnections node);
    void caseAP0PortConnection(AP0PortConnection node);
    void caseAP1PortConnection(AP1PortConnection node);
    void caseAP2PortConnection(AP2PortConnection node);
    void caseAContinuousAssign(AContinuousAssign node);
    void caseAP0ListOfAssignments(AP0ListOfAssignments node);
    void caseAP1ListOfAssignments(AP1ListOfAssignments node);
    void caseAAssignment(AAssignment node);
    void caseAInitialConstruct(AInitialConstruct node);
    void caseAAlwaysConstruct(AAlwaysConstruct node);
    void caseABlockingAssignment(ABlockingAssignment node);
    void caseANonblockingAssignment(ANonblockingAssignment node);
    void caseAP0ProceduralContinuousAssignments(AP0ProceduralContinuousAssignments node);
    void caseAP1ProceduralContinuousAssignments(AP1ProceduralContinuousAssignments node);
    void caseAP2ProceduralContinuousAssignments(AP2ProceduralContinuousAssignments node);
    void caseAP3ProceduralContinuousAssignments(AP3ProceduralContinuousAssignments node);
    void caseAParBlock(AParBlock node);
    void caseASeqBlock(ASeqBlock node);
    void caseABlockId(ABlockId node);
    void caseAP0Statement(AP0Statement node);
    void caseAP1Statement(AP1Statement node);
    void caseAP2Statement(AP2Statement node);
    void caseAP3Statement(AP3Statement node);
    void caseAP4Statement(AP4Statement node);
    void caseAP8Statement(AP8Statement node);
    void caseAP0StatementNoShortIf(AP0StatementNoShortIf node);
    void caseAP1StatementNoShortIf(AP1StatementNoShortIf node);
    void caseAP2StatementNoShortIf(AP2StatementNoShortIf node);
    void caseAP3StatementNoShortIf(AP3StatementNoShortIf node);
    void caseAP8StatementNoShortIf(AP8StatementNoShortIf node);
    void caseAP0StatementWithoutTrailingSubstatement(AP0StatementWithoutTrailingSubstatement node);
    void caseAP1StatementWithoutTrailingSubstatement(AP1StatementWithoutTrailingSubstatement node);
    void caseAP2StatementWithoutTrailingSubstatement(AP2StatementWithoutTrailingSubstatement node);
    void caseAP3StatementWithoutTrailingSubstatement(AP3StatementWithoutTrailingSubstatement node);
    void caseAP4StatementWithoutTrailingSubstatement(AP4StatementWithoutTrailingSubstatement node);
    void caseAP5StatementWithoutTrailingSubstatement(AP5StatementWithoutTrailingSubstatement node);
    void caseAP6StatementWithoutTrailingSubstatement(AP6StatementWithoutTrailingSubstatement node);
    void caseAP7StatementWithoutTrailingSubstatement(AP7StatementWithoutTrailingSubstatement node);
    void caseAP8StatementWithoutTrailingSubstatement(AP8StatementWithoutTrailingSubstatement node);
    void caseAP9StatementWithoutTrailingSubstatement(AP9StatementWithoutTrailingSubstatement node);
    void caseAP0StatementOrNull(AP0StatementOrNull node);
    void caseAP1StatementOrNull(AP1StatementOrNull node);
    void caseAP0StatementNsfOrNull(AP0StatementNsfOrNull node);
    void caseAP1StatementNsfOrNull(AP1StatementNsfOrNull node);
    void caseAP0DelayControl(AP0DelayControl node);
    void caseAP1DelayControl(AP1DelayControl node);
    void caseAP0DelayOrEventControl(AP0DelayOrEventControl node);
    void caseAP1DelayOrEventControl(AP1DelayOrEventControl node);
    void caseAP2DelayOrEventControl(AP2DelayOrEventControl node);
    void caseAP0DisableStatement(AP0DisableStatement node);
    void caseAP1DisableStatement(AP1DisableStatement node);
    void caseAP0EventControl(AP0EventControl node);
    void caseAP1EventControl(AP1EventControl node);
    void caseAP2EventControl(AP2EventControl node);
    void caseAP3EventControl(AP3EventControl node);
    void caseAEventTrigger(AEventTrigger node);
    void caseAP1EventTriggerExpr(AP1EventTriggerExpr node);
    void caseAP2EventTriggerExpr(AP2EventTriggerExpr node);
    void caseAP3EventTriggerExpr(AP3EventTriggerExpr node);
    void caseAP4EventTriggerExpr(AP4EventTriggerExpr node);
    void caseAP0EventExpression(AP0EventExpression node);
    void caseAP1EventExpression(AP1EventExpression node);
    void caseAP2EventExpression(AP2EventExpression node);
    void caseAP0EventExpressionTerm(AP0EventExpressionTerm node);
    void caseAP1EventExpressionTerm(AP1EventExpressionTerm node);
    void caseAP2EventExpressionTerm(AP2EventExpressionTerm node);
    void caseAP0ProceduralTimingControl(AP0ProceduralTimingControl node);
    void caseAP1ProceduralTimingControl(AP1ProceduralTimingControl node);
    void caseAProceduralTimingControlStatement(AProceduralTimingControlStatement node);
    void caseAProceduralTimingControlStatementNsf(AProceduralTimingControlStatementNsf node);
    void caseAWaitStatement(AWaitStatement node);
    void caseAWaitStatementNsf(AWaitStatementNsf node);
    void caseAIfThenStatement(AIfThenStatement node);
    void caseAIfThenElseStatement(AIfThenElseStatement node);
    void caseAIfThenElseStatementNsf(AIfThenElseStatementNsf node);
    void caseAP0CaseStatement(AP0CaseStatement node);
    void caseAP1CaseStatement(AP1CaseStatement node);
    void caseAP2CaseStatement(AP2CaseStatement node);
    void caseAP0CaseItem(AP0CaseItem node);
    void caseAP1CaseItem(AP1CaseItem node);
    void caseAP0CaseItemEl(AP0CaseItemEl node);
    void caseAP1CaseItemEl(AP1CaseItemEl node);
    void caseAP0LoopStatement(AP0LoopStatement node);
    void caseAP1LoopStatement(AP1LoopStatement node);
    void caseAP2LoopStatement(AP2LoopStatement node);
    void caseAP3LoopStatement(AP3LoopStatement node);
    void caseAP0LoopStatementNsf(AP0LoopStatementNsf node);
    void caseAP1LoopStatementNsf(AP1LoopStatementNsf node);
    void caseAP2LoopStatementNsf(AP2LoopStatementNsf node);
    void caseAP3LoopStatementNsf(AP3LoopStatementNsf node);
    void caseAP0SystemTaskEnable(AP0SystemTaskEnable node);
    void caseAP1SystemTaskEnable(AP1SystemTaskEnable node);
    void caseAP0TaskEnable(AP0TaskEnable node);
    void caseAP1TaskEnable(AP1TaskEnable node);
    void caseAP0TaskEnableEl(AP0TaskEnableEl node);
    void caseAP1TaskEnableEl(AP1TaskEnableEl node);
    void caseASpecifyBlock(ASpecifyBlock node);
    void caseAP0SpecifyItem(AP0SpecifyItem node);
    void caseAP1SpecifyItem(AP1SpecifyItem node);
    void caseAP2SpecifyItem(AP2SpecifyItem node);
    void caseAP3SpecifyItem(AP3SpecifyItem node);
    void caseAP4SpecifyItem(AP4SpecifyItem node);
    void caseAP0PulsestyleDeclaration(AP0PulsestyleDeclaration node);
    void caseAP1PulsestyleDeclaration(AP1PulsestyleDeclaration node);
    void caseAP0ShowcancelledDeclaration(AP0ShowcancelledDeclaration node);
    void caseAP1ShowcancelledDeclaration(AP1ShowcancelledDeclaration node);
    void caseAP0PathDeclaration(AP0PathDeclaration node);
    void caseAP1PathDeclaration(AP1PathDeclaration node);
    void caseAP2PathDeclaration(AP2PathDeclaration node);
    void caseAParallelPathSimplePathDeclaration(AParallelPathSimplePathDeclaration node);
    void caseAFullPathSimplePathDeclaration(AFullPathSimplePathDeclaration node);
    void caseAP0ListOfPathDescriptors(AP0ListOfPathDescriptors node);
    void caseAP1ListOfPathDescriptors(AP1ListOfPathDescriptors node);
    void caseAP0SpecifyTerminalDescriptor(AP0SpecifyTerminalDescriptor node);
    void caseAP1SpecifyTerminalDescriptor(AP1SpecifyTerminalDescriptor node);
    void caseAP0PathDelayValue(AP0PathDelayValue node);
    void caseAP1PathDelayValue(AP1PathDelayValue node);
    void caseAPPolarityOperator(APPolarityOperator node);
    void caseAMPolarityOperator(AMPolarityOperator node);
    void caseAP0ListOfPathDelayExpressions(AP0ListOfPathDelayExpressions node);
    void caseAP1ListOfPathDelayExpressions(AP1ListOfPathDelayExpressions node);
    void caseAParallelEdgeSensitivePathDeclaration(AParallelEdgeSensitivePathDeclaration node);
    void caseAFullEdgeSensitivePathDeclaration(AFullEdgeSensitivePathDeclaration node);
    void caseANumDelayValueSimple(ANumDelayValueSimple node);
    void caseAIdDelayValueSimple(AIdDelayValueSimple node);
    void caseAPEdgeIdentifier(APEdgeIdentifier node);
    void caseANEdgeIdentifier(ANEdgeIdentifier node);
    void caseAP0StateDependentPathDeclaration(AP0StateDependentPathDeclaration node);
    void caseAP1StateDependentPathDeclaration(AP1StateDependentPathDeclaration node);
    void caseAP2StateDependentPathDeclaration(AP2StateDependentPathDeclaration node);
    void caseAP0SystemTimingCheck(AP0SystemTimingCheck node);
    void caseAP1SystemTimingCheck(AP1SystemTimingCheck node);
    void caseAP2SystemTimingCheck(AP2SystemTimingCheck node);
    void caseAP9SystemTimingCheck(AP9SystemTimingCheck node);
    void caseAP10SystemTimingCheck(AP10SystemTimingCheck node);
    void caseAP11SystemTimingCheck(AP11SystemTimingCheck node);
    void caseAP0SetupTimingCheck(AP0SetupTimingCheck node);
    void caseAP1SetupTimingCheck(AP1SetupTimingCheck node);
    void caseAP0HoldTimingCheck(AP0HoldTimingCheck node);
    void caseAP1HoldTimingCheck(AP1HoldTimingCheck node);
    void caseAP0SetupholdTimingCheck(AP0SetupholdTimingCheck node);
    void caseAP1SetupholdTimingCheck(AP1SetupholdTimingCheck node);
    void caseAP2SetupholdTimingCheck(AP2SetupholdTimingCheck node);
    void caseAP3SetupholdTimingCheck(AP3SetupholdTimingCheck node);
    void caseAP4SetupholdTimingCheck(AP4SetupholdTimingCheck node);
    void caseAP5SetupholdTimingCheck(AP5SetupholdTimingCheck node);
    void caseAP0PeriodTimingCheck(AP0PeriodTimingCheck node);
    void caseAP1PeriodTimingCheck(AP1PeriodTimingCheck node);
    void caseAP0WidthTimingCheck(AP0WidthTimingCheck node);
    void caseAP1WidthTimingCheck(AP1WidthTimingCheck node);
    void caseAP2WidthTimingCheck(AP2WidthTimingCheck node);
    void caseAP0NochangeTimingCheck(AP0NochangeTimingCheck node);
    void caseAP1NochangeTimingCheck(AP1NochangeTimingCheck node);
    void caseAP0DelayedData(AP0DelayedData node);
    void caseAP1DelayedData(AP1DelayedData node);
    void caseAP0DelayedReference(AP0DelayedReference node);
    void caseAP1DelayedReference(AP1DelayedReference node);
    void caseAP0TimingCheckEvent(AP0TimingCheckEvent node);
    void caseAP1TimingCheckEvent(AP1TimingCheckEvent node);
    void caseAP0TimingCheckEventControl(AP0TimingCheckEventControl node);
    void caseAP1TimingCheckEventControl(AP1TimingCheckEventControl node);
    void caseAP2TimingCheckEventControl(AP2TimingCheckEventControl node);
    void caseAEdgeControlSpecifier(AEdgeControlSpecifier node);
    void caseAEdgeControlSpecifierRep(AEdgeControlSpecifierRep node);
    void caseATimingCheckCondition(ATimingCheckCondition node);
    void caseAConcatenation(AConcatenation node);
    void caseAConcatenationRep(AConcatenationRep node);
    void caseAModulePathConcatenation(AModulePathConcatenation node);
    void caseAModulePathConcatenationRep(AModulePathConcatenationRep node);
    void caseAModulePathMultipleConcatenation(AModulePathMultipleConcatenation node);
    void caseAMultipleConcatenation(AMultipleConcatenation node);
    void caseAParamsSystemFunctionCall(AParamsSystemFunctionCall node);
    void caseANoparamsSystemFunctionCall(ANoparamsSystemFunctionCall node);
    void caseASystemFunctionCallRep(ASystemFunctionCallRep node);
    void caseACondExpression(ACondExpression node);
    void caseASimpleExpression(ASimpleExpression node);
    void caseAConditionalExpression(AConditionalExpression node);
    void caseAUnaryExpression1(AUnaryExpression1 node);
    void caseABinaryExpression1(ABinaryExpression1 node);
    void caseAUnaryUnaryExpression(AUnaryUnaryExpression node);
    void caseAPrimaryUnaryExpression(APrimaryUnaryExpression node);
    void caseABracketRange(ABracketRange node);
    void caseAExpRangeExpression(AExpRangeExpression node);
    void caseAP1RangeExpression(AP1RangeExpression node);
    void caseAP2RangeExpression(AP2RangeExpression node);
    void caseAP3RangeExpression(AP3RangeExpression node);
    void caseAExpMintypmaxExpression(AExpMintypmaxExpression node);
    void caseAMultiMintypmaxExpression(AMultiMintypmaxExpression node);
    void caseACondModulePathExpression(ACondModulePathExpression node);
    void caseASimpleModulePathExpression(ASimpleModulePathExpression node);
    void caseAModulePathConditionalExpression(AModulePathConditionalExpression node);
    void caseAUnaryModulePathExpression1(AUnaryModulePathExpression1 node);
    void caseABinaryModulePathExpression1(ABinaryModulePathExpression1 node);
    void caseAUnaryModulePathUnaryExpression(AUnaryModulePathUnaryExpression node);
    void caseAPrimaryModulePathUnaryExpression(APrimaryModulePathUnaryExpression node);
    void caseAP0ModulePathMintypmaxExpression(AP0ModulePathMintypmaxExpression node);
    void caseAP1ModulePathMintypmaxExpression(AP1ModulePathMintypmaxExpression node);
    void caseANumPrimary(ANumPrimary node);
    void caseAIdPrimary(AIdPrimary node);
    void caseAConcatPrimary(AConcatPrimary node);
    void caseAMconcatPrimary(AMconcatPrimary node);
    void caseACallPrimary(ACallPrimary node);
    void caseASyscallPrimary(ASyscallPrimary node);
    void caseAMtmPrimary(AMtmPrimary node);
    void caseAStringPrimary(AStringPrimary node);
    void caseAPrimaryRep1(APrimaryRep1 node);
    void caseAFunctionCallRep(AFunctionCallRep node);
    void caseAP0PrimaryHierarchicalIdentifier(AP0PrimaryHierarchicalIdentifier node);
    void caseAP1PrimaryHierarchicalIdentifier(AP1PrimaryHierarchicalIdentifier node);
    void caseAP0ModulePathPrimary(AP0ModulePathPrimary node);
    void caseAP1ModulePathPrimary(AP1ModulePathPrimary node);
    void caseAP2ModulePathPrimary(AP2ModulePathPrimary node);
    void caseAP3ModulePathPrimary(AP3ModulePathPrimary node);
    void caseACallModulePathPrimary(ACallModulePathPrimary node);
    void caseAP5ModulePathPrimary(AP5ModulePathPrimary node);
    void caseAP6ModulePathPrimary(AP6ModulePathPrimary node);
    void caseAP0Lvalue(AP0Lvalue node);
    void caseAP1Lvalue(AP1Lvalue node);
    void caseALvalueRep2(ALvalueRep2 node);
    void caseAP0UnaryOperator(AP0UnaryOperator node);
    void caseAP1UnaryOperator(AP1UnaryOperator node);
    void caseAP2UnaryOperator(AP2UnaryOperator node);
    void caseAP3UnaryOperator(AP3UnaryOperator node);
    void caseAP4UnaryOperator(AP4UnaryOperator node);
    void caseAP5UnaryOperator(AP5UnaryOperator node);
    void caseAP6UnaryOperator(AP6UnaryOperator node);
    void caseAP7UnaryOperator(AP7UnaryOperator node);
    void caseAP8UnaryOperator(AP8UnaryOperator node);
    void caseAP9UnaryOperator(AP9UnaryOperator node);
    void caseAP0BinaryOperator(AP0BinaryOperator node);
    void caseAP1BinaryOperator(AP1BinaryOperator node);
    void caseAP2BinaryOperator(AP2BinaryOperator node);
    void caseAP3BinaryOperator(AP3BinaryOperator node);
    void caseAP4BinaryOperator(AP4BinaryOperator node);
    void caseAP5BinaryOperator(AP5BinaryOperator node);
    void caseAP6BinaryOperator(AP6BinaryOperator node);
    void caseAP7BinaryOperator(AP7BinaryOperator node);
    void caseAP8BinaryOperator(AP8BinaryOperator node);
    void caseAP9BinaryOperator(AP9BinaryOperator node);
    void caseAP10BinaryOperator(AP10BinaryOperator node);
    void caseAP11BinaryOperator(AP11BinaryOperator node);
    void caseAP12BinaryOperator(AP12BinaryOperator node);
    void caseAP13BinaryOperator(AP13BinaryOperator node);
    void caseAP14BinaryOperator(AP14BinaryOperator node);
    void caseAP15BinaryOperator(AP15BinaryOperator node);
    void caseAP16BinaryOperator(AP16BinaryOperator node);
    void caseAP17BinaryOperator(AP17BinaryOperator node);
    void caseAP18BinaryOperator(AP18BinaryOperator node);
    void caseAP19BinaryOperator(AP19BinaryOperator node);
    void caseAP21BinaryOperator(AP21BinaryOperator node);
    void caseAP22BinaryOperator(AP22BinaryOperator node);
    void caseAP23BinaryOperator(AP23BinaryOperator node);
    void caseAP0UnaryModulePathOperator(AP0UnaryModulePathOperator node);
    void caseAP1UnaryModulePathOperator(AP1UnaryModulePathOperator node);
    void caseAP2UnaryModulePathOperator(AP2UnaryModulePathOperator node);
    void caseAP3UnaryModulePathOperator(AP3UnaryModulePathOperator node);
    void caseAP4UnaryModulePathOperator(AP4UnaryModulePathOperator node);
    void caseAP5UnaryModulePathOperator(AP5UnaryModulePathOperator node);
    void caseAP6UnaryModulePathOperator(AP6UnaryModulePathOperator node);
    void caseAP7UnaryModulePathOperator(AP7UnaryModulePathOperator node);
    void caseAP0BinaryModulePathOperator(AP0BinaryModulePathOperator node);
    void caseAP1BinaryModulePathOperator(AP1BinaryModulePathOperator node);
    void caseAP2BinaryModulePathOperator(AP2BinaryModulePathOperator node);
    void caseAP3BinaryModulePathOperator(AP3BinaryModulePathOperator node);
    void caseAP4BinaryModulePathOperator(AP4BinaryModulePathOperator node);
    void caseAP5BinaryModulePathOperator(AP5BinaryModulePathOperator node);
    void caseAP6BinaryModulePathOperator(AP6BinaryModulePathOperator node);
    void caseAP8BinaryModulePathOperator(AP8BinaryModulePathOperator node);
    void caseADecNumber(ADecNumber node);
    void caseAOctNumber(AOctNumber node);
    void caseABinNumber(ABinNumber node);
    void caseAHexNumber(AHexNumber node);
    void caseARealNumber(ARealNumber node);
    void caseASimpleIdentifier(ASimpleIdentifier node);
    void caseAEscapedIdentifier(AEscapedIdentifier node);
    void caseAP0HierarchicalIdentifier(AP0HierarchicalIdentifier node);
    void caseAP1HierarchicalIdentifier(AP1HierarchicalIdentifier node);
    void caseAP2HierarchicalIdentifier(AP2HierarchicalIdentifier node);
    void caseAP3HierarchicalIdentifier(AP3HierarchicalIdentifier node);
    void caseAHierarchicalIdentifierMb(AHierarchicalIdentifierMb node);
    void caseAP0HierarchicalIdentifierMbExt(AP0HierarchicalIdentifierMbExt node);
    void caseAP1HierarchicalIdentifierMbExt(AP1HierarchicalIdentifierMbExt node);

    void caseTWhiteSpace(TWhiteSpace node);
    void caseTRealNumber(TRealNumber node);
    void caseTDecimalNumber(TDecimalNumber node);
    void caseTBinaryNumber(TBinaryNumber node);
    void caseTOctalNumber(TOctalNumber node);
    void caseTHexNumber(THexNumber node);
    void caseTTEdgeDescriptor(TTEdgeDescriptor node);
    void caseTString(TString node);
    void caseTBlockComment(TBlockComment node);
    void caseTAttributeInstance(TAttributeInstance node);
    void caseTOneLineComment(TOneLineComment node);
    void caseTTCeq(TTCeq node);
    void caseTTEg(TTEg node);
    void caseTTEq(TTEq node);
    void caseTTContribute(TTContribute node);
    void caseTTLe(TTLe node);
    void caseTTLs(TTLs node);
    void caseTTGe(TTGe node);
    void caseTTRs(TTRs node);
    void caseTTRss(TTRss node);
    void caseTTCne(TTCne node);
    void caseTTNe(TTNe node);
    void caseTTTand(TTTand node);
    void caseTTLand(TTLand node);
    void caseTTAnd(TTAnd node);
    void caseTTLor(TTLor node);
    void caseTTNand(TTNand node);
    void caseTTNxor(TTNxor node);
    void caseTTRnor(TTRnor node);
    void caseTTSg(TTSg node);
    void caseTTPow(TTPow node);
    void caseTTXor(TTXor node);
    void caseTTPlusColon(TTPlusColon node);
    void caseTTMinusColon(TTMinusColon node);
    void caseTTTrigger(TTTrigger node);
    void caseTTComma(TTComma node);
    void caseTTPeriod(TTPeriod node);
    void caseTTEquals(TTEquals node);
    void caseTTSemicolon(TTSemicolon node);
    void caseTTColon(TTColon node);
    void caseTTLparen(TTLparen node);
    void caseTTRparen(TTRparen node);
    void caseTTHash(TTHash node);
    void caseTTAny(TTAny node);
    void caseTTAtStar(TTAtStar node);
    void caseTTAt(TTAt node);
    void caseTTLbracket(TTLbracket node);
    void caseTTRbracket(TTRbracket node);
    void caseTTLbrace(TTLbrace node);
    void caseTTRbrace(TTRbrace node);
    void caseTTPlus(TTPlus node);
    void caseTTMinus(TTMinus node);
    void caseTTTilde(TTTilde node);
    void caseTTExcl(TTExcl node);
    void caseTTPipe(TTPipe node);
    void caseTTStar(TTStar node);
    void caseTTDiv(TTDiv node);
    void caseTTPerc(TTPerc node);
    void caseTTGt(TTGt node);
    void caseTTLt(TTLt node);
    void caseTTQuestion(TTQuestion node);
    void caseTTUnderscore(TTUnderscore node);
    void caseTKSwidth(TKSwidth node);
    void caseTKSrecovery(TKSrecovery node);
    void caseTKSrecrem(TKSrecrem node);
    void caseTKSremoval(TKSremoval node);
    void caseTKShold(TKShold node);
    void caseTKSsetup(TKSsetup node);
    void caseTKSsetuphold(TKSsetuphold node);
    void caseTKSskew(TKSskew node);
    void caseTKStimeskew(TKStimeskew node);
    void caseTKSperiod(TKSperiod node);
    void caseTKSfullskew(TKSfullskew node);
    void caseTKSnochange(TKSnochange node);
    void caseTKAbs(TKAbs node);
    void caseTKAbstol(TKAbstol node);
    void caseTKAccess(TKAccess node);
    void caseTKAcos(TKAcos node);
    void caseTKAcosh(TKAcosh node);
    void caseTKAlways(TKAlways node);
    void caseTKAlwaysComb(TKAlwaysComb node);
    void caseTKAlwaysFf(TKAlwaysFf node);
    void caseTKAlwaysLatch(TKAlwaysLatch node);
    void caseTKAnalog(TKAnalog node);
    void caseTKAnd(TKAnd node);
    void caseTKAsin(TKAsin node);
    void caseTKAsinh(TKAsinh node);
    void caseTKAssert(TKAssert node);
    void caseTKAssign(TKAssign node);
    void caseTKAtan2(TKAtan2 node);
    void caseTKAtan(TKAtan node);
    void caseTKAtanh(TKAtanh node);
    void caseTKAutomatic(TKAutomatic node);
    void caseTKBegin(TKBegin node);
    void caseTKBool(TKBool node);
    void caseTKBuf(TKBuf node);
    void caseTKBufif0(TKBufif0 node);
    void caseTKBufif1(TKBufif1 node);
    void caseTKCase(TKCase node);
    void caseTKCasex(TKCasex node);
    void caseTKCasez(TKCasez node);
    void caseTKCeil(TKCeil node);
    void caseTKCell(TKCell node);
    void caseTKCmos(TKCmos node);
    void caseTKConfig(TKConfig node);
    void caseTKContinuous(TKContinuous node);
    void caseTKCos(TKCos node);
    void caseTKCosh(TKCosh node);
    void caseTKDdtNature(TKDdtNature node);
    void caseTKDeassign(TKDeassign node);
    void caseTKDefault(TKDefault node);
    void caseTKDefparam(TKDefparam node);
    void caseTKDesign(TKDesign node);
    void caseTKDisable(TKDisable node);
    void caseTKDiscipline(TKDiscipline node);
    void caseTKDiscrete(TKDiscrete node);
    void caseTKDomain(TKDomain node);
    void caseTKEdge(TKEdge node);
    void caseTKElse(TKElse node);
    void caseTKEndcase(TKEndcase node);
    void caseTKEndconfig(TKEndconfig node);
    void caseTKEnddiscipline(TKEnddiscipline node);
    void caseTKEnd(TKEnd node);
    void caseTKEndfunction(TKEndfunction node);
    void caseTKEndgenerate(TKEndgenerate node);
    void caseTKEndmodule(TKEndmodule node);
    void caseTKEndnature(TKEndnature node);
    void caseTKEndprimitive(TKEndprimitive node);
    void caseTKEndspecify(TKEndspecify node);
    void caseTKEndtable(TKEndtable node);
    void caseTKEndtask(TKEndtask node);
    void caseTKEvent(TKEvent node);
    void caseTKExclude(TKExclude node);
    void caseTKExp(TKExp node);
    void caseTKFloor(TKFloor node);
    void caseTKFlow(TKFlow node);
    void caseTKForce(TKForce node);
    void caseTKForever(TKForever node);
    void caseTKFor(TKFor node);
    void caseTKFork(TKFork node);
    void caseTKFrom(TKFrom node);
    void caseTKFunction(TKFunction node);
    void caseTKGenerate(TKGenerate node);
    void caseTKGenvar(TKGenvar node);
    void caseTKGround(TKGround node);
    void caseTKHighz0(TKHighz0 node);
    void caseTKHighz1(TKHighz1 node);
    void caseTKHypot(TKHypot node);
    void caseTKIdtNature(TKIdtNature node);
    void caseTKIf(TKIf node);
    void caseTKIfnone(TKIfnone node);
    void caseTKIncdir(TKIncdir node);
    void caseTKInclude(TKInclude node);
    void caseTKInf(TKInf node);
    void caseTKInitial(TKInitial node);
    void caseTKInout(TKInout node);
    void caseTKInput(TKInput node);
    void caseTKInstance(TKInstance node);
    void caseTKInteger(TKInteger node);
    void caseTKJoin(TKJoin node);
    void caseTKLarge(TKLarge node);
    void caseTKLiblist(TKLiblist node);
    void caseTKLibrary(TKLibrary node);
    void caseTKLn(TKLn node);
    void caseTKLocalparam(TKLocalparam node);
    void caseTKLogic(TKLogic node);
    void caseTKLog(TKLog node);
    void caseTKMacromodule(TKMacromodule node);
    void caseTKMax(TKMax node);
    void caseTKMedium(TKMedium node);
    void caseTKMin(TKMin node);
    void caseTKModule(TKModule node);
    void caseTKNand(TKNand node);
    void caseTKNature(TKNature node);
    void caseTKNegedge(TKNegedge node);
    void caseTKNmos(TKNmos node);
    void caseTKNor(TKNor node);
    void caseTKNoshowcancelled(TKNoshowcancelled node);
    void caseTKNotif0(TKNotif0 node);
    void caseTKNotif1(TKNotif1 node);
    void caseTKNot(TKNot node);
    void caseTKOr(TKOr node);
    void caseTKOutput(TKOutput node);
    void caseTKParameter(TKParameter node);
    void caseTKPmos(TKPmos node);
    void caseTKPosedge(TKPosedge node);
    void caseTKPotential(TKPotential node);
    void caseTKPow(TKPow node);
    void caseTKPrimitive(TKPrimitive node);
    void caseTKPull0(TKPull0 node);
    void caseTKPull1(TKPull1 node);
    void caseTKPulldown(TKPulldown node);
    void caseTKPullup(TKPullup node);
    void caseTKPulsestyleOndetect(TKPulsestyleOndetect node);
    void caseTKPulsestyleOnevent(TKPulsestyleOnevent node);
    void caseTKRcmos(TKRcmos node);
    void caseTKReal(TKReal node);
    void caseTKRealtime(TKRealtime node);
    void caseTKReg(TKReg node);
    void caseTKRelease(TKRelease node);
    void caseTKRepeat(TKRepeat node);
    void caseTKRnmos(TKRnmos node);
    void caseTKRpmos(TKRpmos node);
    void caseTKRtranif0(TKRtranif0 node);
    void caseTKRtranif1(TKRtranif1 node);
    void caseTKRtran(TKRtran node);
    void caseTKScalared(TKScalared node);
    void caseTKShowcancelled(TKShowcancelled node);
    void caseTKSigned(TKSigned node);
    void caseTKSinh(TKSinh node);
    void caseTKSin(TKSin node);
    void caseTKSmall(TKSmall node);
    void caseTKSpecify(TKSpecify node);
    void caseTKSpecparam(TKSpecparam node);
    void caseTKSqrt(TKSqrt node);
    void caseTKString(TKString node);
    void caseTKStrong0(TKStrong0 node);
    void caseTKStrong1(TKStrong1 node);
    void caseTKSupply0(TKSupply0 node);
    void caseTKSupply1(TKSupply1 node);
    void caseTKTable(TKTable node);
    void caseTKTanh(TKTanh node);
    void caseTKTan(TKTan node);
    void caseTKTask(TKTask node);
    void caseTKTime(TKTime node);
    void caseTKTranif0(TKTranif0 node);
    void caseTKTranif1(TKTranif1 node);
    void caseTKTran(TKTran node);
    void caseTKTri0(TKTri0 node);
    void caseTKTri1(TKTri1 node);
    void caseTKTriand(TKTriand node);
    void caseTKTrior(TKTrior node);
    void caseTKTrireg(TKTrireg node);
    void caseTKTri(TKTri node);
    void caseTKUnits(TKUnits node);
    void caseTKUnsigned(TKUnsigned node);
    void caseTKUse(TKUse node);
    void caseTKUwire(TKUwire node);
    void caseTKVectored(TKVectored node);
    void caseTKWait(TKWait node);
    void caseTKWand(TKWand node);
    void caseTKWeak0(TKWeak0 node);
    void caseTKWeak1(TKWeak1 node);
    void caseTKWhile(TKWhile node);
    void caseTKWire(TKWire node);
    void caseTKWone(TKWone node);
    void caseTKWor(TKWor node);
    void caseTKXnor(TKXnor node);
    void caseTKXor(TKXor node);
    void caseTKEdge01(TKEdge01 node);
    void caseTKEdge0x(TKEdge0x node);
    void caseTKEdge0z(TKEdge0z node);
    void caseTKEdge10(TKEdge10 node);
    void caseTKEdge1x(TKEdge1x node);
    void caseTKEdge1z(TKEdge1z node);
    void caseTKEdgex0(TKEdgex0 node);
    void caseTKEdgex1(TKEdgex1 node);
    void caseTKEdgez0(TKEdgez0 node);
    void caseTKEdgez1(TKEdgez1 node);
    void caseTKPathpulses(TKPathpulses node);
    void caseTSimpleIdentifier(TSimpleIdentifier node);
    void caseTEscapedIdentifier(TEscapedIdentifier node);
    void caseTSystemFunctionIdentifier(TSystemFunctionIdentifier node);
    void caseEOF(EOF node);
}
