/* This file was generated by SableCC (http://www.sablecc.org/). */

package org.zamia.verilog.analysis;

import java.util.*;
import org.zamia.verilog.node.*;

public class AnalysisAdapter implements Analysis
{
    private Hashtable<Node,Object> in;
    private Hashtable<Node,Object> out;

    public Object getIn(Node node)
    {
        if(this.in == null)
        {
            return null;
        }

        return this.in.get(node);
    }

    public void setIn(Node node, Object o)
    {
        if(this.in == null)
        {
            this.in = new Hashtable<Node,Object>(1);
        }

        if(o != null)
        {
            this.in.put(node, o);
        }
        else
        {
            this.in.remove(node);
        }
    }

    public Object getOut(Node node)
    {
        if(this.out == null)
        {
            return null;
        }

        return this.out.get(node);
    }

    public void setOut(Node node, Object o)
    {
        if(this.out == null)
        {
            this.out = new Hashtable<Node,Object>(1);
        }

        if(o != null)
        {
            this.out.put(node, o);
        }
        else
        {
            this.out.remove(node);
        }
    }

    public void caseStart(Start node)
    {
        defaultCase(node);
    }

    public void caseAMain(AMain node)
    {
        defaultCase(node);
    }

    public void caseASourceText(ASourceText node)
    {
        defaultCase(node);
    }

    public void caseAModuleDescription(AModuleDescription node)
    {
        defaultCase(node);
    }

    public void caseAModuleDeclaration(AModuleDeclaration node)
    {
        defaultCase(node);
    }

    public void caseAModuleModuleKeyword(AModuleModuleKeyword node)
    {
        defaultCase(node);
    }

    public void caseAMacroModuleKeyword(AMacroModuleKeyword node)
    {
        defaultCase(node);
    }

    public void caseAModuleParameterPortList(AModuleParameterPortList node)
    {
        defaultCase(node);
    }

    public void caseAP0ParameterDeclarations(AP0ParameterDeclarations node)
    {
        defaultCase(node);
    }

    public void caseAP1ParameterDeclarations(AP1ParameterDeclarations node)
    {
        defaultCase(node);
    }

    public void caseAListOfPortDeclarations(AListOfPortDeclarations node)
    {
        defaultCase(node);
    }

    public void caseAP0PortDeclarations(AP0PortDeclarations node)
    {
        defaultCase(node);
    }

    public void caseAP1PortDeclarations(AP1PortDeclarations node)
    {
        defaultCase(node);
    }

    public void caseAP0PortDeclarationFoo(AP0PortDeclarationFoo node)
    {
        defaultCase(node);
    }

    public void caseAP2PortDeclarationFoo(AP2PortDeclarationFoo node)
    {
        defaultCase(node);
    }

    public void caseAP3PortDeclarationFoo(AP3PortDeclarationFoo node)
    {
        defaultCase(node);
    }

    public void caseAP4PortDeclarationFoo(AP4PortDeclarationFoo node)
    {
        defaultCase(node);
    }

    public void caseAP5PortDeclarationFoo(AP5PortDeclarationFoo node)
    {
        defaultCase(node);
    }

    public void caseAP6PortDeclarationFoo(AP6PortDeclarationFoo node)
    {
        defaultCase(node);
    }

    public void caseAP0PortExpression(AP0PortExpression node)
    {
        defaultCase(node);
    }

    public void caseAP1PortExpression(AP1PortExpression node)
    {
        defaultCase(node);
    }

    public void caseAPortExpressionRep(APortExpressionRep node)
    {
        defaultCase(node);
    }

    public void caseAP0PortReference(AP0PortReference node)
    {
        defaultCase(node);
    }

    public void caseAP1PortReference(AP1PortReference node)
    {
        defaultCase(node);
    }

    public void caseAP0PortDeclarationS(AP0PortDeclarationS node)
    {
        defaultCase(node);
    }

    public void caseAP1PortDeclarationS(AP1PortDeclarationS node)
    {
        defaultCase(node);
    }

    public void caseAP2PortDeclarationS(AP2PortDeclarationS node)
    {
        defaultCase(node);
    }

    public void caseAP0PortDeclaration(AP0PortDeclaration node)
    {
        defaultCase(node);
    }

    public void caseAP1PortDeclaration(AP1PortDeclaration node)
    {
        defaultCase(node);
    }

    public void caseAP2PortDeclaration(AP2PortDeclaration node)
    {
        defaultCase(node);
    }

    public void caseAP0ModuleItem(AP0ModuleItem node)
    {
        defaultCase(node);
    }

    public void caseAP1ModuleItem(AP1ModuleItem node)
    {
        defaultCase(node);
    }

    public void caseAP4ModuleItem(AP4ModuleItem node)
    {
        defaultCase(node);
    }

    public void caseAP5ModuleItem(AP5ModuleItem node)
    {
        defaultCase(node);
    }

    public void caseAP7ModuleItem(AP7ModuleItem node)
    {
        defaultCase(node);
    }

    public void caseAP8ModuleItem(AP8ModuleItem node)
    {
        defaultCase(node);
    }

    public void caseAP9ModuleItem(AP9ModuleItem node)
    {
        defaultCase(node);
    }

    public void caseAP13ModuleItem(AP13ModuleItem node)
    {
        defaultCase(node);
    }

    public void caseAP14ModuleItem(AP14ModuleItem node)
    {
        defaultCase(node);
    }

    public void caseAP15ModuleItem(AP15ModuleItem node)
    {
        defaultCase(node);
    }

    public void caseAP0ModuleOrGenerateItemDeclaration(AP0ModuleOrGenerateItemDeclaration node)
    {
        defaultCase(node);
    }

    public void caseAP1ModuleOrGenerateItemDeclaration(AP1ModuleOrGenerateItemDeclaration node)
    {
        defaultCase(node);
    }

    public void caseAP2ModuleOrGenerateItemDeclaration(AP2ModuleOrGenerateItemDeclaration node)
    {
        defaultCase(node);
    }

    public void caseAP3ModuleOrGenerateItemDeclaration(AP3ModuleOrGenerateItemDeclaration node)
    {
        defaultCase(node);
    }

    public void caseAP4ModuleOrGenerateItemDeclaration(AP4ModuleOrGenerateItemDeclaration node)
    {
        defaultCase(node);
    }

    public void caseAP5ModuleOrGenerateItemDeclaration(AP5ModuleOrGenerateItemDeclaration node)
    {
        defaultCase(node);
    }

    public void caseAP6ModuleOrGenerateItemDeclaration(AP6ModuleOrGenerateItemDeclaration node)
    {
        defaultCase(node);
    }

    public void caseAP8ModuleOrGenerateItemDeclaration(AP8ModuleOrGenerateItemDeclaration node)
    {
        defaultCase(node);
    }

    public void caseAP9ModuleOrGenerateItemDeclaration(AP9ModuleOrGenerateItemDeclaration node)
    {
        defaultCase(node);
    }

    public void caseAP0LocalParameterDeclaration(AP0LocalParameterDeclaration node)
    {
        defaultCase(node);
    }

    public void caseAP1LocalParameterDeclaration(AP1LocalParameterDeclaration node)
    {
        defaultCase(node);
    }

    public void caseAP0ParameterDeclaration(AP0ParameterDeclaration node)
    {
        defaultCase(node);
    }

    public void caseAP1ParameterDeclaration(AP1ParameterDeclaration node)
    {
        defaultCase(node);
    }

    public void caseASpecparamDeclaration(ASpecparamDeclaration node)
    {
        defaultCase(node);
    }

    public void caseAIntParameterType(AIntParameterType node)
    {
        defaultCase(node);
    }

    public void caseARealParameterType(ARealParameterType node)
    {
        defaultCase(node);
    }

    public void caseARealtimeParameterType(ARealtimeParameterType node)
    {
        defaultCase(node);
    }

    public void caseATimeParameterType(ATimeParameterType node)
    {
        defaultCase(node);
    }

    public void caseAInoutDeclarationS(AInoutDeclarationS node)
    {
        defaultCase(node);
    }

    public void caseAInoutDeclaration(AInoutDeclaration node)
    {
        defaultCase(node);
    }

    public void caseAInputDeclarationS(AInputDeclarationS node)
    {
        defaultCase(node);
    }

    public void caseAInputDeclaration(AInputDeclaration node)
    {
        defaultCase(node);
    }

    public void caseAP0OutputDeclarationS(AP0OutputDeclarationS node)
    {
        defaultCase(node);
    }

    public void caseAP1OutputDeclarationS(AP1OutputDeclarationS node)
    {
        defaultCase(node);
    }

    public void caseAP2OutputDeclarationS(AP2OutputDeclarationS node)
    {
        defaultCase(node);
    }

    public void caseAP3OutputDeclarationS(AP3OutputDeclarationS node)
    {
        defaultCase(node);
    }

    public void caseAP0OutputDeclaration(AP0OutputDeclaration node)
    {
        defaultCase(node);
    }

    public void caseAP1OutputDeclaration(AP1OutputDeclaration node)
    {
        defaultCase(node);
    }

    public void caseAP2OutputDeclaration(AP2OutputDeclaration node)
    {
        defaultCase(node);
    }

    public void caseAEventDeclaration(AEventDeclaration node)
    {
        defaultCase(node);
    }

    public void caseAIntegerDeclaration(AIntegerDeclaration node)
    {
        defaultCase(node);
    }

    public void caseAP0NetDeclaration(AP0NetDeclaration node)
    {
        defaultCase(node);
    }

    public void caseAP1NetDeclaration(AP1NetDeclaration node)
    {
        defaultCase(node);
    }

    public void caseAP2NetDeclaration(AP2NetDeclaration node)
    {
        defaultCase(node);
    }

    public void caseAP3NetDeclaration(AP3NetDeclaration node)
    {
        defaultCase(node);
    }

    public void caseAP4NetDeclaration(AP4NetDeclaration node)
    {
        defaultCase(node);
    }

    public void caseAP5NetDeclaration(AP5NetDeclaration node)
    {
        defaultCase(node);
    }

    public void caseAP6NetDeclaration(AP6NetDeclaration node)
    {
        defaultCase(node);
    }

    public void caseAP7NetDeclaration(AP7NetDeclaration node)
    {
        defaultCase(node);
    }

    public void caseAVecVectoredOrScalared(AVecVectoredOrScalared node)
    {
        defaultCase(node);
    }

    public void caseAScalarVectoredOrScalared(AScalarVectoredOrScalared node)
    {
        defaultCase(node);
    }

    public void caseARealDeclaration(ARealDeclaration node)
    {
        defaultCase(node);
    }

    public void caseARealtimeDeclaration(ARealtimeDeclaration node)
    {
        defaultCase(node);
    }

    public void caseARegDeclaration(ARegDeclaration node)
    {
        defaultCase(node);
    }

    public void caseATimeDeclaration(ATimeDeclaration node)
    {
        defaultCase(node);
    }

    public void caseAP0NetType(AP0NetType node)
    {
        defaultCase(node);
    }

    public void caseAP1NetType(AP1NetType node)
    {
        defaultCase(node);
    }

    public void caseAP2NetType(AP2NetType node)
    {
        defaultCase(node);
    }

    public void caseAP3NetType(AP3NetType node)
    {
        defaultCase(node);
    }

    public void caseAP4NetType(AP4NetType node)
    {
        defaultCase(node);
    }

    public void caseAP5NetType(AP5NetType node)
    {
        defaultCase(node);
    }

    public void caseAP6NetType(AP6NetType node)
    {
        defaultCase(node);
    }

    public void caseAP7NetType(AP7NetType node)
    {
        defaultCase(node);
    }

    public void caseAP8NetType(AP8NetType node)
    {
        defaultCase(node);
    }

    public void caseAP9NetType(AP9NetType node)
    {
        defaultCase(node);
    }

    public void caseAP10NetType(AP10NetType node)
    {
        defaultCase(node);
    }

    public void caseAP0OutputVariableType(AP0OutputVariableType node)
    {
        defaultCase(node);
    }

    public void caseAP1OutputVariableType(AP1OutputVariableType node)
    {
        defaultCase(node);
    }

    public void caseAP0Type(AP0Type node)
    {
        defaultCase(node);
    }

    public void caseAP1Type(AP1Type node)
    {
        defaultCase(node);
    }

    public void caseAP0DriveStrength(AP0DriveStrength node)
    {
        defaultCase(node);
    }

    public void caseAP1DriveStrength(AP1DriveStrength node)
    {
        defaultCase(node);
    }

    public void caseAP2DriveStrength(AP2DriveStrength node)
    {
        defaultCase(node);
    }

    public void caseAP3DriveStrength(AP3DriveStrength node)
    {
        defaultCase(node);
    }

    public void caseAP4DriveStrength(AP4DriveStrength node)
    {
        defaultCase(node);
    }

    public void caseAP5DriveStrength(AP5DriveStrength node)
    {
        defaultCase(node);
    }

    public void caseAP0Strength0(AP0Strength0 node)
    {
        defaultCase(node);
    }

    public void caseAP1Strength0(AP1Strength0 node)
    {
        defaultCase(node);
    }

    public void caseAP2Strength0(AP2Strength0 node)
    {
        defaultCase(node);
    }

    public void caseAP3Strength0(AP3Strength0 node)
    {
        defaultCase(node);
    }

    public void caseAP0Strength1(AP0Strength1 node)
    {
        defaultCase(node);
    }

    public void caseAP1Strength1(AP1Strength1 node)
    {
        defaultCase(node);
    }

    public void caseAP2Strength1(AP2Strength1 node)
    {
        defaultCase(node);
    }

    public void caseAP3Strength1(AP3Strength1 node)
    {
        defaultCase(node);
    }

    public void caseAP0ChargeStrength(AP0ChargeStrength node)
    {
        defaultCase(node);
    }

    public void caseAP1ChargeStrength(AP1ChargeStrength node)
    {
        defaultCase(node);
    }

    public void caseAP2ChargeStrength(AP2ChargeStrength node)
    {
        defaultCase(node);
    }

    public void caseAP0Delay3(AP0Delay3 node)
    {
        defaultCase(node);
    }

    public void caseAP1Delay3(AP1Delay3 node)
    {
        defaultCase(node);
    }

    public void caseAP2Delay3(AP2Delay3 node)
    {
        defaultCase(node);
    }

    public void caseAP3Delay3(AP3Delay3 node)
    {
        defaultCase(node);
    }

    public void caseAP0Delay2(AP0Delay2 node)
    {
        defaultCase(node);
    }

    public void caseAP2Delay2(AP2Delay2 node)
    {
        defaultCase(node);
    }

    public void caseAP3Delay2(AP3Delay2 node)
    {
        defaultCase(node);
    }

    public void caseAP0DelayValue(AP0DelayValue node)
    {
        defaultCase(node);
    }

    public void caseAP1DelayValue(AP1DelayValue node)
    {
        defaultCase(node);
    }

    public void caseAP2DelayValue(AP2DelayValue node)
    {
        defaultCase(node);
    }

    public void caseAP0ListOfNetDeclAssignments(AP0ListOfNetDeclAssignments node)
    {
        defaultCase(node);
    }

    public void caseAP1ListOfNetDeclAssignments(AP1ListOfNetDeclAssignments node)
    {
        defaultCase(node);
    }

    public void caseAP0ListOfPortIdentifiers(AP0ListOfPortIdentifiers node)
    {
        defaultCase(node);
    }

    public void caseAP1ListOfPortIdentifiers(AP1ListOfPortIdentifiers node)
    {
        defaultCase(node);
    }

    public void caseAP0ListOfEventIdentifiers(AP0ListOfEventIdentifiers node)
    {
        defaultCase(node);
    }

    public void caseAP1ListOfEventIdentifiers(AP1ListOfEventIdentifiers node)
    {
        defaultCase(node);
    }

    public void caseAP0ListOfNetIdentifiers(AP0ListOfNetIdentifiers node)
    {
        defaultCase(node);
    }

    public void caseAP1ListOfNetIdentifiers(AP1ListOfNetIdentifiers node)
    {
        defaultCase(node);
    }

    public void caseAP0ListOfParamAssignments(AP0ListOfParamAssignments node)
    {
        defaultCase(node);
    }

    public void caseAP1ListOfParamAssignments(AP1ListOfParamAssignments node)
    {
        defaultCase(node);
    }

    public void caseAP0ListOfSpecparamAssignments(AP0ListOfSpecparamAssignments node)
    {
        defaultCase(node);
    }

    public void caseAP1ListOfSpecparamAssignments(AP1ListOfSpecparamAssignments node)
    {
        defaultCase(node);
    }

    public void caseAP0ListOfVariablePortIdentifiers(AP0ListOfVariablePortIdentifiers node)
    {
        defaultCase(node);
    }

    public void caseAP1ListOfVariablePortIdentifiers(AP1ListOfVariablePortIdentifiers node)
    {
        defaultCase(node);
    }

    public void caseAP2ListOfVariablePortIdentifiers(AP2ListOfVariablePortIdentifiers node)
    {
        defaultCase(node);
    }

    public void caseAP3ListOfVariablePortIdentifiers(AP3ListOfVariablePortIdentifiers node)
    {
        defaultCase(node);
    }

    public void caseAP0ListOfVariableIdentifiers(AP0ListOfVariableIdentifiers node)
    {
        defaultCase(node);
    }

    public void caseAP1ListOfVariableIdentifiers(AP1ListOfVariableIdentifiers node)
    {
        defaultCase(node);
    }

    public void caseAP0ListOfRealIdentifiers(AP0ListOfRealIdentifiers node)
    {
        defaultCase(node);
    }

    public void caseAP1ListOfRealIdentifiers(AP1ListOfRealIdentifiers node)
    {
        defaultCase(node);
    }

    public void caseANetDeclAssignment(ANetDeclAssignment node)
    {
        defaultCase(node);
    }

    public void caseAParamAssignment(AParamAssignment node)
    {
        defaultCase(node);
    }

    public void caseAP0SpecparamAssignment(AP0SpecparamAssignment node)
    {
        defaultCase(node);
    }

    public void caseADimension(ADimension node)
    {
        defaultCase(node);
    }

    public void caseARange(ARange node)
    {
        defaultCase(node);
    }

    public void caseAFunctionDeclaration(AFunctionDeclaration node)
    {
        defaultCase(node);
    }

    public void caseAFunctionDeclarationL(AFunctionDeclarationL node)
    {
        defaultCase(node);
    }

    public void caseAP0FunctionItemDeclaration(AP0FunctionItemDeclaration node)
    {
        defaultCase(node);
    }

    public void caseAP1FunctionItemDeclaration(AP1FunctionItemDeclaration node)
    {
        defaultCase(node);
    }

    public void caseAP0FunctionPortList(AP0FunctionPortList node)
    {
        defaultCase(node);
    }

    public void caseAP1FunctionPortList(AP1FunctionPortList node)
    {
        defaultCase(node);
    }

    public void caseAP0FunctionPortListItem(AP0FunctionPortListItem node)
    {
        defaultCase(node);
    }

    public void caseAP1FunctionPortListItem(AP1FunctionPortListItem node)
    {
        defaultCase(node);
    }

    public void caseAP2FunctionPortListItem(AP2FunctionPortListItem node)
    {
        defaultCase(node);
    }

    public void caseAP0FunctionRangeOrType(AP0FunctionRangeOrType node)
    {
        defaultCase(node);
    }

    public void caseAP1FunctionRangeOrType(AP1FunctionRangeOrType node)
    {
        defaultCase(node);
    }

    public void caseAP2FunctionRangeOrType(AP2FunctionRangeOrType node)
    {
        defaultCase(node);
    }

    public void caseAP3FunctionRangeOrType(AP3FunctionRangeOrType node)
    {
        defaultCase(node);
    }

    public void caseAP4FunctionRangeOrType(AP4FunctionRangeOrType node)
    {
        defaultCase(node);
    }

    public void caseAP0TaskDeclaration(AP0TaskDeclaration node)
    {
        defaultCase(node);
    }

    public void caseAP1TaskDeclaration(AP1TaskDeclaration node)
    {
        defaultCase(node);
    }

    public void caseAP0TaskItemDeclaration(AP0TaskItemDeclaration node)
    {
        defaultCase(node);
    }

    public void caseAP1TaskItemDeclaration(AP1TaskItemDeclaration node)
    {
        defaultCase(node);
    }

    public void caseAP2TaskItemDeclaration(AP2TaskItemDeclaration node)
    {
        defaultCase(node);
    }

    public void caseAP3TaskItemDeclaration(AP3TaskItemDeclaration node)
    {
        defaultCase(node);
    }

    public void caseAP0TaskPortList(AP0TaskPortList node)
    {
        defaultCase(node);
    }

    public void caseAP1TaskPortList(AP1TaskPortList node)
    {
        defaultCase(node);
    }

    public void caseAP0TaskPortItem(AP0TaskPortItem node)
    {
        defaultCase(node);
    }

    public void caseAP1TaskPortItem(AP1TaskPortItem node)
    {
        defaultCase(node);
    }

    public void caseAP2TaskPortItem(AP2TaskPortItem node)
    {
        defaultCase(node);
    }

    public void caseAP3TaskPortItem(AP3TaskPortItem node)
    {
        defaultCase(node);
    }

    public void caseAP4TaskPortItem(AP4TaskPortItem node)
    {
        defaultCase(node);
    }

    public void caseAP5TaskPortItem(AP5TaskPortItem node)
    {
        defaultCase(node);
    }

    public void caseAP6TaskPortItem(AP6TaskPortItem node)
    {
        defaultCase(node);
    }

    public void caseAP0TfInputDeclaration(AP0TfInputDeclaration node)
    {
        defaultCase(node);
    }

    public void caseAP1TfInputDeclaration(AP1TfInputDeclaration node)
    {
        defaultCase(node);
    }

    public void caseAP0TfOutputDeclaration(AP0TfOutputDeclaration node)
    {
        defaultCase(node);
    }

    public void caseAP1TfOutputDeclaration(AP1TfOutputDeclaration node)
    {
        defaultCase(node);
    }

    public void caseAP0TfInoutDeclaration(AP0TfInoutDeclaration node)
    {
        defaultCase(node);
    }

    public void caseAP1TfInoutDeclaration(AP1TfInoutDeclaration node)
    {
        defaultCase(node);
    }

    public void caseAP0TaskPortType(AP0TaskPortType node)
    {
        defaultCase(node);
    }

    public void caseAP1TaskPortType(AP1TaskPortType node)
    {
        defaultCase(node);
    }

    public void caseAP2TaskPortType(AP2TaskPortType node)
    {
        defaultCase(node);
    }

    public void caseAP3TaskPortType(AP3TaskPortType node)
    {
        defaultCase(node);
    }

    public void caseAP0BlockItemDeclaration(AP0BlockItemDeclaration node)
    {
        defaultCase(node);
    }

    public void caseAP1BlockItemDeclaration(AP1BlockItemDeclaration node)
    {
        defaultCase(node);
    }

    public void caseAP2BlockItemDeclaration(AP2BlockItemDeclaration node)
    {
        defaultCase(node);
    }

    public void caseAP3BlockItemDeclaration(AP3BlockItemDeclaration node)
    {
        defaultCase(node);
    }

    public void caseAP4BlockItemDeclaration(AP4BlockItemDeclaration node)
    {
        defaultCase(node);
    }

    public void caseAP5BlockItemDeclaration(AP5BlockItemDeclaration node)
    {
        defaultCase(node);
    }

    public void caseAP6BlockItemDeclaration(AP6BlockItemDeclaration node)
    {
        defaultCase(node);
    }

    public void caseAP7BlockItemDeclaration(AP7BlockItemDeclaration node)
    {
        defaultCase(node);
    }

    public void caseAP0ListOfBlockVariableIdentifiers(AP0ListOfBlockVariableIdentifiers node)
    {
        defaultCase(node);
    }

    public void caseAP1ListOfBlockVariableIdentifiers(AP1ListOfBlockVariableIdentifiers node)
    {
        defaultCase(node);
    }

    public void caseAP0ListOfBlockRealIdentifiers(AP0ListOfBlockRealIdentifiers node)
    {
        defaultCase(node);
    }

    public void caseAP1ListOfBlockRealIdentifiers(AP1ListOfBlockRealIdentifiers node)
    {
        defaultCase(node);
    }

    public void caseABlockVariableType(ABlockVariableType node)
    {
        defaultCase(node);
    }

    public void caseABlockRealType(ABlockRealType node)
    {
        defaultCase(node);
    }

    public void caseACmosGateInstantiation(ACmosGateInstantiation node)
    {
        defaultCase(node);
    }

    public void caseAEnableGateInstantiation(AEnableGateInstantiation node)
    {
        defaultCase(node);
    }

    public void caseAMosGateInstantiation(AMosGateInstantiation node)
    {
        defaultCase(node);
    }

    public void caseANinputGateInstantiation(ANinputGateInstantiation node)
    {
        defaultCase(node);
    }

    public void caseANoutputGateInstantiation(ANoutputGateInstantiation node)
    {
        defaultCase(node);
    }

    public void caseAPassenGateInstantiation(APassenGateInstantiation node)
    {
        defaultCase(node);
    }

    public void caseAPassGateInstantiation(APassGateInstantiation node)
    {
        defaultCase(node);
    }

    public void caseAPulldownGateInstantiation(APulldownGateInstantiation node)
    {
        defaultCase(node);
    }

    public void caseAPullupGateInstantiation(APullupGateInstantiation node)
    {
        defaultCase(node);
    }

    public void caseAP0CmosSwitchInstances(AP0CmosSwitchInstances node)
    {
        defaultCase(node);
    }

    public void caseAP1CmosSwitchInstances(AP1CmosSwitchInstances node)
    {
        defaultCase(node);
    }

    public void caseAP0EnableGateInstances(AP0EnableGateInstances node)
    {
        defaultCase(node);
    }

    public void caseAP1EnableGateInstances(AP1EnableGateInstances node)
    {
        defaultCase(node);
    }

    public void caseAP0MosSwitchInstances(AP0MosSwitchInstances node)
    {
        defaultCase(node);
    }

    public void caseAP1MosSwitchInstances(AP1MosSwitchInstances node)
    {
        defaultCase(node);
    }

    public void caseAP0NInputGateInstances(AP0NInputGateInstances node)
    {
        defaultCase(node);
    }

    public void caseAP1NInputGateInstances(AP1NInputGateInstances node)
    {
        defaultCase(node);
    }

    public void caseAP0NOutputGateInstances(AP0NOutputGateInstances node)
    {
        defaultCase(node);
    }

    public void caseAP1NOutputGateInstances(AP1NOutputGateInstances node)
    {
        defaultCase(node);
    }

    public void caseAP0PassEnableSwitchInstances(AP0PassEnableSwitchInstances node)
    {
        defaultCase(node);
    }

    public void caseAP1PassEnableSwitchInstances(AP1PassEnableSwitchInstances node)
    {
        defaultCase(node);
    }

    public void caseAP0PassSwitchInstances(AP0PassSwitchInstances node)
    {
        defaultCase(node);
    }

    public void caseAP1PassSwitchInstances(AP1PassSwitchInstances node)
    {
        defaultCase(node);
    }

    public void caseAP0PullGateInstances(AP0PullGateInstances node)
    {
        defaultCase(node);
    }

    public void caseAP1PullGateInstances(AP1PullGateInstances node)
    {
        defaultCase(node);
    }

    public void caseACmosSwitchInstance(ACmosSwitchInstance node)
    {
        defaultCase(node);
    }

    public void caseAEnableGateInstance(AEnableGateInstance node)
    {
        defaultCase(node);
    }

    public void caseAMosSwitchInstance(AMosSwitchInstance node)
    {
        defaultCase(node);
    }

    public void caseANInputGateInstance(ANInputGateInstance node)
    {
        defaultCase(node);
    }

    public void caseANOutputGateInstance(ANOutputGateInstance node)
    {
        defaultCase(node);
    }

    public void caseAPassSwitchInstance(APassSwitchInstance node)
    {
        defaultCase(node);
    }

    public void caseAPassEnableSwitchInstance(APassEnableSwitchInstance node)
    {
        defaultCase(node);
    }

    public void caseAPullGateInstance(APullGateInstance node)
    {
        defaultCase(node);
    }

    public void caseANameOfGateInstance(ANameOfGateInstance node)
    {
        defaultCase(node);
    }

    public void caseAP0Terminals(AP0Terminals node)
    {
        defaultCase(node);
    }

    public void caseAP1Terminals(AP1Terminals node)
    {
        defaultCase(node);
    }

    public void caseAP0PulldownStrength(AP0PulldownStrength node)
    {
        defaultCase(node);
    }

    public void caseAP1PulldownStrength(AP1PulldownStrength node)
    {
        defaultCase(node);
    }

    public void caseAP2PulldownStrength(AP2PulldownStrength node)
    {
        defaultCase(node);
    }

    public void caseAP0PullupStrength(AP0PullupStrength node)
    {
        defaultCase(node);
    }

    public void caseAP1PullupStrength(AP1PullupStrength node)
    {
        defaultCase(node);
    }

    public void caseAP2PullupStrength(AP2PullupStrength node)
    {
        defaultCase(node);
    }

    public void caseAP0Terminal(AP0Terminal node)
    {
        defaultCase(node);
    }

    public void caseAEnableTerminal(AEnableTerminal node)
    {
        defaultCase(node);
    }

    public void caseANcontrolTerminal(ANcontrolTerminal node)
    {
        defaultCase(node);
    }

    public void caseAPcontrolTerminal(APcontrolTerminal node)
    {
        defaultCase(node);
    }

    public void caseACmosCmosSwitchtype(ACmosCmosSwitchtype node)
    {
        defaultCase(node);
    }

    public void caseARcmosCmosSwitchtype(ARcmosCmosSwitchtype node)
    {
        defaultCase(node);
    }

    public void caseAP0EnableGatetype(AP0EnableGatetype node)
    {
        defaultCase(node);
    }

    public void caseAP1EnableGatetype(AP1EnableGatetype node)
    {
        defaultCase(node);
    }

    public void caseAP2EnableGatetype(AP2EnableGatetype node)
    {
        defaultCase(node);
    }

    public void caseAP3EnableGatetype(AP3EnableGatetype node)
    {
        defaultCase(node);
    }

    public void caseAP0MosSwitchtype(AP0MosSwitchtype node)
    {
        defaultCase(node);
    }

    public void caseAP1MosSwitchtype(AP1MosSwitchtype node)
    {
        defaultCase(node);
    }

    public void caseAP2MosSwitchtype(AP2MosSwitchtype node)
    {
        defaultCase(node);
    }

    public void caseAP3MosSwitchtype(AP3MosSwitchtype node)
    {
        defaultCase(node);
    }

    public void caseAP0NInputGatetype(AP0NInputGatetype node)
    {
        defaultCase(node);
    }

    public void caseAP1NInputGatetype(AP1NInputGatetype node)
    {
        defaultCase(node);
    }

    public void caseAP2NInputGatetype(AP2NInputGatetype node)
    {
        defaultCase(node);
    }

    public void caseAP3NInputGatetype(AP3NInputGatetype node)
    {
        defaultCase(node);
    }

    public void caseAP4NInputGatetype(AP4NInputGatetype node)
    {
        defaultCase(node);
    }

    public void caseAP5NInputGatetype(AP5NInputGatetype node)
    {
        defaultCase(node);
    }

    public void caseAP0NOutputGatetype(AP0NOutputGatetype node)
    {
        defaultCase(node);
    }

    public void caseAP1NOutputGatetype(AP1NOutputGatetype node)
    {
        defaultCase(node);
    }

    public void caseAP0PassEnSwitchtype(AP0PassEnSwitchtype node)
    {
        defaultCase(node);
    }

    public void caseAP1PassEnSwitchtype(AP1PassEnSwitchtype node)
    {
        defaultCase(node);
    }

    public void caseAP2PassEnSwitchtype(AP2PassEnSwitchtype node)
    {
        defaultCase(node);
    }

    public void caseAP3PassEnSwitchtype(AP3PassEnSwitchtype node)
    {
        defaultCase(node);
    }

    public void caseAP0PassSwitchtype(AP0PassSwitchtype node)
    {
        defaultCase(node);
    }

    public void caseAP1PassSwitchtype(AP1PassSwitchtype node)
    {
        defaultCase(node);
    }

    public void caseAModuleInstantiation(AModuleInstantiation node)
    {
        defaultCase(node);
    }

    public void caseAP0ModuleInstances(AP0ModuleInstances node)
    {
        defaultCase(node);
    }

    public void caseAP1ModuleInstances(AP1ModuleInstances node)
    {
        defaultCase(node);
    }

    public void caseAParameterValueAssignment(AParameterValueAssignment node)
    {
        defaultCase(node);
    }

    public void caseAP0ListOfParameterAssignments(AP0ListOfParameterAssignments node)
    {
        defaultCase(node);
    }

    public void caseAP1ListOfParameterAssignments(AP1ListOfParameterAssignments node)
    {
        defaultCase(node);
    }

    public void caseAP0OrderedParameterAssignments(AP0OrderedParameterAssignments node)
    {
        defaultCase(node);
    }

    public void caseAP1OrderedParameterAssignments(AP1OrderedParameterAssignments node)
    {
        defaultCase(node);
    }

    public void caseAP0NamedParameterAssignments(AP0NamedParameterAssignments node)
    {
        defaultCase(node);
    }

    public void caseAP1NamedParameterAssignments(AP1NamedParameterAssignments node)
    {
        defaultCase(node);
    }

    public void caseANamedParameterAssignment(ANamedParameterAssignment node)
    {
        defaultCase(node);
    }

    public void caseAModuleInstance(AModuleInstance node)
    {
        defaultCase(node);
    }

    public void caseANameOfModuleInstance(ANameOfModuleInstance node)
    {
        defaultCase(node);
    }

    public void caseAP0PortConnections(AP0PortConnections node)
    {
        defaultCase(node);
    }

    public void caseAP1PortConnections(AP1PortConnections node)
    {
        defaultCase(node);
    }

    public void caseAP0PortConnection(AP0PortConnection node)
    {
        defaultCase(node);
    }

    public void caseAP1PortConnection(AP1PortConnection node)
    {
        defaultCase(node);
    }

    public void caseAP2PortConnection(AP2PortConnection node)
    {
        defaultCase(node);
    }

    public void caseAContinuousAssign(AContinuousAssign node)
    {
        defaultCase(node);
    }

    public void caseAP0ListOfAssignments(AP0ListOfAssignments node)
    {
        defaultCase(node);
    }

    public void caseAP1ListOfAssignments(AP1ListOfAssignments node)
    {
        defaultCase(node);
    }

    public void caseAAssignment(AAssignment node)
    {
        defaultCase(node);
    }

    public void caseAInitialConstruct(AInitialConstruct node)
    {
        defaultCase(node);
    }

    public void caseAAlwaysConstruct(AAlwaysConstruct node)
    {
        defaultCase(node);
    }

    public void caseABlockingAssignment(ABlockingAssignment node)
    {
        defaultCase(node);
    }

    public void caseANonblockingAssignment(ANonblockingAssignment node)
    {
        defaultCase(node);
    }

    public void caseAP0ProceduralContinuousAssignments(AP0ProceduralContinuousAssignments node)
    {
        defaultCase(node);
    }

    public void caseAP1ProceduralContinuousAssignments(AP1ProceduralContinuousAssignments node)
    {
        defaultCase(node);
    }

    public void caseAP2ProceduralContinuousAssignments(AP2ProceduralContinuousAssignments node)
    {
        defaultCase(node);
    }

    public void caseAP3ProceduralContinuousAssignments(AP3ProceduralContinuousAssignments node)
    {
        defaultCase(node);
    }

    public void caseAParBlock(AParBlock node)
    {
        defaultCase(node);
    }

    public void caseASeqBlock(ASeqBlock node)
    {
        defaultCase(node);
    }

    public void caseABlockId(ABlockId node)
    {
        defaultCase(node);
    }

    public void caseAP0Statement(AP0Statement node)
    {
        defaultCase(node);
    }

    public void caseAP1Statement(AP1Statement node)
    {
        defaultCase(node);
    }

    public void caseAP2Statement(AP2Statement node)
    {
        defaultCase(node);
    }

    public void caseAP3Statement(AP3Statement node)
    {
        defaultCase(node);
    }

    public void caseAP4Statement(AP4Statement node)
    {
        defaultCase(node);
    }

    public void caseAP8Statement(AP8Statement node)
    {
        defaultCase(node);
    }

    public void caseAP0StatementNoShortIf(AP0StatementNoShortIf node)
    {
        defaultCase(node);
    }

    public void caseAP1StatementNoShortIf(AP1StatementNoShortIf node)
    {
        defaultCase(node);
    }

    public void caseAP2StatementNoShortIf(AP2StatementNoShortIf node)
    {
        defaultCase(node);
    }

    public void caseAP3StatementNoShortIf(AP3StatementNoShortIf node)
    {
        defaultCase(node);
    }

    public void caseAP8StatementNoShortIf(AP8StatementNoShortIf node)
    {
        defaultCase(node);
    }

    public void caseAP0StatementWithoutTrailingSubstatement(AP0StatementWithoutTrailingSubstatement node)
    {
        defaultCase(node);
    }

    public void caseAP1StatementWithoutTrailingSubstatement(AP1StatementWithoutTrailingSubstatement node)
    {
        defaultCase(node);
    }

    public void caseAP2StatementWithoutTrailingSubstatement(AP2StatementWithoutTrailingSubstatement node)
    {
        defaultCase(node);
    }

    public void caseAP3StatementWithoutTrailingSubstatement(AP3StatementWithoutTrailingSubstatement node)
    {
        defaultCase(node);
    }

    public void caseAP4StatementWithoutTrailingSubstatement(AP4StatementWithoutTrailingSubstatement node)
    {
        defaultCase(node);
    }

    public void caseAP5StatementWithoutTrailingSubstatement(AP5StatementWithoutTrailingSubstatement node)
    {
        defaultCase(node);
    }

    public void caseAP6StatementWithoutTrailingSubstatement(AP6StatementWithoutTrailingSubstatement node)
    {
        defaultCase(node);
    }

    public void caseAP7StatementWithoutTrailingSubstatement(AP7StatementWithoutTrailingSubstatement node)
    {
        defaultCase(node);
    }

    public void caseAP8StatementWithoutTrailingSubstatement(AP8StatementWithoutTrailingSubstatement node)
    {
        defaultCase(node);
    }

    public void caseAP9StatementWithoutTrailingSubstatement(AP9StatementWithoutTrailingSubstatement node)
    {
        defaultCase(node);
    }

    public void caseAP0StatementOrNull(AP0StatementOrNull node)
    {
        defaultCase(node);
    }

    public void caseAP1StatementOrNull(AP1StatementOrNull node)
    {
        defaultCase(node);
    }

    public void caseAP0StatementNsfOrNull(AP0StatementNsfOrNull node)
    {
        defaultCase(node);
    }

    public void caseAP1StatementNsfOrNull(AP1StatementNsfOrNull node)
    {
        defaultCase(node);
    }

    public void caseAP0DelayControl(AP0DelayControl node)
    {
        defaultCase(node);
    }

    public void caseAP1DelayControl(AP1DelayControl node)
    {
        defaultCase(node);
    }

    public void caseAP0DelayOrEventControl(AP0DelayOrEventControl node)
    {
        defaultCase(node);
    }

    public void caseAP1DelayOrEventControl(AP1DelayOrEventControl node)
    {
        defaultCase(node);
    }

    public void caseAP2DelayOrEventControl(AP2DelayOrEventControl node)
    {
        defaultCase(node);
    }

    public void caseAP0DisableStatement(AP0DisableStatement node)
    {
        defaultCase(node);
    }

    public void caseAP1DisableStatement(AP1DisableStatement node)
    {
        defaultCase(node);
    }

    public void caseAP0EventControl(AP0EventControl node)
    {
        defaultCase(node);
    }

    public void caseAP1EventControl(AP1EventControl node)
    {
        defaultCase(node);
    }

    public void caseAP2EventControl(AP2EventControl node)
    {
        defaultCase(node);
    }

    public void caseAP3EventControl(AP3EventControl node)
    {
        defaultCase(node);
    }

    public void caseAEventTrigger(AEventTrigger node)
    {
        defaultCase(node);
    }

    public void caseAP1EventTriggerExpr(AP1EventTriggerExpr node)
    {
        defaultCase(node);
    }

    public void caseAP2EventTriggerExpr(AP2EventTriggerExpr node)
    {
        defaultCase(node);
    }

    public void caseAP3EventTriggerExpr(AP3EventTriggerExpr node)
    {
        defaultCase(node);
    }

    public void caseAP4EventTriggerExpr(AP4EventTriggerExpr node)
    {
        defaultCase(node);
    }

    public void caseAP0EventExpression(AP0EventExpression node)
    {
        defaultCase(node);
    }

    public void caseAP1EventExpression(AP1EventExpression node)
    {
        defaultCase(node);
    }

    public void caseAP2EventExpression(AP2EventExpression node)
    {
        defaultCase(node);
    }

    public void caseAP0EventExpressionTerm(AP0EventExpressionTerm node)
    {
        defaultCase(node);
    }

    public void caseAP1EventExpressionTerm(AP1EventExpressionTerm node)
    {
        defaultCase(node);
    }

    public void caseAP2EventExpressionTerm(AP2EventExpressionTerm node)
    {
        defaultCase(node);
    }

    public void caseAP0ProceduralTimingControl(AP0ProceduralTimingControl node)
    {
        defaultCase(node);
    }

    public void caseAP1ProceduralTimingControl(AP1ProceduralTimingControl node)
    {
        defaultCase(node);
    }

    public void caseAProceduralTimingControlStatement(AProceduralTimingControlStatement node)
    {
        defaultCase(node);
    }

    public void caseAProceduralTimingControlStatementNsf(AProceduralTimingControlStatementNsf node)
    {
        defaultCase(node);
    }

    public void caseAWaitStatement(AWaitStatement node)
    {
        defaultCase(node);
    }

    public void caseAWaitStatementNsf(AWaitStatementNsf node)
    {
        defaultCase(node);
    }

    public void caseAIfThenStatement(AIfThenStatement node)
    {
        defaultCase(node);
    }

    public void caseAIfThenElseStatement(AIfThenElseStatement node)
    {
        defaultCase(node);
    }

    public void caseAIfThenElseStatementNsf(AIfThenElseStatementNsf node)
    {
        defaultCase(node);
    }

    public void caseAP0CaseStatement(AP0CaseStatement node)
    {
        defaultCase(node);
    }

    public void caseAP1CaseStatement(AP1CaseStatement node)
    {
        defaultCase(node);
    }

    public void caseAP2CaseStatement(AP2CaseStatement node)
    {
        defaultCase(node);
    }

    public void caseAP0CaseItem(AP0CaseItem node)
    {
        defaultCase(node);
    }

    public void caseAP1CaseItem(AP1CaseItem node)
    {
        defaultCase(node);
    }

    public void caseAP0CaseItemEl(AP0CaseItemEl node)
    {
        defaultCase(node);
    }

    public void caseAP1CaseItemEl(AP1CaseItemEl node)
    {
        defaultCase(node);
    }

    public void caseAP0LoopStatement(AP0LoopStatement node)
    {
        defaultCase(node);
    }

    public void caseAP1LoopStatement(AP1LoopStatement node)
    {
        defaultCase(node);
    }

    public void caseAP2LoopStatement(AP2LoopStatement node)
    {
        defaultCase(node);
    }

    public void caseAP3LoopStatement(AP3LoopStatement node)
    {
        defaultCase(node);
    }

    public void caseAP0LoopStatementNsf(AP0LoopStatementNsf node)
    {
        defaultCase(node);
    }

    public void caseAP1LoopStatementNsf(AP1LoopStatementNsf node)
    {
        defaultCase(node);
    }

    public void caseAP2LoopStatementNsf(AP2LoopStatementNsf node)
    {
        defaultCase(node);
    }

    public void caseAP3LoopStatementNsf(AP3LoopStatementNsf node)
    {
        defaultCase(node);
    }

    public void caseAP0SystemTaskEnable(AP0SystemTaskEnable node)
    {
        defaultCase(node);
    }

    public void caseAP1SystemTaskEnable(AP1SystemTaskEnable node)
    {
        defaultCase(node);
    }

    public void caseAP0TaskEnable(AP0TaskEnable node)
    {
        defaultCase(node);
    }

    public void caseAP1TaskEnable(AP1TaskEnable node)
    {
        defaultCase(node);
    }

    public void caseAP0TaskEnableEl(AP0TaskEnableEl node)
    {
        defaultCase(node);
    }

    public void caseAP1TaskEnableEl(AP1TaskEnableEl node)
    {
        defaultCase(node);
    }

    public void caseASpecifyBlock(ASpecifyBlock node)
    {
        defaultCase(node);
    }

    public void caseAP0SpecifyItem(AP0SpecifyItem node)
    {
        defaultCase(node);
    }

    public void caseAP1SpecifyItem(AP1SpecifyItem node)
    {
        defaultCase(node);
    }

    public void caseAP2SpecifyItem(AP2SpecifyItem node)
    {
        defaultCase(node);
    }

    public void caseAP3SpecifyItem(AP3SpecifyItem node)
    {
        defaultCase(node);
    }

    public void caseAP0PulsestyleDeclaration(AP0PulsestyleDeclaration node)
    {
        defaultCase(node);
    }

    public void caseAP1PulsestyleDeclaration(AP1PulsestyleDeclaration node)
    {
        defaultCase(node);
    }

    public void caseAP0ShowcancelledDeclaration(AP0ShowcancelledDeclaration node)
    {
        defaultCase(node);
    }

    public void caseAP1ShowcancelledDeclaration(AP1ShowcancelledDeclaration node)
    {
        defaultCase(node);
    }

    public void caseAP0PathDeclaration(AP0PathDeclaration node)
    {
        defaultCase(node);
    }

    public void caseAP1PathDeclaration(AP1PathDeclaration node)
    {
        defaultCase(node);
    }

    public void caseAP2PathDeclaration(AP2PathDeclaration node)
    {
        defaultCase(node);
    }

    public void caseAParallelPathSimplePathDeclaration(AParallelPathSimplePathDeclaration node)
    {
        defaultCase(node);
    }

    public void caseAFullPathSimplePathDeclaration(AFullPathSimplePathDeclaration node)
    {
        defaultCase(node);
    }

    public void caseAP0ListOfPathDescriptors(AP0ListOfPathDescriptors node)
    {
        defaultCase(node);
    }

    public void caseAP1ListOfPathDescriptors(AP1ListOfPathDescriptors node)
    {
        defaultCase(node);
    }

    public void caseAP0SpecifyTerminalDescriptor(AP0SpecifyTerminalDescriptor node)
    {
        defaultCase(node);
    }

    public void caseAP1SpecifyTerminalDescriptor(AP1SpecifyTerminalDescriptor node)
    {
        defaultCase(node);
    }

    public void caseAP0PathDelayValue(AP0PathDelayValue node)
    {
        defaultCase(node);
    }

    public void caseAP1PathDelayValue(AP1PathDelayValue node)
    {
        defaultCase(node);
    }

    public void caseAPPolarityOperator(APPolarityOperator node)
    {
        defaultCase(node);
    }

    public void caseAMPolarityOperator(AMPolarityOperator node)
    {
        defaultCase(node);
    }

    public void caseAP0ListOfPathDelayExpressions(AP0ListOfPathDelayExpressions node)
    {
        defaultCase(node);
    }

    public void caseAP1ListOfPathDelayExpressions(AP1ListOfPathDelayExpressions node)
    {
        defaultCase(node);
    }

    public void caseAParallelEdgeSensitivePathDeclaration(AParallelEdgeSensitivePathDeclaration node)
    {
        defaultCase(node);
    }

    public void caseAFullEdgeSensitivePathDeclaration(AFullEdgeSensitivePathDeclaration node)
    {
        defaultCase(node);
    }

    public void caseANumDelayValueSimple(ANumDelayValueSimple node)
    {
        defaultCase(node);
    }

    public void caseAIdDelayValueSimple(AIdDelayValueSimple node)
    {
        defaultCase(node);
    }

    public void caseAPEdgeIdentifier(APEdgeIdentifier node)
    {
        defaultCase(node);
    }

    public void caseANEdgeIdentifier(ANEdgeIdentifier node)
    {
        defaultCase(node);
    }

    public void caseAP0StateDependentPathDeclaration(AP0StateDependentPathDeclaration node)
    {
        defaultCase(node);
    }

    public void caseAP1StateDependentPathDeclaration(AP1StateDependentPathDeclaration node)
    {
        defaultCase(node);
    }

    public void caseAP2StateDependentPathDeclaration(AP2StateDependentPathDeclaration node)
    {
        defaultCase(node);
    }

    public void caseAConcatenation(AConcatenation node)
    {
        defaultCase(node);
    }

    public void caseAConcatenationRep(AConcatenationRep node)
    {
        defaultCase(node);
    }

    public void caseAModulePathConcatenation(AModulePathConcatenation node)
    {
        defaultCase(node);
    }

    public void caseAModulePathConcatenationRep(AModulePathConcatenationRep node)
    {
        defaultCase(node);
    }

    public void caseAModulePathMultipleConcatenation(AModulePathMultipleConcatenation node)
    {
        defaultCase(node);
    }

    public void caseAMultipleConcatenation(AMultipleConcatenation node)
    {
        defaultCase(node);
    }

    public void caseAParamsSystemFunctionCall(AParamsSystemFunctionCall node)
    {
        defaultCase(node);
    }

    public void caseANoparamsSystemFunctionCall(ANoparamsSystemFunctionCall node)
    {
        defaultCase(node);
    }

    public void caseASystemFunctionCallRep(ASystemFunctionCallRep node)
    {
        defaultCase(node);
    }

    public void caseACondExpression(ACondExpression node)
    {
        defaultCase(node);
    }

    public void caseASimpleExpression(ASimpleExpression node)
    {
        defaultCase(node);
    }

    public void caseAConditionalExpression(AConditionalExpression node)
    {
        defaultCase(node);
    }

    public void caseAUnaryExpression1(AUnaryExpression1 node)
    {
        defaultCase(node);
    }

    public void caseABinaryExpression1(ABinaryExpression1 node)
    {
        defaultCase(node);
    }

    public void caseAUnaryUnaryExpression(AUnaryUnaryExpression node)
    {
        defaultCase(node);
    }

    public void caseAPrimaryUnaryExpression(APrimaryUnaryExpression node)
    {
        defaultCase(node);
    }

    public void caseABracketRange(ABracketRange node)
    {
        defaultCase(node);
    }

    public void caseAExpRangeExpression(AExpRangeExpression node)
    {
        defaultCase(node);
    }

    public void caseAP1RangeExpression(AP1RangeExpression node)
    {
        defaultCase(node);
    }

    public void caseAP2RangeExpression(AP2RangeExpression node)
    {
        defaultCase(node);
    }

    public void caseAP3RangeExpression(AP3RangeExpression node)
    {
        defaultCase(node);
    }

    public void caseAExpMintypmaxExpression(AExpMintypmaxExpression node)
    {
        defaultCase(node);
    }

    public void caseAMultiMintypmaxExpression(AMultiMintypmaxExpression node)
    {
        defaultCase(node);
    }

    public void caseACondModulePathExpression(ACondModulePathExpression node)
    {
        defaultCase(node);
    }

    public void caseASimpleModulePathExpression(ASimpleModulePathExpression node)
    {
        defaultCase(node);
    }

    public void caseAModulePathConditionalExpression(AModulePathConditionalExpression node)
    {
        defaultCase(node);
    }

    public void caseAUnaryModulePathExpression1(AUnaryModulePathExpression1 node)
    {
        defaultCase(node);
    }

    public void caseABinaryModulePathExpression1(ABinaryModulePathExpression1 node)
    {
        defaultCase(node);
    }

    public void caseAUnaryModulePathUnaryExpression(AUnaryModulePathUnaryExpression node)
    {
        defaultCase(node);
    }

    public void caseAPrimaryModulePathUnaryExpression(APrimaryModulePathUnaryExpression node)
    {
        defaultCase(node);
    }

    public void caseAP0ModulePathMintypmaxExpression(AP0ModulePathMintypmaxExpression node)
    {
        defaultCase(node);
    }

    public void caseAP1ModulePathMintypmaxExpression(AP1ModulePathMintypmaxExpression node)
    {
        defaultCase(node);
    }

    public void caseANumPrimary(ANumPrimary node)
    {
        defaultCase(node);
    }

    public void caseAIdPrimary(AIdPrimary node)
    {
        defaultCase(node);
    }

    public void caseAConcatPrimary(AConcatPrimary node)
    {
        defaultCase(node);
    }

    public void caseAMconcatPrimary(AMconcatPrimary node)
    {
        defaultCase(node);
    }

    public void caseACallPrimary(ACallPrimary node)
    {
        defaultCase(node);
    }

    public void caseASyscallPrimary(ASyscallPrimary node)
    {
        defaultCase(node);
    }

    public void caseAMtmPrimary(AMtmPrimary node)
    {
        defaultCase(node);
    }

    public void caseAStringPrimary(AStringPrimary node)
    {
        defaultCase(node);
    }

    public void caseAPrimaryRep1(APrimaryRep1 node)
    {
        defaultCase(node);
    }

    public void caseAFunctionCallRep(AFunctionCallRep node)
    {
        defaultCase(node);
    }

    public void caseAP0PrimaryHierarchicalIdentifier(AP0PrimaryHierarchicalIdentifier node)
    {
        defaultCase(node);
    }

    public void caseAP1PrimaryHierarchicalIdentifier(AP1PrimaryHierarchicalIdentifier node)
    {
        defaultCase(node);
    }

    public void caseAP0ModulePathPrimary(AP0ModulePathPrimary node)
    {
        defaultCase(node);
    }

    public void caseAP1ModulePathPrimary(AP1ModulePathPrimary node)
    {
        defaultCase(node);
    }

    public void caseAP2ModulePathPrimary(AP2ModulePathPrimary node)
    {
        defaultCase(node);
    }

    public void caseAP3ModulePathPrimary(AP3ModulePathPrimary node)
    {
        defaultCase(node);
    }

    public void caseACallModulePathPrimary(ACallModulePathPrimary node)
    {
        defaultCase(node);
    }

    public void caseAP5ModulePathPrimary(AP5ModulePathPrimary node)
    {
        defaultCase(node);
    }

    public void caseAP6ModulePathPrimary(AP6ModulePathPrimary node)
    {
        defaultCase(node);
    }

    public void caseAP0Lvalue(AP0Lvalue node)
    {
        defaultCase(node);
    }

    public void caseAP1Lvalue(AP1Lvalue node)
    {
        defaultCase(node);
    }

    public void caseALvalueRep2(ALvalueRep2 node)
    {
        defaultCase(node);
    }

    public void caseAP0UnaryOperator(AP0UnaryOperator node)
    {
        defaultCase(node);
    }

    public void caseAP1UnaryOperator(AP1UnaryOperator node)
    {
        defaultCase(node);
    }

    public void caseAP2UnaryOperator(AP2UnaryOperator node)
    {
        defaultCase(node);
    }

    public void caseAP3UnaryOperator(AP3UnaryOperator node)
    {
        defaultCase(node);
    }

    public void caseAP4UnaryOperator(AP4UnaryOperator node)
    {
        defaultCase(node);
    }

    public void caseAP5UnaryOperator(AP5UnaryOperator node)
    {
        defaultCase(node);
    }

    public void caseAP6UnaryOperator(AP6UnaryOperator node)
    {
        defaultCase(node);
    }

    public void caseAP7UnaryOperator(AP7UnaryOperator node)
    {
        defaultCase(node);
    }

    public void caseAP8UnaryOperator(AP8UnaryOperator node)
    {
        defaultCase(node);
    }

    public void caseAP9UnaryOperator(AP9UnaryOperator node)
    {
        defaultCase(node);
    }

    public void caseAP0BinaryOperator(AP0BinaryOperator node)
    {
        defaultCase(node);
    }

    public void caseAP1BinaryOperator(AP1BinaryOperator node)
    {
        defaultCase(node);
    }

    public void caseAP2BinaryOperator(AP2BinaryOperator node)
    {
        defaultCase(node);
    }

    public void caseAP3BinaryOperator(AP3BinaryOperator node)
    {
        defaultCase(node);
    }

    public void caseAP4BinaryOperator(AP4BinaryOperator node)
    {
        defaultCase(node);
    }

    public void caseAP5BinaryOperator(AP5BinaryOperator node)
    {
        defaultCase(node);
    }

    public void caseAP6BinaryOperator(AP6BinaryOperator node)
    {
        defaultCase(node);
    }

    public void caseAP7BinaryOperator(AP7BinaryOperator node)
    {
        defaultCase(node);
    }

    public void caseAP8BinaryOperator(AP8BinaryOperator node)
    {
        defaultCase(node);
    }

    public void caseAP9BinaryOperator(AP9BinaryOperator node)
    {
        defaultCase(node);
    }

    public void caseAP10BinaryOperator(AP10BinaryOperator node)
    {
        defaultCase(node);
    }

    public void caseAP11BinaryOperator(AP11BinaryOperator node)
    {
        defaultCase(node);
    }

    public void caseAP12BinaryOperator(AP12BinaryOperator node)
    {
        defaultCase(node);
    }

    public void caseAP13BinaryOperator(AP13BinaryOperator node)
    {
        defaultCase(node);
    }

    public void caseAP14BinaryOperator(AP14BinaryOperator node)
    {
        defaultCase(node);
    }

    public void caseAP15BinaryOperator(AP15BinaryOperator node)
    {
        defaultCase(node);
    }

    public void caseAP16BinaryOperator(AP16BinaryOperator node)
    {
        defaultCase(node);
    }

    public void caseAP17BinaryOperator(AP17BinaryOperator node)
    {
        defaultCase(node);
    }

    public void caseAP18BinaryOperator(AP18BinaryOperator node)
    {
        defaultCase(node);
    }

    public void caseAP19BinaryOperator(AP19BinaryOperator node)
    {
        defaultCase(node);
    }

    public void caseAP21BinaryOperator(AP21BinaryOperator node)
    {
        defaultCase(node);
    }

    public void caseAP22BinaryOperator(AP22BinaryOperator node)
    {
        defaultCase(node);
    }

    public void caseAP23BinaryOperator(AP23BinaryOperator node)
    {
        defaultCase(node);
    }

    public void caseAP0UnaryModulePathOperator(AP0UnaryModulePathOperator node)
    {
        defaultCase(node);
    }

    public void caseAP1UnaryModulePathOperator(AP1UnaryModulePathOperator node)
    {
        defaultCase(node);
    }

    public void caseAP2UnaryModulePathOperator(AP2UnaryModulePathOperator node)
    {
        defaultCase(node);
    }

    public void caseAP3UnaryModulePathOperator(AP3UnaryModulePathOperator node)
    {
        defaultCase(node);
    }

    public void caseAP4UnaryModulePathOperator(AP4UnaryModulePathOperator node)
    {
        defaultCase(node);
    }

    public void caseAP5UnaryModulePathOperator(AP5UnaryModulePathOperator node)
    {
        defaultCase(node);
    }

    public void caseAP6UnaryModulePathOperator(AP6UnaryModulePathOperator node)
    {
        defaultCase(node);
    }

    public void caseAP7UnaryModulePathOperator(AP7UnaryModulePathOperator node)
    {
        defaultCase(node);
    }

    public void caseAP0BinaryModulePathOperator(AP0BinaryModulePathOperator node)
    {
        defaultCase(node);
    }

    public void caseAP1BinaryModulePathOperator(AP1BinaryModulePathOperator node)
    {
        defaultCase(node);
    }

    public void caseAP2BinaryModulePathOperator(AP2BinaryModulePathOperator node)
    {
        defaultCase(node);
    }

    public void caseAP3BinaryModulePathOperator(AP3BinaryModulePathOperator node)
    {
        defaultCase(node);
    }

    public void caseAP4BinaryModulePathOperator(AP4BinaryModulePathOperator node)
    {
        defaultCase(node);
    }

    public void caseAP5BinaryModulePathOperator(AP5BinaryModulePathOperator node)
    {
        defaultCase(node);
    }

    public void caseAP6BinaryModulePathOperator(AP6BinaryModulePathOperator node)
    {
        defaultCase(node);
    }

    public void caseAP8BinaryModulePathOperator(AP8BinaryModulePathOperator node)
    {
        defaultCase(node);
    }

    public void caseADecNumber(ADecNumber node)
    {
        defaultCase(node);
    }

    public void caseAOctNumber(AOctNumber node)
    {
        defaultCase(node);
    }

    public void caseABinNumber(ABinNumber node)
    {
        defaultCase(node);
    }

    public void caseAHexNumber(AHexNumber node)
    {
        defaultCase(node);
    }

    public void caseARealNumber(ARealNumber node)
    {
        defaultCase(node);
    }

    public void caseASimpleIdentifier(ASimpleIdentifier node)
    {
        defaultCase(node);
    }

    public void caseAEscapedIdentifier(AEscapedIdentifier node)
    {
        defaultCase(node);
    }

    public void caseAP0HierarchicalIdentifier(AP0HierarchicalIdentifier node)
    {
        defaultCase(node);
    }

    public void caseAP1HierarchicalIdentifier(AP1HierarchicalIdentifier node)
    {
        defaultCase(node);
    }

    public void caseAP2HierarchicalIdentifier(AP2HierarchicalIdentifier node)
    {
        defaultCase(node);
    }

    public void caseAP3HierarchicalIdentifier(AP3HierarchicalIdentifier node)
    {
        defaultCase(node);
    }

    public void caseAHierarchicalIdentifierMb(AHierarchicalIdentifierMb node)
    {
        defaultCase(node);
    }

    public void caseAP0HierarchicalIdentifierMbExt(AP0HierarchicalIdentifierMbExt node)
    {
        defaultCase(node);
    }

    public void caseAP1HierarchicalIdentifierMbExt(AP1HierarchicalIdentifierMbExt node)
    {
        defaultCase(node);
    }

    public void caseTWhiteSpace(TWhiteSpace node)
    {
        defaultCase(node);
    }

    public void caseTRealNumber(TRealNumber node)
    {
        defaultCase(node);
    }

    public void caseTDecimalNumber(TDecimalNumber node)
    {
        defaultCase(node);
    }

    public void caseTBinaryNumber(TBinaryNumber node)
    {
        defaultCase(node);
    }

    public void caseTOctalNumber(TOctalNumber node)
    {
        defaultCase(node);
    }

    public void caseTHexNumber(THexNumber node)
    {
        defaultCase(node);
    }

    public void caseTTEdgeDescriptor(TTEdgeDescriptor node)
    {
        defaultCase(node);
    }

    public void caseTString(TString node)
    {
        defaultCase(node);
    }

    public void caseTBlockComment(TBlockComment node)
    {
        defaultCase(node);
    }

    public void caseTAttributeInstance(TAttributeInstance node)
    {
        defaultCase(node);
    }

    public void caseTOneLineComment(TOneLineComment node)
    {
        defaultCase(node);
    }

    public void caseTTCeq(TTCeq node)
    {
        defaultCase(node);
    }

    public void caseTTEg(TTEg node)
    {
        defaultCase(node);
    }

    public void caseTTEq(TTEq node)
    {
        defaultCase(node);
    }

    public void caseTTContribute(TTContribute node)
    {
        defaultCase(node);
    }

    public void caseTTLe(TTLe node)
    {
        defaultCase(node);
    }

    public void caseTTLs(TTLs node)
    {
        defaultCase(node);
    }

    public void caseTTGe(TTGe node)
    {
        defaultCase(node);
    }

    public void caseTTRs(TTRs node)
    {
        defaultCase(node);
    }

    public void caseTTRss(TTRss node)
    {
        defaultCase(node);
    }

    public void caseTTCne(TTCne node)
    {
        defaultCase(node);
    }

    public void caseTTNe(TTNe node)
    {
        defaultCase(node);
    }

    public void caseTTTand(TTTand node)
    {
        defaultCase(node);
    }

    public void caseTTLand(TTLand node)
    {
        defaultCase(node);
    }

    public void caseTTAnd(TTAnd node)
    {
        defaultCase(node);
    }

    public void caseTTLor(TTLor node)
    {
        defaultCase(node);
    }

    public void caseTTNand(TTNand node)
    {
        defaultCase(node);
    }

    public void caseTTNxor(TTNxor node)
    {
        defaultCase(node);
    }

    public void caseTTRnor(TTRnor node)
    {
        defaultCase(node);
    }

    public void caseTTSg(TTSg node)
    {
        defaultCase(node);
    }

    public void caseTTPow(TTPow node)
    {
        defaultCase(node);
    }

    public void caseTTXor(TTXor node)
    {
        defaultCase(node);
    }

    public void caseTTPlusColon(TTPlusColon node)
    {
        defaultCase(node);
    }

    public void caseTTMinusColon(TTMinusColon node)
    {
        defaultCase(node);
    }

    public void caseTTTrigger(TTTrigger node)
    {
        defaultCase(node);
    }

    public void caseTTComma(TTComma node)
    {
        defaultCase(node);
    }

    public void caseTTPeriod(TTPeriod node)
    {
        defaultCase(node);
    }

    public void caseTTEquals(TTEquals node)
    {
        defaultCase(node);
    }

    public void caseTTSemicolon(TTSemicolon node)
    {
        defaultCase(node);
    }

    public void caseTTColon(TTColon node)
    {
        defaultCase(node);
    }

    public void caseTTLparen(TTLparen node)
    {
        defaultCase(node);
    }

    public void caseTTRparen(TTRparen node)
    {
        defaultCase(node);
    }

    public void caseTTHash(TTHash node)
    {
        defaultCase(node);
    }

    public void caseTTAny(TTAny node)
    {
        defaultCase(node);
    }

    public void caseTTAtStar(TTAtStar node)
    {
        defaultCase(node);
    }

    public void caseTTAt(TTAt node)
    {
        defaultCase(node);
    }

    public void caseTTLbracket(TTLbracket node)
    {
        defaultCase(node);
    }

    public void caseTTRbracket(TTRbracket node)
    {
        defaultCase(node);
    }

    public void caseTTLbrace(TTLbrace node)
    {
        defaultCase(node);
    }

    public void caseTTRbrace(TTRbrace node)
    {
        defaultCase(node);
    }

    public void caseTTPlus(TTPlus node)
    {
        defaultCase(node);
    }

    public void caseTTMinus(TTMinus node)
    {
        defaultCase(node);
    }

    public void caseTTTilde(TTTilde node)
    {
        defaultCase(node);
    }

    public void caseTTExcl(TTExcl node)
    {
        defaultCase(node);
    }

    public void caseTTPipe(TTPipe node)
    {
        defaultCase(node);
    }

    public void caseTTStar(TTStar node)
    {
        defaultCase(node);
    }

    public void caseTTDiv(TTDiv node)
    {
        defaultCase(node);
    }

    public void caseTTPerc(TTPerc node)
    {
        defaultCase(node);
    }

    public void caseTTGt(TTGt node)
    {
        defaultCase(node);
    }

    public void caseTTLt(TTLt node)
    {
        defaultCase(node);
    }

    public void caseTTQuestion(TTQuestion node)
    {
        defaultCase(node);
    }

    public void caseTTUnderscore(TTUnderscore node)
    {
        defaultCase(node);
    }

    public void caseTKSwidth(TKSwidth node)
    {
        defaultCase(node);
    }

    public void caseTKSrecovery(TKSrecovery node)
    {
        defaultCase(node);
    }

    public void caseTKSrecrem(TKSrecrem node)
    {
        defaultCase(node);
    }

    public void caseTKSremoval(TKSremoval node)
    {
        defaultCase(node);
    }

    public void caseTKShold(TKShold node)
    {
        defaultCase(node);
    }

    public void caseTKSsetup(TKSsetup node)
    {
        defaultCase(node);
    }

    public void caseTKSsetuphold(TKSsetuphold node)
    {
        defaultCase(node);
    }

    public void caseTKSskew(TKSskew node)
    {
        defaultCase(node);
    }

    public void caseTKStimeskew(TKStimeskew node)
    {
        defaultCase(node);
    }

    public void caseTKSperiod(TKSperiod node)
    {
        defaultCase(node);
    }

    public void caseTKSfullskew(TKSfullskew node)
    {
        defaultCase(node);
    }

    public void caseTKSnochange(TKSnochange node)
    {
        defaultCase(node);
    }

    public void caseTKAbs(TKAbs node)
    {
        defaultCase(node);
    }

    public void caseTKAbstol(TKAbstol node)
    {
        defaultCase(node);
    }

    public void caseTKAccess(TKAccess node)
    {
        defaultCase(node);
    }

    public void caseTKAcos(TKAcos node)
    {
        defaultCase(node);
    }

    public void caseTKAcosh(TKAcosh node)
    {
        defaultCase(node);
    }

    public void caseTKAlways(TKAlways node)
    {
        defaultCase(node);
    }

    public void caseTKAlwaysComb(TKAlwaysComb node)
    {
        defaultCase(node);
    }

    public void caseTKAlwaysFf(TKAlwaysFf node)
    {
        defaultCase(node);
    }

    public void caseTKAlwaysLatch(TKAlwaysLatch node)
    {
        defaultCase(node);
    }

    public void caseTKAnalog(TKAnalog node)
    {
        defaultCase(node);
    }

    public void caseTKAnd(TKAnd node)
    {
        defaultCase(node);
    }

    public void caseTKAsin(TKAsin node)
    {
        defaultCase(node);
    }

    public void caseTKAsinh(TKAsinh node)
    {
        defaultCase(node);
    }

    public void caseTKAssert(TKAssert node)
    {
        defaultCase(node);
    }

    public void caseTKAssign(TKAssign node)
    {
        defaultCase(node);
    }

    public void caseTKAtan2(TKAtan2 node)
    {
        defaultCase(node);
    }

    public void caseTKAtan(TKAtan node)
    {
        defaultCase(node);
    }

    public void caseTKAtanh(TKAtanh node)
    {
        defaultCase(node);
    }

    public void caseTKAutomatic(TKAutomatic node)
    {
        defaultCase(node);
    }

    public void caseTKBegin(TKBegin node)
    {
        defaultCase(node);
    }

    public void caseTKBool(TKBool node)
    {
        defaultCase(node);
    }

    public void caseTKBuf(TKBuf node)
    {
        defaultCase(node);
    }

    public void caseTKBufif0(TKBufif0 node)
    {
        defaultCase(node);
    }

    public void caseTKBufif1(TKBufif1 node)
    {
        defaultCase(node);
    }

    public void caseTKCase(TKCase node)
    {
        defaultCase(node);
    }

    public void caseTKCasex(TKCasex node)
    {
        defaultCase(node);
    }

    public void caseTKCasez(TKCasez node)
    {
        defaultCase(node);
    }

    public void caseTKCeil(TKCeil node)
    {
        defaultCase(node);
    }

    public void caseTKCell(TKCell node)
    {
        defaultCase(node);
    }

    public void caseTKCmos(TKCmos node)
    {
        defaultCase(node);
    }

    public void caseTKConfig(TKConfig node)
    {
        defaultCase(node);
    }

    public void caseTKContinuous(TKContinuous node)
    {
        defaultCase(node);
    }

    public void caseTKCos(TKCos node)
    {
        defaultCase(node);
    }

    public void caseTKCosh(TKCosh node)
    {
        defaultCase(node);
    }

    public void caseTKDdtNature(TKDdtNature node)
    {
        defaultCase(node);
    }

    public void caseTKDeassign(TKDeassign node)
    {
        defaultCase(node);
    }

    public void caseTKDefault(TKDefault node)
    {
        defaultCase(node);
    }

    public void caseTKDefparam(TKDefparam node)
    {
        defaultCase(node);
    }

    public void caseTKDesign(TKDesign node)
    {
        defaultCase(node);
    }

    public void caseTKDisable(TKDisable node)
    {
        defaultCase(node);
    }

    public void caseTKDiscipline(TKDiscipline node)
    {
        defaultCase(node);
    }

    public void caseTKDiscrete(TKDiscrete node)
    {
        defaultCase(node);
    }

    public void caseTKDomain(TKDomain node)
    {
        defaultCase(node);
    }

    public void caseTKEdge(TKEdge node)
    {
        defaultCase(node);
    }

    public void caseTKElse(TKElse node)
    {
        defaultCase(node);
    }

    public void caseTKEndcase(TKEndcase node)
    {
        defaultCase(node);
    }

    public void caseTKEndconfig(TKEndconfig node)
    {
        defaultCase(node);
    }

    public void caseTKEnddiscipline(TKEnddiscipline node)
    {
        defaultCase(node);
    }

    public void caseTKEnd(TKEnd node)
    {
        defaultCase(node);
    }

    public void caseTKEndfunction(TKEndfunction node)
    {
        defaultCase(node);
    }

    public void caseTKEndgenerate(TKEndgenerate node)
    {
        defaultCase(node);
    }

    public void caseTKEndmodule(TKEndmodule node)
    {
        defaultCase(node);
    }

    public void caseTKEndnature(TKEndnature node)
    {
        defaultCase(node);
    }

    public void caseTKEndprimitive(TKEndprimitive node)
    {
        defaultCase(node);
    }

    public void caseTKEndspecify(TKEndspecify node)
    {
        defaultCase(node);
    }

    public void caseTKEndtable(TKEndtable node)
    {
        defaultCase(node);
    }

    public void caseTKEndtask(TKEndtask node)
    {
        defaultCase(node);
    }

    public void caseTKEvent(TKEvent node)
    {
        defaultCase(node);
    }

    public void caseTKExclude(TKExclude node)
    {
        defaultCase(node);
    }

    public void caseTKExp(TKExp node)
    {
        defaultCase(node);
    }

    public void caseTKFloor(TKFloor node)
    {
        defaultCase(node);
    }

    public void caseTKFlow(TKFlow node)
    {
        defaultCase(node);
    }

    public void caseTKForce(TKForce node)
    {
        defaultCase(node);
    }

    public void caseTKForever(TKForever node)
    {
        defaultCase(node);
    }

    public void caseTKFor(TKFor node)
    {
        defaultCase(node);
    }

    public void caseTKFork(TKFork node)
    {
        defaultCase(node);
    }

    public void caseTKFrom(TKFrom node)
    {
        defaultCase(node);
    }

    public void caseTKFunction(TKFunction node)
    {
        defaultCase(node);
    }

    public void caseTKGenerate(TKGenerate node)
    {
        defaultCase(node);
    }

    public void caseTKGenvar(TKGenvar node)
    {
        defaultCase(node);
    }

    public void caseTKGround(TKGround node)
    {
        defaultCase(node);
    }

    public void caseTKHighz0(TKHighz0 node)
    {
        defaultCase(node);
    }

    public void caseTKHighz1(TKHighz1 node)
    {
        defaultCase(node);
    }

    public void caseTKHypot(TKHypot node)
    {
        defaultCase(node);
    }

    public void caseTKIdtNature(TKIdtNature node)
    {
        defaultCase(node);
    }

    public void caseTKIf(TKIf node)
    {
        defaultCase(node);
    }

    public void caseTKIfnone(TKIfnone node)
    {
        defaultCase(node);
    }

    public void caseTKIncdir(TKIncdir node)
    {
        defaultCase(node);
    }

    public void caseTKInclude(TKInclude node)
    {
        defaultCase(node);
    }

    public void caseTKInf(TKInf node)
    {
        defaultCase(node);
    }

    public void caseTKInitial(TKInitial node)
    {
        defaultCase(node);
    }

    public void caseTKInout(TKInout node)
    {
        defaultCase(node);
    }

    public void caseTKInput(TKInput node)
    {
        defaultCase(node);
    }

    public void caseTKInstance(TKInstance node)
    {
        defaultCase(node);
    }

    public void caseTKInteger(TKInteger node)
    {
        defaultCase(node);
    }

    public void caseTKJoin(TKJoin node)
    {
        defaultCase(node);
    }

    public void caseTKLarge(TKLarge node)
    {
        defaultCase(node);
    }

    public void caseTKLiblist(TKLiblist node)
    {
        defaultCase(node);
    }

    public void caseTKLibrary(TKLibrary node)
    {
        defaultCase(node);
    }

    public void caseTKLn(TKLn node)
    {
        defaultCase(node);
    }

    public void caseTKLocalparam(TKLocalparam node)
    {
        defaultCase(node);
    }

    public void caseTKLogic(TKLogic node)
    {
        defaultCase(node);
    }

    public void caseTKLog(TKLog node)
    {
        defaultCase(node);
    }

    public void caseTKMacromodule(TKMacromodule node)
    {
        defaultCase(node);
    }

    public void caseTKMax(TKMax node)
    {
        defaultCase(node);
    }

    public void caseTKMedium(TKMedium node)
    {
        defaultCase(node);
    }

    public void caseTKMin(TKMin node)
    {
        defaultCase(node);
    }

    public void caseTKModule(TKModule node)
    {
        defaultCase(node);
    }

    public void caseTKNand(TKNand node)
    {
        defaultCase(node);
    }

    public void caseTKNature(TKNature node)
    {
        defaultCase(node);
    }

    public void caseTKNegedge(TKNegedge node)
    {
        defaultCase(node);
    }

    public void caseTKNmos(TKNmos node)
    {
        defaultCase(node);
    }

    public void caseTKNor(TKNor node)
    {
        defaultCase(node);
    }

    public void caseTKNoshowcancelled(TKNoshowcancelled node)
    {
        defaultCase(node);
    }

    public void caseTKNotif0(TKNotif0 node)
    {
        defaultCase(node);
    }

    public void caseTKNotif1(TKNotif1 node)
    {
        defaultCase(node);
    }

    public void caseTKNot(TKNot node)
    {
        defaultCase(node);
    }

    public void caseTKOr(TKOr node)
    {
        defaultCase(node);
    }

    public void caseTKOutput(TKOutput node)
    {
        defaultCase(node);
    }

    public void caseTKParameter(TKParameter node)
    {
        defaultCase(node);
    }

    public void caseTKPmos(TKPmos node)
    {
        defaultCase(node);
    }

    public void caseTKPosedge(TKPosedge node)
    {
        defaultCase(node);
    }

    public void caseTKPotential(TKPotential node)
    {
        defaultCase(node);
    }

    public void caseTKPow(TKPow node)
    {
        defaultCase(node);
    }

    public void caseTKPrimitive(TKPrimitive node)
    {
        defaultCase(node);
    }

    public void caseTKPull0(TKPull0 node)
    {
        defaultCase(node);
    }

    public void caseTKPull1(TKPull1 node)
    {
        defaultCase(node);
    }

    public void caseTKPulldown(TKPulldown node)
    {
        defaultCase(node);
    }

    public void caseTKPullup(TKPullup node)
    {
        defaultCase(node);
    }

    public void caseTKPulsestyleOndetect(TKPulsestyleOndetect node)
    {
        defaultCase(node);
    }

    public void caseTKPulsestyleOnevent(TKPulsestyleOnevent node)
    {
        defaultCase(node);
    }

    public void caseTKRcmos(TKRcmos node)
    {
        defaultCase(node);
    }

    public void caseTKReal(TKReal node)
    {
        defaultCase(node);
    }

    public void caseTKRealtime(TKRealtime node)
    {
        defaultCase(node);
    }

    public void caseTKReg(TKReg node)
    {
        defaultCase(node);
    }

    public void caseTKRelease(TKRelease node)
    {
        defaultCase(node);
    }

    public void caseTKRepeat(TKRepeat node)
    {
        defaultCase(node);
    }

    public void caseTKRnmos(TKRnmos node)
    {
        defaultCase(node);
    }

    public void caseTKRpmos(TKRpmos node)
    {
        defaultCase(node);
    }

    public void caseTKRtranif0(TKRtranif0 node)
    {
        defaultCase(node);
    }

    public void caseTKRtranif1(TKRtranif1 node)
    {
        defaultCase(node);
    }

    public void caseTKRtran(TKRtran node)
    {
        defaultCase(node);
    }

    public void caseTKScalared(TKScalared node)
    {
        defaultCase(node);
    }

    public void caseTKShowcancelled(TKShowcancelled node)
    {
        defaultCase(node);
    }

    public void caseTKSigned(TKSigned node)
    {
        defaultCase(node);
    }

    public void caseTKSinh(TKSinh node)
    {
        defaultCase(node);
    }

    public void caseTKSin(TKSin node)
    {
        defaultCase(node);
    }

    public void caseTKSmall(TKSmall node)
    {
        defaultCase(node);
    }

    public void caseTKSpecify(TKSpecify node)
    {
        defaultCase(node);
    }

    public void caseTKSpecparam(TKSpecparam node)
    {
        defaultCase(node);
    }

    public void caseTKSqrt(TKSqrt node)
    {
        defaultCase(node);
    }

    public void caseTKString(TKString node)
    {
        defaultCase(node);
    }

    public void caseTKStrong0(TKStrong0 node)
    {
        defaultCase(node);
    }

    public void caseTKStrong1(TKStrong1 node)
    {
        defaultCase(node);
    }

    public void caseTKSupply0(TKSupply0 node)
    {
        defaultCase(node);
    }

    public void caseTKSupply1(TKSupply1 node)
    {
        defaultCase(node);
    }

    public void caseTKTable(TKTable node)
    {
        defaultCase(node);
    }

    public void caseTKTanh(TKTanh node)
    {
        defaultCase(node);
    }

    public void caseTKTan(TKTan node)
    {
        defaultCase(node);
    }

    public void caseTKTask(TKTask node)
    {
        defaultCase(node);
    }

    public void caseTKTime(TKTime node)
    {
        defaultCase(node);
    }

    public void caseTKTranif0(TKTranif0 node)
    {
        defaultCase(node);
    }

    public void caseTKTranif1(TKTranif1 node)
    {
        defaultCase(node);
    }

    public void caseTKTran(TKTran node)
    {
        defaultCase(node);
    }

    public void caseTKTri0(TKTri0 node)
    {
        defaultCase(node);
    }

    public void caseTKTri1(TKTri1 node)
    {
        defaultCase(node);
    }

    public void caseTKTriand(TKTriand node)
    {
        defaultCase(node);
    }

    public void caseTKTrior(TKTrior node)
    {
        defaultCase(node);
    }

    public void caseTKTrireg(TKTrireg node)
    {
        defaultCase(node);
    }

    public void caseTKTri(TKTri node)
    {
        defaultCase(node);
    }

    public void caseTKUnits(TKUnits node)
    {
        defaultCase(node);
    }

    public void caseTKUnsigned(TKUnsigned node)
    {
        defaultCase(node);
    }

    public void caseTKUse(TKUse node)
    {
        defaultCase(node);
    }

    public void caseTKUwire(TKUwire node)
    {
        defaultCase(node);
    }

    public void caseTKVectored(TKVectored node)
    {
        defaultCase(node);
    }

    public void caseTKWait(TKWait node)
    {
        defaultCase(node);
    }

    public void caseTKWand(TKWand node)
    {
        defaultCase(node);
    }

    public void caseTKWeak0(TKWeak0 node)
    {
        defaultCase(node);
    }

    public void caseTKWeak1(TKWeak1 node)
    {
        defaultCase(node);
    }

    public void caseTKWhile(TKWhile node)
    {
        defaultCase(node);
    }

    public void caseTKWire(TKWire node)
    {
        defaultCase(node);
    }

    public void caseTKWone(TKWone node)
    {
        defaultCase(node);
    }

    public void caseTKWor(TKWor node)
    {
        defaultCase(node);
    }

    public void caseTKXnor(TKXnor node)
    {
        defaultCase(node);
    }

    public void caseTKXor(TKXor node)
    {
        defaultCase(node);
    }

    public void caseTKEdge01(TKEdge01 node)
    {
        defaultCase(node);
    }

    public void caseTKEdge0x(TKEdge0x node)
    {
        defaultCase(node);
    }

    public void caseTKEdge0z(TKEdge0z node)
    {
        defaultCase(node);
    }

    public void caseTKEdge10(TKEdge10 node)
    {
        defaultCase(node);
    }

    public void caseTKEdge1x(TKEdge1x node)
    {
        defaultCase(node);
    }

    public void caseTKEdge1z(TKEdge1z node)
    {
        defaultCase(node);
    }

    public void caseTKEdgex0(TKEdgex0 node)
    {
        defaultCase(node);
    }

    public void caseTKEdgex1(TKEdgex1 node)
    {
        defaultCase(node);
    }

    public void caseTKEdgez0(TKEdgez0 node)
    {
        defaultCase(node);
    }

    public void caseTKEdgez1(TKEdgez1 node)
    {
        defaultCase(node);
    }

    public void caseTKPathpulses(TKPathpulses node)
    {
        defaultCase(node);
    }

    public void caseTSimpleIdentifier(TSimpleIdentifier node)
    {
        defaultCase(node);
    }

    public void caseTEscapedIdentifier(TEscapedIdentifier node)
    {
        defaultCase(node);
    }

    public void caseTSystemFunctionIdentifier(TSystemFunctionIdentifier node)
    {
        defaultCase(node);
    }

    public void caseEOF(EOF node)
    {
        defaultCase(node);
    }

    public void defaultCase(@SuppressWarnings("unused") Node node)
    {
        // do nothing
    }
}
