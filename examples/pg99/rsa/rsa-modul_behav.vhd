--------------------------------------------------------------------------
--  Crypto Chip
--  Copyright (C) 1999, Projektgruppe WS98/99
--  University of Stuttgart / Department of Computer Science / IFI-RA
--------------------------------------------------------------------------
-- Designers : Thomas Schwarz
-- Group     : RSA
--------------------------------------------------------------------
-- Design Unit Name : Montgomery Multiplizierer
-- Purpose :  Part of the RSA-module-core for the cryptochip "pg99"
-- 
-- File Name :  montgomery.vhd
--------------------------------------------------------------------
-- Simulator : SYNOPSYS VHDL System Simulator (VSS) Version 3.2.a
--------------------------------------------------------------------
-- Date            | Changes
--                 | 
--                 |
-----------------------------------------------------------------------

--------------------------------------------------------------------------
--  Was implementiert wird
--  Modulare Multiplikation nach Montgomery und SRT-Division.
--  Das Schaltnetz fuehrt jeweils einen Iterationsschritt der beiden
--  Algorithmen durch, und speichert das Zwischenergenis in einer
--  Carry-Save Darstellung. In JEDEM Takt wird ein Iterationsschritt
--  berechnet.
--
--  
--------------------------------------------------------------------------


-- Kodierung fuer die SELDATA (1 downto 0) Leitung:
-- 00 M;
-- 01 X;
-- 10 E;
-- 11 frei, evtl. verwendbar, um A direkt zu laden...

library IEEE;
  use IEEE.std_logic_1164.all;
  use IEEE.std_logic_arith.all;
  use IEEE.std_logic_unsigned.all;


-- Kopfkommentar muss noch eingefuegt werden

entity rsamodul is
end rsamodul;




architecture BEHAV of rsamodul is

  constant NumBits : integer := 768;
  signal Y : std_logic_vector((NumBits-1) downto 0);
  signal Z : std_logic_vector((NumBits-1) downto 0);
  signal X : std_logic_vector((NumBits-1) downto 0);
  signal M : std_logic_vector((NumBits-1) downto 0);
  signal R : std_logic_vector((NumBits-1) downto 0);
  signal ETEST : std_logic_vector((NumBits-1) downto 0);
  signal A : std_logic_vector((NumBits-1) downto 0);
  signal B : std_logic_vector((NumBits-1) downto 0);
  signal MULTGO : std_logic := '0';
  signal MULTRDY : std_logic := '0';
  signal EXPGO : std_logic := '0';
  signal EXPRDY : std_logic := '0';

begin

  TEST : process
  variable DATA : std_logic_vector((NumBits-1) downto 0);
  variable CIPH : std_logic_vector((NumBits-1) downto 0);
  begin
    EXPGO <= '0';
    -- Testdaten einlesen
    -- p    = 15895511695482343347343640916899085648996169095265213007693949535406097316800854227950703119861664343991830006526031
    -- q    = 30008600851858759042821697199043026029520161148581919454359707071894426173096545011064119065719780400960213102319061
    -- M    = 477002065805782315837344081746709723444093031537071434199686079076074948203659995059792493039826357535188349099061344319089689284115423144303419479719835693408061615551338548507433833541577045150536823463696844073817743970363976891
    -- SK   = 346802819874206783394997254763159270453869871580477688056443895090870676953243957181684193196526355328430581200183002349097450706421715916116179723013294929464794141258446012770197189080098160796148326664244403376144057240180900643
    -- PK   = 100735831014177128159963977558114340408691412879932859890422364283232205469877001540612804400906307325409965796616065094844080589774631447151936918221907824222335373577046422181462508180952616021425933119075845705951931300038624307
    -- DATA = 219092924103710526484223683029256486983044768243547132495079791644139609108847397662933699695172600234490851785675639560672451631368352798715660888779040787837625606319886526339907864413601339394429736778201365130581996742232618930
    -- CIPH = 309472560801941404577073001759350780719034532254923342274912858677037550464284244834378530253006607333680784996662168575722163634316186755263969553995529684874430210625630904984179971253313278578455519475487756575944548281728757682





    X <= DATA;
    wait for 10 ns;
    -- Potenzierung starten
    EXPGO <= '1';
    wait until EXPRDY'event and EXPRDY='1';
    -- Ergebnis auswerten
    assert Y = CIPH;
    EXPGO <= '0';
    wait for 10 ns;

    wait;
    
    -- und wieder dekodieren!

    X <= CIPH;
    wait for 10 ns;
    -- Potenzierung starten
    EXPGO <= '1';
    wait until EXPRDY'event and EXPRDY='1';
    -- Ergebnis auswerten
    assert Y = DATA;
    EXPGO <= '0';
    wait for 10 ns;




    -- Testdaten einlesen!
    -- p = 12309467399481529069134276473829095425260919043471573483481259999271638170790627228606332909396974122098647464495949
    -- q = 36298127639191934806564768239538542284497256221334257019274877925120157345635692299740519442848652996129364764082573
    -- M = 446810618836852559818559630692293258140650132731050869318783345152110492110152691482197197011452487968134298373524928192065198626714985696715849989981143351580649266449096418557439231626751395290776609979783806860972438426859996777
    -- SK = 297359193457480480198908762851090963920817338252252726618255979063224448101662761930075455643851634563079822588757348231336049266800699482070487838528682148092541019795443467042964057138342050971128327719913863237613131887324343459
    -- PK = 87644022143073640505836996495873428086134529681104001512674703102929758510986775836743463905934518097722471081749452655420376928296064452263563811870033992327547742372987995088578867024033789318718023139071830546992714991323329051
    -- DATA = 49125638771757543689231651211475084292931082335710381100108244376759589022532353420831575508961550216671250762605928048001761626157546981278903127869446332879692676809182701430112620682053577493500883150222623214163154024006505456
    -- CIPH = 193299506650123888962773221125643949081405108594259321679655201006551705926095882430046907150110842748303573870322978868271701513628007126048756609673737544409824827945001989216218876579419508187695382705718893774501487951602684861




    CIPH := "000111111101111110110010010011101101010100011011100000110000010000110001000010100010011101111011001010111011111011111111110001010001101110101011110011101000000001010010001001000110100001111111011100011001110010000011111011100100011001011011001000101100100000110110101010111110011101000011000101011101010011011010101101011000011110100011111000110001110111111111000001101001100111011011111111100100000111001011111010011101010101001000001111111010100111110110000011011100110001111000010111101110110111110001100000000011101101011001111000011010100010000100110100010101101010101110110101111101010000000110110011011000001111111100110111100101100100011001101111001001000000110011001001000110101110000111101000101000001110111111001010111001111000110000111000101001001110111101";
    X <= DATA;
    wait for 10 ns;
    -- Potenzierung starten
    EXPGO <= '1';
    wait until EXPRDY'event and EXPRDY='1';
    -- Ergebnis auswerten
    assert Y = CIPH;
    EXPGO <= '0';
    wait for 10 ns;


    -- und wieder dekodieren!

    X <= CIPH;
    wait for 10 ns;
    -- Potenzierung starten
    EXPGO <= '1';
    wait until EXPRDY'event and EXPRDY='1';
    -- Ergebnis auswerten
    assert Y = DATA;
    EXPGO <= '0';
    wait for 10 ns;




    -- Testdaten einlesen
--    M <= "";
--    X <= "";
--    ETEST <= "";
--    VGL := "";
    wait for 10 ns;
    -- Potenzierung starten
    EXPGO <= '1';
    wait until EXPRDY'event and EXPRDY='1';
    -- Ergebnis auswerten
    assert Y = DATA;
    EXPGO <= '0';
    wait for 10 ns;

    wait;
  end process;




  EXP : process
  variable FIRSTONE : std_logic;
  begin
    -- Warten auf Potenzierauftrag
    wait until EXPGO'event and EXPGO='1';
    EXPRDY <= '0';
    FIRSTONE := '1';
    MULTGO <= '0';
    Z <= X;
    wait for 10 ns;

    -- Potenzierschleife
    for j in 0 to (NumBits-1)
    loop
      if j > 0 then
        -- quadrieren Z = Z * Z
        A <= Z;
        B <= Z;
        MULTGO <= '1';
        wait until MULTRDY'event and MULTRDY='1';

        Z <= R;
        MULTGO <= '0';
        wait for 10 ns;
      end if;
      if ETEST(j) = '1' then
        -- Z auf Y draufmultiplizieren
        if FIRSTONE = '1' then
          -- das erste Mal ist Y=1, d.h. kopieren reicht
          Y <= Z;
          FIRSTONE := '0';
          wait for 10 ns;
        else
        -- Y = Y * Z
          A <= Y;
          B <= Z;
          MULTGO <= '1';
          wait until MULTRDY'event and MULTRDY='1';

          Y <= R;
          MULTGO <= '0';
          wait for 10 ns;
        end if;
      end if;
    end loop;

    -- Ergebnis ausgeben
    wait for 10 ns;
    EXPRDY <= '1';
  end process;



  MULT : process
  variable REST : std_logic_vector(NumBits downto 0);
  variable TEMP : std_logic_vector(NumBits downto 0);
  begin
    -- Warten auf Multiplikationsauftrag
    wait until MULTGO'event and MULTGO='1';
    MULTRDY <= '0';
    REST := conv_std_logic_vector(0,NumBits+1);
    R <= REST((NumBits-1) downto 0);
    wait for 10 ns;

    for i in (NumBits-1) downto 0
    loop
      -- schieben
      REST := REST((NumBits-1) downto 0) & '0';
      TEMP := REST - ('0'&M);
      if TEMP(NumBits)='0' then
        -- TEMP > 0 => REST > M => M konnte abgezogen werden
        REST := TEMP;
      end if;
      if A(i)='1' then
        -- B dazuaddieren und wieder auf M pruefen
        REST := REST + ('0'&B);
        TEMP := REST - ('0'&M);
        if TEMP(NumBits)='0' then
          -- TEMP > 0 => REST > M => M konnte abgezogen werden
          REST := TEMP;
        end if;
      end if;
    end loop;

    -- Ergebnis ausgeben
    wait for 10 ns;
    R <= REST((NumBits-1) downto 0);
    wait for 10 ns;
    MULTRDY <= '1';
  end process;

end BEHAV;
